{"version":3,"file":"OverlayScrollbars.014cf661.js","sources":["../../node_modules/overlayscrollbars/js/OverlayScrollbars.js","../../node_modules/@storybook/components/dist/esm/ScrollArea/OverlayScrollbars.js"],"sourcesContent":["/*!\r\n * OverlayScrollbars\r\n * https://github.com/KingSora/OverlayScrollbars\r\n *\r\n * Version: 1.13.0\r\n *\r\n * Copyright KingSora | Rene Haas.\r\n * https://github.com/KingSora\r\n *\r\n * Released under the MIT license.\r\n * Date: 02.08.2020\r\n */\r\n\r\n(function (global, factory) {\r\n    if (typeof define === 'function' && define.amd)\r\n        define(function () { return factory(global, global.document, undefined); });\r\n    else if (typeof module === 'object' && typeof module.exports === 'object')\r\n        module.exports = factory(global, global.document, undefined);\r\n    else\r\n        factory(global, global.document, undefined);\r\n}(typeof window !== 'undefined' ? window : this,\r\n    function (window, document, undefined) {\r\n        'use strict';\r\n        var PLUGINNAME = 'OverlayScrollbars';\r\n        var TYPES = {\r\n            o: 'object',\r\n            f: 'function',\r\n            a: 'array',\r\n            s: 'string',\r\n            b: 'boolean',\r\n            n: 'number',\r\n            u: 'undefined',\r\n            z: 'null'\r\n            //d : 'date',\r\n            //e : 'error',\r\n            //r : 'regexp',\r\n            //y : 'symbol'\r\n        };\r\n        var LEXICON = {\r\n            c: 'class',\r\n            s: 'style',\r\n            i: 'id',\r\n            l: 'length',\r\n            p: 'prototype',\r\n            ti: 'tabindex',\r\n            oH: 'offsetHeight',\r\n            cH: 'clientHeight',\r\n            sH: 'scrollHeight',\r\n            oW: 'offsetWidth',\r\n            cW: 'clientWidth',\r\n            sW: 'scrollWidth',\r\n            hOP: 'hasOwnProperty',\r\n            bCR: 'getBoundingClientRect'\r\n        };\r\n        var VENDORS = (function () {\r\n            //https://developer.mozilla.org/en-US/docs/Glossary/Vendor_Prefix\r\n            var jsCache = {};\r\n            var cssCache = {};\r\n            var cssPrefixes = ['-webkit-', '-moz-', '-o-', '-ms-'];\r\n            var jsPrefixes = ['WebKit', 'Moz', 'O', 'MS'];\r\n            function firstLetterToUpper(str) {\r\n                return str.charAt(0).toUpperCase() + str.slice(1);\r\n            }\r\n\r\n            return {\r\n                _cssPrefixes: cssPrefixes,\r\n                _jsPrefixes: jsPrefixes,\r\n                _cssProperty: function (name) {\r\n                    var result = cssCache[name];\r\n\r\n                    if (cssCache[LEXICON.hOP](name))\r\n                        return result;\r\n\r\n                    var uppercasedName = firstLetterToUpper(name);\r\n                    var elmStyle = document.createElement('div')[LEXICON.s];\r\n                    var resultPossibilities;\r\n                    var i = 0;\r\n                    var v;\r\n                    var currVendorWithoutDashes;\r\n\r\n                    for (; i < cssPrefixes.length; i++) {\r\n                        currVendorWithoutDashes = cssPrefixes[i].replace(/-/g, '');\r\n                        resultPossibilities = [\r\n                            name, //transition\r\n                            cssPrefixes[i] + name, //-webkit-transition\r\n                            currVendorWithoutDashes + uppercasedName, //webkitTransition\r\n                            firstLetterToUpper(currVendorWithoutDashes) + uppercasedName //WebkitTransition\r\n                        ];\r\n                        for (v = 0; v < resultPossibilities[LEXICON.l]; v++) {\r\n                            if (elmStyle[resultPossibilities[v]] !== undefined) {\r\n                                result = resultPossibilities[v];\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    cssCache[name] = result;\r\n                    return result;\r\n                },\r\n                _cssPropertyValue: function (property, values, suffix) {\r\n                    var name = property + ' ' + values;\r\n                    var result = cssCache[name];\r\n\r\n                    if (cssCache[LEXICON.hOP](name))\r\n                        return result;\r\n\r\n                    var dummyStyle = document.createElement('div')[LEXICON.s];\r\n                    var possbleValues = values.split(' ');\r\n                    var preparedSuffix = suffix || '';\r\n                    var i = 0;\r\n                    var v = -1;\r\n                    var prop;\r\n\r\n                    for (; i < possbleValues[LEXICON.l]; i++) {\r\n                        for (; v < VENDORS._cssPrefixes[LEXICON.l]; v++) {\r\n                            prop = v < 0 ? possbleValues[i] : VENDORS._cssPrefixes[v] + possbleValues[i];\r\n                            dummyStyle.cssText = property + ':' + prop + preparedSuffix;\r\n                            if (dummyStyle[LEXICON.l]) {\r\n                                result = prop;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    cssCache[name] = result;\r\n                    return result;\r\n                },\r\n                _jsAPI: function (name, isInterface, fallback) {\r\n                    var i = 0;\r\n                    var result = jsCache[name];\r\n\r\n                    if (!jsCache[LEXICON.hOP](name)) {\r\n                        result = window[name];\r\n                        for (; i < jsPrefixes[LEXICON.l]; i++)\r\n                            result = result || window[(isInterface ? jsPrefixes[i] : jsPrefixes[i].toLowerCase()) + firstLetterToUpper(name)];\r\n                        jsCache[name] = result;\r\n                    }\r\n                    return result || fallback;\r\n                }\r\n            }\r\n        })();\r\n        var COMPATIBILITY = (function () {\r\n            function windowSize(x) {\r\n                return x ? window.innerWidth || document.documentElement[LEXICON.cW] || document.body[LEXICON.cW] : window.innerHeight || document.documentElement[LEXICON.cH] || document.body[LEXICON.cH];\r\n            }\r\n            function bind(func, thisObj) {\r\n                if (typeof func != TYPES.f) {\r\n                    throw \"Can't bind function!\";\r\n                    // closest thing possible to the ECMAScript 5\r\n                    // internal IsCallable function\r\n                    //throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');\r\n                }\r\n                var proto = LEXICON.p;\r\n                var aArgs = Array[proto].slice.call(arguments, 2);\r\n                var fNOP = function () { };\r\n                var fBound = function () { return func.apply(this instanceof fNOP ? this : thisObj, aArgs.concat(Array[proto].slice.call(arguments))); };\r\n\r\n                if (func[proto])\r\n                    fNOP[proto] = func[proto]; // Function.prototype doesn't have a prototype property\r\n                fBound[proto] = new fNOP();\r\n\r\n                return fBound;\r\n            }\r\n\r\n            return {\r\n                /**\r\n                 * Gets the current window width.\r\n                 * @returns {Number|number} The current window width in pixel.\r\n                 */\r\n                wW: bind(windowSize, 0, true),\r\n\r\n                /**\r\n                 * Gets the current window height.\r\n                 * @returns {Number|number} The current window height in pixel.\r\n                 */\r\n                wH: bind(windowSize, 0),\r\n\r\n                /**\r\n                 * Gets the MutationObserver Object or undefined if not supported.\r\n                 * @returns {MutationObserver|*|undefined} The MutationsObserver Object or undefined.\r\n                 */\r\n                mO: bind(VENDORS._jsAPI, 0, 'MutationObserver', true),\r\n\r\n                /**\r\n                 * Gets the ResizeObserver Object or undefined if not supported.\r\n                 * @returns {MutationObserver|*|undefined} The ResizeObserver Object or undefined.\r\n                 */\r\n                rO: bind(VENDORS._jsAPI, 0, 'ResizeObserver', true),\r\n\r\n                /**\r\n                 * Gets the RequestAnimationFrame method or it's corresponding polyfill.\r\n                 * @returns {*|Function} The RequestAnimationFrame method or it's corresponding polyfill.\r\n                 */\r\n                rAF: bind(VENDORS._jsAPI, 0, 'requestAnimationFrame', false, function (func) { return window.setTimeout(func, 1000 / 60); }),\r\n\r\n                /**\r\n                 * Gets the CancelAnimationFrame method or it's corresponding polyfill.\r\n                 * @returns {*|Function} The CancelAnimationFrame method or it's corresponding polyfill.\r\n                 */\r\n                cAF: bind(VENDORS._jsAPI, 0, 'cancelAnimationFrame', false, function (id) { return window.clearTimeout(id); }),\r\n\r\n                /**\r\n                 * Gets the current time.\r\n                 * @returns {number} The current time.\r\n                 */\r\n                now: function () {\r\n                    return Date.now && Date.now() || new Date().getTime();\r\n                },\r\n\r\n                /**\r\n                 * Stops the propagation of the given event.\r\n                 * @param event The event of which the propagation shall be stoped.\r\n                 */\r\n                stpP: function (event) {\r\n                    if (event.stopPropagation)\r\n                        event.stopPropagation();\r\n                    else\r\n                        event.cancelBubble = true;\r\n                },\r\n\r\n                /**\r\n                 * Prevents the default action of the given event.\r\n                 * @param event The event of which the default action shall be prevented.\r\n                 */\r\n                prvD: function (event) {\r\n                    if (event.preventDefault && event.cancelable)\r\n                        event.preventDefault();\r\n                    else\r\n                        event.returnValue = false;\r\n                },\r\n\r\n                /**\r\n                 * Gets the pageX and pageY values of the given mouse event.\r\n                 * @param event The mouse event of which the pageX and pageX shall be got.\r\n                 * @returns {{x: number, y: number}} x = pageX value, y = pageY value.\r\n                 */\r\n                page: function (event) {\r\n                    event = event.originalEvent || event;\r\n\r\n                    var strPage = 'page';\r\n                    var strClient = 'client';\r\n                    var strX = 'X';\r\n                    var strY = 'Y';\r\n                    var target = event.target || event.srcElement || document;\r\n                    var eventDoc = target.ownerDocument || document;\r\n                    var doc = eventDoc.documentElement;\r\n                    var body = eventDoc.body;\r\n\r\n                    //if touch event return return pageX/Y of it\r\n                    if (event.touches !== undefined) {\r\n                        var touch = event.touches[0];\r\n                        return {\r\n                            x: touch[strPage + strX],\r\n                            y: touch[strPage + strY]\r\n                        }\r\n                    }\r\n\r\n                    // Calculate pageX/Y if not native supported\r\n                    if (!event[strPage + strX] && event[strClient + strX] && event[strClient + strX] != null) {\r\n\r\n                        return {\r\n                            x: event[strClient + strX] +\r\n                                (doc && doc.scrollLeft || body && body.scrollLeft || 0) -\r\n                                (doc && doc.clientLeft || body && body.clientLeft || 0),\r\n                            y: event[strClient + strY] +\r\n                                (doc && doc.scrollTop || body && body.scrollTop || 0) -\r\n                                (doc && doc.clientTop || body && body.clientTop || 0)\r\n                        }\r\n                    }\r\n                    return {\r\n                        x: event[strPage + strX],\r\n                        y: event[strPage + strY]\r\n                    };\r\n                },\r\n\r\n                /**\r\n                 * Gets the clicked mouse button of the given mouse event.\r\n                 * @param event The mouse event of which the clicked button shal be got.\r\n                 * @returns {number} The number of the clicked mouse button. (0 : none | 1 : leftButton | 2 : middleButton | 3 : rightButton)\r\n                 */\r\n                mBtn: function (event) {\r\n                    var button = event.button;\r\n                    if (!event.which && button !== undefined)\r\n                        return (button & 1 ? 1 : (button & 2 ? 3 : (button & 4 ? 2 : 0)));\r\n                    else\r\n                        return event.which;\r\n                },\r\n\r\n                /**\r\n                 * Checks whether a item is in the given array and returns its index.\r\n                 * @param item The item of which the position in the array shall be determined.\r\n                 * @param arr The array.\r\n                 * @returns {number} The zero based index of the item or -1 if the item isn't in the array.\r\n                 */\r\n                inA: function (item, arr) {\r\n                    for (var i = 0; i < arr[LEXICON.l]; i++)\r\n                        //Sometiems in IE a \"SCRIPT70\" Permission denied error occurs if HTML elements in a iFrame are compared\r\n                        try {\r\n                            if (arr[i] === item)\r\n                                return i;\r\n                        }\r\n                        catch (e) { }\r\n                    return -1;\r\n                },\r\n\r\n                /**\r\n                 * Returns true if the given value is a array.\r\n                 * @param arr The potential array.\r\n                 * @returns {boolean} True if the given value is a array, false otherwise.\r\n                 */\r\n                isA: function (arr) {\r\n                    var def = Array.isArray;\r\n                    return def ? def(arr) : this.type(arr) == TYPES.a;\r\n                },\r\n\r\n                /**\r\n                 * Determine the internal JavaScript [[Class]] of the given object.\r\n                 * @param obj The object of which the type shall be determined.\r\n                 * @returns {string} The type of the given object.\r\n                 */\r\n                type: function (obj) {\r\n                    if (obj === undefined)\r\n                        return obj + '';\r\n                    if (obj === null)\r\n                        return obj + '';\r\n                    return Object[LEXICON.p].toString.call(obj).replace(/^\\[object (.+)\\]$/, '$1').toLowerCase();\r\n                },\r\n\r\n\r\n                bind: bind\r\n\r\n                /**\r\n                 * Gets the vendor-prefixed CSS property by the given name.\r\n                 * For example the given name is \"transform\" and you're using a old Firefox browser then the returned value would be \"-moz-transform\".\r\n                 * If the browser doesn't need a vendor-prefix, then the returned string is the given name.\r\n                 * If the browser doesn't support the given property name at all (not even with a vendor-prefix) the returned value is null.\r\n                 * @param propName The unprefixed CSS property name.\r\n                 * @returns {string|null} The vendor-prefixed CSS property or null if the browser doesn't support the given CSS property.\r\n\r\n                cssProp: function(propName) {\r\n                    return VENDORS._cssProperty(propName);\r\n                }\r\n                */\r\n            }\r\n        })();\r\n\r\n\r\n        var MATH = Math;\r\n        var JQUERY = window.jQuery;\r\n        var EASING = (function () {\r\n            var _easingsMath = {\r\n                p: MATH.PI,\r\n                c: MATH.cos,\r\n                s: MATH.sin,\r\n                w: MATH.pow,\r\n                t: MATH.sqrt,\r\n                n: MATH.asin,\r\n                a: MATH.abs,\r\n                o: 1.70158\r\n            };\r\n\r\n            /*\r\n             x : current percent (0 - 1),\r\n             t : current time (duration * percent),\r\n             b : start value (from),\r\n             c : end value (to),\r\n             d : duration\r\n\r\n             easingName : function(x, t, b, c, d) { return easedValue; }\r\n             */\r\n\r\n            return {\r\n                swing: function (x, t, b, c, d) {\r\n                    return 0.5 - _easingsMath.c(x * _easingsMath.p) / 2;\r\n                },\r\n                linear: function (x, t, b, c, d) {\r\n                    return x;\r\n                },\r\n                easeInQuad: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t + b;\r\n                },\r\n                easeOutQuad: function (x, t, b, c, d) {\r\n                    return -c * (t /= d) * (t - 2) + b;\r\n                },\r\n                easeInOutQuad: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t + b : -c / 2 * ((--t) * (t - 2) - 1) + b;\r\n                },\r\n                easeInCubic: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t + b;\r\n                },\r\n                easeOutCubic: function (x, t, b, c, d) {\r\n                    return c * ((t = t / d - 1) * t * t + 1) + b;\r\n                },\r\n                easeInOutCubic: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t + b : c / 2 * ((t -= 2) * t * t + 2) + b;\r\n                },\r\n                easeInQuart: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t * t + b;\r\n                },\r\n                easeOutQuart: function (x, t, b, c, d) {\r\n                    return -c * ((t = t / d - 1) * t * t * t - 1) + b;\r\n                },\r\n                easeInOutQuart: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t * t + b : -c / 2 * ((t -= 2) * t * t * t - 2) + b;\r\n                },\r\n                easeInQuint: function (x, t, b, c, d) {\r\n                    return c * (t /= d) * t * t * t * t + b;\r\n                },\r\n                easeOutQuint: function (x, t, b, c, d) {\r\n                    return c * ((t = t / d - 1) * t * t * t * t + 1) + b;\r\n                },\r\n                easeInOutQuint: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? c / 2 * t * t * t * t * t + b : c / 2 * ((t -= 2) * t * t * t * t + 2) + b;\r\n                },\r\n                easeInSine: function (x, t, b, c, d) {\r\n                    return -c * _easingsMath.c(t / d * (_easingsMath.p / 2)) + c + b;\r\n                },\r\n                easeOutSine: function (x, t, b, c, d) {\r\n                    return c * _easingsMath.s(t / d * (_easingsMath.p / 2)) + b;\r\n                },\r\n                easeInOutSine: function (x, t, b, c, d) {\r\n                    return -c / 2 * (_easingsMath.c(_easingsMath.p * t / d) - 1) + b;\r\n                },\r\n                easeInExpo: function (x, t, b, c, d) {\r\n                    return (t == 0) ? b : c * _easingsMath.w(2, 10 * (t / d - 1)) + b;\r\n                },\r\n                easeOutExpo: function (x, t, b, c, d) {\r\n                    return (t == d) ? b + c : c * (-_easingsMath.w(2, -10 * t / d) + 1) + b;\r\n                },\r\n                easeInOutExpo: function (x, t, b, c, d) {\r\n                    if (t == 0) return b;\r\n                    if (t == d) return b + c;\r\n                    if ((t /= d / 2) < 1) return c / 2 * _easingsMath.w(2, 10 * (t - 1)) + b;\r\n                    return c / 2 * (-_easingsMath.w(2, -10 * --t) + 2) + b;\r\n                },\r\n                easeInCirc: function (x, t, b, c, d) {\r\n                    return -c * (_easingsMath.t(1 - (t /= d) * t) - 1) + b;\r\n                },\r\n                easeOutCirc: function (x, t, b, c, d) {\r\n                    return c * _easingsMath.t(1 - (t = t / d - 1) * t) + b;\r\n                },\r\n                easeInOutCirc: function (x, t, b, c, d) {\r\n                    return ((t /= d / 2) < 1) ? -c / 2 * (_easingsMath.t(1 - t * t) - 1) + b : c / 2 * (_easingsMath.t(1 - (t -= 2) * t) + 1) + b;\r\n                },\r\n                easeInElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b; if ((t /= d) == 1) return b + c; if (!p) p = d * .3;\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    return -(a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\r\n                },\r\n                easeOutElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b;\r\n                    if ((t /= d) == 1) return b + c;\r\n                    if (!p) p = d * .3;\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    return a * _easingsMath.w(2, -10 * t) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) + c + b;\r\n                },\r\n                easeInOutElastic: function (x, t, b, c, d) {\r\n                    var s = _easingsMath.o; var p = 0; var a = c;\r\n                    if (t == 0) return b;\r\n                    if ((t /= d / 2) == 2) return b + c;\r\n                    if (!p) p = d * (.3 * 1.5);\r\n                    if (a < _easingsMath.a(c)) { a = c; s = p / 4; }\r\n                    else s = p / (2 * _easingsMath.p) * _easingsMath.n(c / a);\r\n                    if (t < 1) return -.5 * (a * _easingsMath.w(2, 10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p)) + b;\r\n                    return a * _easingsMath.w(2, -10 * (t -= 1)) * _easingsMath.s((t * d - s) * (2 * _easingsMath.p) / p) * .5 + c + b;\r\n                },\r\n                easeInBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return c * (t /= d) * t * ((s + 1) * t - s) + b;\r\n                },\r\n                easeOutBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return c * ((t = t / d - 1) * t * ((s + 1) * t + s) + 1) + b;\r\n                },\r\n                easeInOutBack: function (x, t, b, c, d, s) {\r\n                    s = s || _easingsMath.o;\r\n                    return ((t /= d / 2) < 1) ? c / 2 * (t * t * (((s *= (1.525)) + 1) * t - s)) + b : c / 2 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2) + b;\r\n                },\r\n                easeInBounce: function (x, t, b, c, d) {\r\n                    return c - this.easeOutBounce(x, d - t, 0, c, d) + b;\r\n                },\r\n                easeOutBounce: function (x, t, b, c, d) {\r\n                    var o = 7.5625;\r\n                    if ((t /= d) < (1 / 2.75)) {\r\n                        return c * (o * t * t) + b;\r\n                    } else if (t < (2 / 2.75)) {\r\n                        return c * (o * (t -= (1.5 / 2.75)) * t + .75) + b;\r\n                    } else if (t < (2.5 / 2.75)) {\r\n                        return c * (o * (t -= (2.25 / 2.75)) * t + .9375) + b;\r\n                    } else {\r\n                        return c * (o * (t -= (2.625 / 2.75)) * t + .984375) + b;\r\n                    }\r\n                },\r\n                easeInOutBounce: function (x, t, b, c, d) {\r\n                    return (t < d / 2) ? this.easeInBounce(x, t * 2, 0, c, d) * .5 + b : this.easeOutBounce(x, t * 2 - d, 0, c, d) * .5 + c * .5 + b;\r\n                }\r\n            };\r\n            /*\r\n             *\r\n             * TERMS OF USE - EASING EQUATIONS\r\n             * \r\n             * Open source under the BSD License. \r\n             * \r\n             * Copyright Â© 2001 Robert Penner\r\n             * All rights reserved.\r\n             * \r\n             * Redistribution and use in source and binary forms, with or without modification, \r\n             * are permitted provided that the following conditions are met:\r\n             * \r\n             * Redistributions of source code must retain the above copyright notice, this list of \r\n             * conditions and the following disclaimer.\r\n             * Redistributions in binary form must reproduce the above copyright notice, this list \r\n             * of conditions and the following disclaimer in the documentation and/or other materials \r\n             * provided with the distribution.\r\n             * \r\n             * Neither the name of the author nor the names of contributors may be used to endorse \r\n             * or promote products derived from this software without specific prior written permission.\r\n             * \r\n             * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY \r\n             * EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\r\n             * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE\r\n             *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n             *  EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE\r\n             *  GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED \r\n             * AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n             *  NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED \r\n             * OF THE POSSIBILITY OF SUCH DAMAGE. \r\n             *\r\n             */\r\n        })();\r\n        var FRAMEWORK = (function () {\r\n            var _rnothtmlwhite = (/[^\\x20\\t\\r\\n\\f]+/g);\r\n            var _strSpace = ' ';\r\n            var _strEmpty = '';\r\n            var _strScrollLeft = 'scrollLeft';\r\n            var _strScrollTop = 'scrollTop';\r\n            var _animations = [];\r\n            var _type = COMPATIBILITY.type;\r\n            var _cssNumber = {\r\n                animationIterationCount: true,\r\n                columnCount: true,\r\n                fillOpacity: true,\r\n                flexGrow: true,\r\n                flexShrink: true,\r\n                fontWeight: true,\r\n                lineHeight: true,\r\n                opacity: true,\r\n                order: true,\r\n                orphans: true,\r\n                widows: true,\r\n                zIndex: true,\r\n                zoom: true\r\n            };\r\n\r\n            function extend() {\r\n                var src, copyIsArray, copy, name, options, clone, target = arguments[0] || {},\r\n                    i = 1,\r\n                    length = arguments[LEXICON.l],\r\n                    deep = false;\r\n\r\n                // Handle a deep copy situation\r\n                if (_type(target) == TYPES.b) {\r\n                    deep = target;\r\n                    target = arguments[1] || {};\r\n                    // skip the boolean and the target\r\n                    i = 2;\r\n                }\r\n\r\n                // Handle case when target is a string or something (possible in deep copy)\r\n                if (_type(target) != TYPES.o && !_type(target) == TYPES.f) {\r\n                    target = {};\r\n                }\r\n\r\n                // extend jQuery itself if only one argument is passed\r\n                if (length === i) {\r\n                    target = FakejQuery;\r\n                    --i;\r\n                }\r\n\r\n                for (; i < length; i++) {\r\n                    // Only deal with non-null/undefined values\r\n                    if ((options = arguments[i]) != null) {\r\n                        // Extend the base object\r\n                        for (name in options) {\r\n                            src = target[name];\r\n                            copy = options[name];\r\n\r\n                            // Prevent never-ending loop\r\n                            if (target === copy) {\r\n                                continue;\r\n                            }\r\n\r\n                            // Recurse if we're merging plain objects or arrays\r\n                            if (deep && copy && (isPlainObject(copy) || (copyIsArray = COMPATIBILITY.isA(copy)))) {\r\n                                if (copyIsArray) {\r\n                                    copyIsArray = false;\r\n                                    clone = src && COMPATIBILITY.isA(src) ? src : [];\r\n\r\n                                } else {\r\n                                    clone = src && isPlainObject(src) ? src : {};\r\n                                }\r\n\r\n                                // Never move original objects, clone them\r\n                                target[name] = extend(deep, clone, copy);\r\n\r\n                                // Don't bring in undefined values\r\n                            } else if (copy !== undefined) {\r\n                                target[name] = copy;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // Return the modified object\r\n                return target;\r\n            };\r\n\r\n            function inArray(item, arr, fromIndex) {\r\n                for (var i = fromIndex || 0; i < arr[LEXICON.l]; i++)\r\n                    if (arr[i] === item)\r\n                        return i;\r\n                return -1;\r\n            }\r\n\r\n            function isFunction(obj) {\r\n                return _type(obj) == TYPES.f;\r\n            };\r\n\r\n            function isEmptyObject(obj) {\r\n                for (var name in obj)\r\n                    return false;\r\n                return true;\r\n            };\r\n\r\n            function isPlainObject(obj) {\r\n                if (!obj || _type(obj) != TYPES.o)\r\n                    return false;\r\n\r\n                var key;\r\n                var proto = LEXICON.p;\r\n                var hasOwnProperty = Object[proto].hasOwnProperty;\r\n                var hasOwnConstructor = hasOwnProperty.call(obj, 'constructor');\r\n                var hasIsPrototypeOf = obj.constructor && obj.constructor[proto] && hasOwnProperty.call(obj.constructor[proto], 'isPrototypeOf');\r\n\r\n                if (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\r\n                    return false;\r\n                }\r\n\r\n\r\n                for (key in obj) { /**/ }\r\n\r\n                return _type(key) == TYPES.u || hasOwnProperty.call(obj, key);\r\n            };\r\n\r\n            function each(obj, callback) {\r\n                var i = 0;\r\n\r\n                if (isArrayLike(obj)) {\r\n                    for (; i < obj[LEXICON.l]; i++) {\r\n                        if (callback.call(obj[i], i, obj[i]) === false)\r\n                            break;\r\n                    }\r\n                }\r\n                else {\r\n                    for (i in obj) {\r\n                        if (callback.call(obj[i], i, obj[i]) === false)\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                return obj;\r\n            };\r\n\r\n            function isArrayLike(obj) {\r\n                var length = !!obj && [LEXICON.l] in obj && obj[LEXICON.l];\r\n                var t = _type(obj);\r\n                return isFunction(t) ? false : (t == TYPES.a || length === 0 || _type(length) == TYPES.n && length > 0 && (length - 1) in obj);\r\n            }\r\n\r\n            function stripAndCollapse(value) {\r\n                var tokens = value.match(_rnothtmlwhite) || [];\r\n                return tokens.join(_strSpace);\r\n            }\r\n\r\n            function matches(elem, selector) {\r\n                var nodeList = (elem.parentNode || document).querySelectorAll(selector) || [];\r\n                var i = nodeList[LEXICON.l];\r\n\r\n                while (i--)\r\n                    if (nodeList[i] == elem)\r\n                        return true;\r\n\r\n                return false;\r\n            }\r\n\r\n            function insertAdjacentElement(el, strategy, child) {\r\n                if (COMPATIBILITY.isA(child)) {\r\n                    for (var i = 0; i < child[LEXICON.l]; i++)\r\n                        insertAdjacentElement(el, strategy, child[i]);\r\n                }\r\n                else if (_type(child) == TYPES.s)\r\n                    el.insertAdjacentHTML(strategy, child);\r\n                else\r\n                    el.insertAdjacentElement(strategy, child.nodeType ? child : child[0]);\r\n            }\r\n\r\n            function setCSSVal(el, prop, val) {\r\n                try {\r\n                    if (el[LEXICON.s][prop] !== undefined)\r\n                        el[LEXICON.s][prop] = parseCSSVal(prop, val);\r\n                } catch (e) { }\r\n            }\r\n\r\n            function parseCSSVal(prop, val) {\r\n                if (!_cssNumber[prop.toLowerCase()] && _type(val) == TYPES.n)\r\n                    val += 'px';\r\n                return val;\r\n            }\r\n\r\n            function startNextAnimationInQ(animObj, removeFromQ) {\r\n                var index;\r\n                var nextAnim;\r\n                if (removeFromQ !== false)\r\n                    animObj.q.splice(0, 1);\r\n                if (animObj.q[LEXICON.l] > 0) {\r\n                    nextAnim = animObj.q[0];\r\n                    animate(animObj.el, nextAnim.props, nextAnim.duration, nextAnim.easing, nextAnim.complete, true);\r\n                }\r\n                else {\r\n                    index = inArray(animObj, _animations);\r\n                    if (index > -1)\r\n                        _animations.splice(index, 1);\r\n                }\r\n            }\r\n\r\n            function setAnimationValue(el, prop, value) {\r\n                if (prop === _strScrollLeft || prop === _strScrollTop)\r\n                    el[prop] = value;\r\n                else\r\n                    setCSSVal(el, prop, value);\r\n            }\r\n\r\n            function animate(el, props, options, easing, complete, guaranteedNext) {\r\n                var hasOptions = isPlainObject(options);\r\n                var from = {};\r\n                var to = {};\r\n                var i = 0;\r\n                var key;\r\n                var animObj;\r\n                var start;\r\n                var progress;\r\n                var step;\r\n                var specialEasing;\r\n                var duration;\r\n                if (hasOptions) {\r\n                    easing = options.easing;\r\n                    start = options.start;\r\n                    progress = options.progress;\r\n                    step = options.step;\r\n                    specialEasing = options.specialEasing;\r\n                    complete = options.complete;\r\n                    duration = options.duration;\r\n                }\r\n                else\r\n                    duration = options;\r\n                specialEasing = specialEasing || {};\r\n                duration = duration || 400;\r\n                easing = easing || 'swing';\r\n                guaranteedNext = guaranteedNext || false;\r\n\r\n                for (; i < _animations[LEXICON.l]; i++) {\r\n                    if (_animations[i].el === el) {\r\n                        animObj = _animations[i];\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                if (!animObj) {\r\n                    animObj = {\r\n                        el: el,\r\n                        q: []\r\n                    };\r\n                    _animations.push(animObj);\r\n                }\r\n\r\n                for (key in props) {\r\n                    if (key === _strScrollLeft || key === _strScrollTop)\r\n                        from[key] = el[key];\r\n                    else\r\n                        from[key] = FakejQuery(el).css(key);\r\n                }\r\n\r\n                for (key in from) {\r\n                    if (from[key] !== props[key] && props[key] !== undefined)\r\n                        to[key] = props[key];\r\n                }\r\n\r\n                if (!isEmptyObject(to)) {\r\n                    var timeNow;\r\n                    var end;\r\n                    var percent;\r\n                    var fromVal;\r\n                    var toVal;\r\n                    var easedVal;\r\n                    var timeStart;\r\n                    var frame;\r\n                    var elapsed;\r\n                    var qPos = guaranteedNext ? 0 : inArray(qObj, animObj.q);\r\n                    var qObj = {\r\n                        props: to,\r\n                        duration: hasOptions ? options : duration,\r\n                        easing: easing,\r\n                        complete: complete\r\n                    };\r\n                    if (qPos === -1) {\r\n                        qPos = animObj.q[LEXICON.l];\r\n                        animObj.q.push(qObj);\r\n                    }\r\n\r\n                    if (qPos === 0) {\r\n                        if (duration > 0) {\r\n                            timeStart = COMPATIBILITY.now();\r\n                            frame = function () {\r\n                                timeNow = COMPATIBILITY.now();\r\n                                elapsed = (timeNow - timeStart);\r\n                                end = qObj.stop || elapsed >= duration;\r\n                                percent = 1 - ((MATH.max(0, timeStart + duration - timeNow) / duration) || 0);\r\n\r\n                                for (key in to) {\r\n                                    fromVal = parseFloat(from[key]);\r\n                                    toVal = parseFloat(to[key]);\r\n                                    easedVal = (toVal - fromVal) * EASING[specialEasing[key] || easing](percent, percent * duration, 0, 1, duration) + fromVal;\r\n                                    setAnimationValue(el, key, easedVal);\r\n                                    if (isFunction(step)) {\r\n                                        step(easedVal, {\r\n                                            elem: el,\r\n                                            prop: key,\r\n                                            start: fromVal,\r\n                                            now: easedVal,\r\n                                            end: toVal,\r\n                                            pos: percent,\r\n                                            options: {\r\n                                                easing: easing,\r\n                                                speacialEasing: specialEasing,\r\n                                                duration: duration,\r\n                                                complete: complete,\r\n                                                step: step\r\n                                            },\r\n                                            startTime: timeStart\r\n                                        });\r\n                                    }\r\n                                }\r\n\r\n                                if (isFunction(progress))\r\n                                    progress({}, percent, MATH.max(0, duration - elapsed));\r\n\r\n                                if (end) {\r\n                                    startNextAnimationInQ(animObj);\r\n                                    if (isFunction(complete))\r\n                                        complete();\r\n                                }\r\n                                else\r\n                                    qObj.frame = COMPATIBILITY.rAF()(frame);\r\n                            };\r\n                            qObj.frame = COMPATIBILITY.rAF()(frame);\r\n                        }\r\n                        else {\r\n                            for (key in to)\r\n                                setAnimationValue(el, key, to[key]);\r\n                            startNextAnimationInQ(animObj);\r\n                        }\r\n                    }\r\n                }\r\n                else if (guaranteedNext)\r\n                    startNextAnimationInQ(animObj);\r\n            }\r\n\r\n            function stop(el, clearQ, jumpToEnd) {\r\n                var animObj;\r\n                var qObj;\r\n                var key;\r\n                var i = 0;\r\n                for (; i < _animations[LEXICON.l]; i++) {\r\n                    animObj = _animations[i];\r\n                    if (animObj.el === el) {\r\n                        if (animObj.q[LEXICON.l] > 0) {\r\n                            qObj = animObj.q[0];\r\n                            qObj.stop = true;\r\n                            COMPATIBILITY.cAF()(qObj.frame);\r\n                            animObj.q.splice(0, 1);\r\n\r\n                            if (jumpToEnd)\r\n                                for (key in qObj.props)\r\n                                    setAnimationValue(el, key, qObj.props[key]);\r\n\r\n                            if (clearQ)\r\n                                animObj.q = [];\r\n                            else\r\n                                startNextAnimationInQ(animObj, false);\r\n                        }\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            function elementIsVisible(el) {\r\n                return !!(el[LEXICON.oW] || el[LEXICON.oH] || el.getClientRects()[LEXICON.l]);\r\n            }\r\n\r\n            function FakejQuery(selector) {\r\n                if (arguments[LEXICON.l] === 0)\r\n                    return this;\r\n\r\n                var base = new FakejQuery();\r\n                var elements = selector;\r\n                var i = 0;\r\n                var elms;\r\n                var el;\r\n\r\n                if (_type(selector) == TYPES.s) {\r\n                    elements = [];\r\n                    if (selector.charAt(0) === '<') {\r\n                        el = document.createElement('div');\r\n                        el.innerHTML = selector;\r\n                        elms = el.children;\r\n                    }\r\n                    else {\r\n                        elms = document.querySelectorAll(selector);\r\n                    }\r\n\r\n                    for (; i < elms[LEXICON.l]; i++)\r\n                        elements.push(elms[i]);\r\n                }\r\n\r\n                if (elements) {\r\n                    if (_type(elements) != TYPES.s && (!isArrayLike(elements) || elements === window || elements === elements.self))\r\n                        elements = [elements];\r\n\r\n                    for (i = 0; i < elements[LEXICON.l]; i++)\r\n                        base[i] = elements[i];\r\n\r\n                    base[LEXICON.l] = elements[LEXICON.l];\r\n                }\r\n\r\n                return base;\r\n            };\r\n\r\n            FakejQuery[LEXICON.p] = {\r\n\r\n                //EVENTS:\r\n\r\n                on: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n\r\n                    var eventNameLength = eventName[LEXICON.l];\r\n                    var i = 0;\r\n                    var el;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        try {\r\n                            if (el.addEventListener) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.addEventListener(eventName[i], handler);\r\n                            }\r\n                            else if (el.detachEvent) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.attachEvent('on' + eventName[i], handler);\r\n                            }\r\n                        } catch (e) { }\r\n                    });\r\n                },\r\n\r\n                off: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n\r\n                    var eventNameLength = eventName[LEXICON.l];\r\n                    var i = 0;\r\n                    var el;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        try {\r\n                            if (el.removeEventListener) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.removeEventListener(eventName[i], handler);\r\n                            }\r\n                            else if (el.detachEvent) {\r\n                                for (; i < eventNameLength; i++)\r\n                                    el.detachEvent('on' + eventName[i], handler);\r\n                            }\r\n                        } catch (e) { }\r\n                    });\r\n                },\r\n\r\n                one: function (eventName, handler) {\r\n                    eventName = (eventName || _strEmpty).match(_rnothtmlwhite) || [_strEmpty];\r\n                    return this.each(function () {\r\n                        var el = FakejQuery(this);\r\n                        FakejQuery.each(eventName, function (i, oneEventName) {\r\n                            var oneHandler = function (e) {\r\n                                handler.call(this, e);\r\n                                el.off(oneEventName, oneHandler);\r\n                            };\r\n                            el.on(oneEventName, oneHandler);\r\n                        });\r\n                    });\r\n                },\r\n\r\n                trigger: function (eventName) {\r\n                    var el;\r\n                    var event;\r\n                    return this.each(function () {\r\n                        el = this;\r\n                        if (document.createEvent) {\r\n                            event = document.createEvent('HTMLEvents');\r\n                            event.initEvent(eventName, true, false);\r\n                            el.dispatchEvent(event);\r\n                        }\r\n                        else {\r\n                            el.fireEvent('on' + eventName);\r\n                        }\r\n                    });\r\n                },\r\n\r\n                //DOM NODE INSERTING / REMOVING:\r\n\r\n                append: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'beforeend', child); });\r\n                },\r\n\r\n                prepend: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'afterbegin', child); });\r\n                },\r\n\r\n                before: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'beforebegin', child); });\r\n                },\r\n\r\n                after: function (child) {\r\n                    return this.each(function () { insertAdjacentElement(this, 'afterend', child); });\r\n                },\r\n\r\n                remove: function () {\r\n                    return this.each(function () {\r\n                        var el = this;\r\n                        var parentNode = el.parentNode;\r\n                        if (parentNode != null)\r\n                            parentNode.removeChild(el);\r\n                    });\r\n                },\r\n\r\n                unwrap: function () {\r\n                    var parents = [];\r\n                    var i;\r\n                    var el;\r\n                    var parent;\r\n\r\n                    this.each(function () {\r\n                        parent = this.parentNode;\r\n                        if (inArray(parent, parents) === - 1)\r\n                            parents.push(parent);\r\n                    });\r\n\r\n                    for (i = 0; i < parents[LEXICON.l]; i++) {\r\n                        el = parents[i];\r\n                        parent = el.parentNode;\r\n                        while (el.firstChild)\r\n                            parent.insertBefore(el.firstChild, el);\r\n                        parent.removeChild(el);\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                wrapAll: function (wrapperHTML) {\r\n                    var i;\r\n                    var nodes = this;\r\n                    var wrapper = FakejQuery(wrapperHTML)[0];\r\n                    var deepest = wrapper;\r\n                    var parent = nodes[0].parentNode;\r\n                    var previousSibling = nodes[0].previousSibling;\r\n                    while (deepest.childNodes[LEXICON.l] > 0)\r\n                        deepest = deepest.childNodes[0];\r\n\r\n                    for (i = 0; nodes[LEXICON.l] - i; deepest.firstChild === nodes[0] && i++)\r\n                        deepest.appendChild(nodes[i]);\r\n\r\n                    var nextSibling = previousSibling ? previousSibling.nextSibling : parent.firstChild;\r\n                    parent.insertBefore(wrapper, nextSibling);\r\n\r\n                    return this;\r\n                },\r\n\r\n                wrapInner: function (wrapperHTML) {\r\n                    return this.each(function () {\r\n                        var el = FakejQuery(this);\r\n                        var contents = el.contents();\r\n\r\n                        if (contents[LEXICON.l])\r\n                            contents.wrapAll(wrapperHTML);\r\n                        else\r\n                            el.append(wrapperHTML);\r\n                    });\r\n                },\r\n\r\n                wrap: function (wrapperHTML) {\r\n                    return this.each(function () { FakejQuery(this).wrapAll(wrapperHTML); });\r\n                },\r\n\r\n\r\n                //DOM NODE MANIPULATION / INFORMATION:\r\n\r\n                css: function (styles, val) {\r\n                    var el;\r\n                    var key;\r\n                    var cptStyle;\r\n                    var getCptStyle = window.getComputedStyle;\r\n                    if (_type(styles) == TYPES.s) {\r\n                        if (val === undefined) {\r\n                            el = this[0];\r\n                            cptStyle = getCptStyle ? getCptStyle(el, null) : el.currentStyle[styles];\r\n\r\n                            //https://bugzilla.mozilla.org/show_bug.cgi?id=548397 can be null sometimes if iframe with display: none (firefox only!)\r\n                            return getCptStyle ? cptStyle != null ? cptStyle.getPropertyValue(styles) : el[LEXICON.s][styles] : cptStyle;\r\n                        }\r\n                        else {\r\n                            return this.each(function () {\r\n                                setCSSVal(this, styles, val);\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        return this.each(function () {\r\n                            for (key in styles)\r\n                                setCSSVal(this, key, styles[key]);\r\n                        });\r\n                    }\r\n                },\r\n\r\n                hasClass: function (className) {\r\n                    var elem, i = 0;\r\n                    var classNamePrepared = _strSpace + className + _strSpace;\r\n                    var classList;\r\n\r\n                    while ((elem = this[i++])) {\r\n                        classList = elem.classList;\r\n                        if (classList && classList.contains(className))\r\n                            return true;\r\n                        else if (elem.nodeType === 1 && (_strSpace + stripAndCollapse(elem.className + _strEmpty) + _strSpace).indexOf(classNamePrepared) > -1)\r\n                            return true;\r\n                    }\r\n\r\n                    return false;\r\n                },\r\n\r\n                addClass: function (className) {\r\n                    var classes;\r\n                    var elem;\r\n                    var cur;\r\n                    var curValue;\r\n                    var clazz;\r\n                    var finalValue;\r\n                    var supportClassList;\r\n                    var elmClassList;\r\n                    var i = 0;\r\n                    var v = 0;\r\n\r\n                    if (className) {\r\n                        classes = className.match(_rnothtmlwhite) || [];\r\n\r\n                        while ((elem = this[i++])) {\r\n                            elmClassList = elem.classList;\r\n                            if (supportClassList === undefined)\r\n                                supportClassList = elmClassList !== undefined;\r\n\r\n                            if (supportClassList) {\r\n                                while ((clazz = classes[v++]))\r\n                                    elmClassList.add(clazz);\r\n                            }\r\n                            else {\r\n                                curValue = elem.className + _strEmpty;\r\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\r\n\r\n                                if (cur) {\r\n                                    while ((clazz = classes[v++]))\r\n                                        if (cur.indexOf(_strSpace + clazz + _strSpace) < 0)\r\n                                            cur += clazz + _strSpace;\r\n\r\n                                    finalValue = stripAndCollapse(cur);\r\n                                    if (curValue !== finalValue)\r\n                                        elem.className = finalValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                removeClass: function (className) {\r\n                    var classes;\r\n                    var elem;\r\n                    var cur;\r\n                    var curValue;\r\n                    var clazz;\r\n                    var finalValue;\r\n                    var supportClassList;\r\n                    var elmClassList;\r\n                    var i = 0;\r\n                    var v = 0;\r\n\r\n                    if (className) {\r\n                        classes = className.match(_rnothtmlwhite) || [];\r\n\r\n                        while ((elem = this[i++])) {\r\n                            elmClassList = elem.classList;\r\n                            if (supportClassList === undefined)\r\n                                supportClassList = elmClassList !== undefined;\r\n\r\n                            if (supportClassList) {\r\n                                while ((clazz = classes[v++]))\r\n                                    elmClassList.remove(clazz);\r\n                            }\r\n                            else {\r\n                                curValue = elem.className + _strEmpty;\r\n                                cur = elem.nodeType === 1 && (_strSpace + stripAndCollapse(curValue) + _strSpace);\r\n\r\n                                if (cur) {\r\n                                    while ((clazz = classes[v++]))\r\n                                        while (cur.indexOf(_strSpace + clazz + _strSpace) > -1)\r\n                                            cur = cur.replace(_strSpace + clazz + _strSpace, _strSpace);\r\n\r\n                                    finalValue = stripAndCollapse(cur);\r\n                                    if (curValue !== finalValue)\r\n                                        elem.className = finalValue;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    return this;\r\n                },\r\n\r\n                hide: function () {\r\n                    return this.each(function () { this[LEXICON.s].display = 'none'; });\r\n                },\r\n\r\n                show: function () {\r\n                    return this.each(function () { this[LEXICON.s].display = 'block'; });\r\n                },\r\n\r\n                attr: function (attrName, value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el.getAttribute(attrName);\r\n                        el.setAttribute(attrName, value);\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                removeAttr: function (attrName) {\r\n                    return this.each(function () { this.removeAttribute(attrName); });\r\n                },\r\n\r\n                offset: function () {\r\n                    var el = this[0];\r\n                    var rect = el[LEXICON.bCR]();\r\n                    var scrollLeft = window.pageXOffset || document.documentElement[_strScrollLeft];\r\n                    var scrollTop = window.pageYOffset || document.documentElement[_strScrollTop];\r\n                    return {\r\n                        top: rect.top + scrollTop,\r\n                        left: rect.left + scrollLeft\r\n                    };\r\n                },\r\n\r\n                position: function () {\r\n                    var el = this[0];\r\n                    return {\r\n                        top: el.offsetTop,\r\n                        left: el.offsetLeft\r\n                    };\r\n                },\r\n\r\n                scrollLeft: function (value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el[_strScrollLeft];\r\n                        el[_strScrollLeft] = value;\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                scrollTop: function (value) {\r\n                    var i = 0;\r\n                    var el;\r\n                    while (el = this[i++]) {\r\n                        if (value === undefined)\r\n                            return el[_strScrollTop];\r\n                        el[_strScrollTop] = value;\r\n                    }\r\n                    return this;\r\n                },\r\n\r\n                val: function (value) {\r\n                    var el = this[0];\r\n                    if (!value)\r\n                        return el.value;\r\n                    el.value = value;\r\n                    return this;\r\n                },\r\n\r\n\r\n                //DOM TRAVERSAL / FILTERING:\r\n\r\n                first: function () {\r\n                    return this.eq(0);\r\n                },\r\n\r\n                last: function () {\r\n                    return this.eq(-1);\r\n                },\r\n\r\n                eq: function (index) {\r\n                    return FakejQuery(this[index >= 0 ? index : this[LEXICON.l] + index]);\r\n                },\r\n\r\n                find: function (selector) {\r\n                    var children = [];\r\n                    var i;\r\n                    this.each(function () {\r\n                        var el = this;\r\n                        var ch = el.querySelectorAll(selector);\r\n                        for (i = 0; i < ch[LEXICON.l]; i++)\r\n                            children.push(ch[i]);\r\n                    });\r\n                    return FakejQuery(children);\r\n                },\r\n\r\n                children: function (selector) {\r\n                    var children = [];\r\n                    var el;\r\n                    var ch;\r\n                    var i;\r\n\r\n                    this.each(function () {\r\n                        ch = this.children;\r\n                        for (i = 0; i < ch[LEXICON.l]; i++) {\r\n                            el = ch[i];\r\n                            if (selector) {\r\n                                if ((el.matches && el.matches(selector)) || matches(el, selector))\r\n                                    children.push(el);\r\n                            }\r\n                            else\r\n                                children.push(el);\r\n                        }\r\n                    });\r\n                    return FakejQuery(children);\r\n                },\r\n\r\n                parent: function (selector) {\r\n                    var parents = [];\r\n                    var parent;\r\n                    this.each(function () {\r\n                        parent = this.parentNode;\r\n                        if (selector ? FakejQuery(parent).is(selector) : true)\r\n                            parents.push(parent);\r\n                    });\r\n                    return FakejQuery(parents);\r\n                },\r\n\r\n                is: function (selector) {\r\n\r\n                    var el;\r\n                    var i;\r\n                    for (i = 0; i < this[LEXICON.l]; i++) {\r\n                        el = this[i];\r\n                        if (selector === ':visible')\r\n                            return elementIsVisible(el);\r\n                        if (selector === ':hidden')\r\n                            return !elementIsVisible(el);\r\n                        if ((el.matches && el.matches(selector)) || matches(el, selector))\r\n                            return true;\r\n                    }\r\n                    return false;\r\n                },\r\n\r\n                contents: function () {\r\n                    var contents = [];\r\n                    var childs;\r\n                    var i;\r\n\r\n                    this.each(function () {\r\n                        childs = this.childNodes;\r\n                        for (i = 0; i < childs[LEXICON.l]; i++)\r\n                            contents.push(childs[i]);\r\n                    });\r\n\r\n                    return FakejQuery(contents);\r\n                },\r\n\r\n                each: function (callback) {\r\n                    return each(this, callback);\r\n                },\r\n\r\n\r\n                //ANIMATION:\r\n\r\n                animate: function (props, duration, easing, complete) {\r\n                    return this.each(function () { animate(this, props, duration, easing, complete); });\r\n                },\r\n\r\n                stop: function (clearQ, jump) {\r\n                    return this.each(function () { stop(this, clearQ, jump); });\r\n                }\r\n            };\r\n\r\n            extend(FakejQuery, {\r\n                extend: extend,\r\n                inArray: inArray,\r\n                isEmptyObject: isEmptyObject,\r\n                isPlainObject: isPlainObject,\r\n                each: each\r\n            });\r\n\r\n            return FakejQuery;\r\n        })();\r\n        var INSTANCES = (function () {\r\n            var _targets = [];\r\n            var _instancePropertyString = '__overlayScrollbars__';\r\n\r\n            /**\r\n             * Register, unregister or get a certain (or all) instances.\r\n             * Register: Pass the target and the instance.\r\n             * Unregister: Pass the target and null.\r\n             * Get Instance: Pass the target from which the instance shall be got.\r\n             * Get Targets: Pass no arguments.\r\n             * @param target The target to which the instance shall be registered / from which the instance shall be unregistered / the instance shall be got\r\n             * @param instance The instance.\r\n             * @returns {*|void} Returns the instance from the given target.\r\n             */\r\n            return function (target, instance) {\r\n                var argLen = arguments[LEXICON.l];\r\n                if (argLen < 1) {\r\n                    //return all targets\r\n                    return _targets;\r\n                }\r\n                else {\r\n                    if (instance) {\r\n                        //register instance\r\n                        target[_instancePropertyString] = instance;\r\n                        _targets.push(target);\r\n                    }\r\n                    else {\r\n                        var index = COMPATIBILITY.inA(target, _targets);\r\n                        if (index > -1) {\r\n                            if (argLen > 1) {\r\n                                //unregister instance\r\n                                delete target[_instancePropertyString];\r\n                                _targets.splice(index, 1);\r\n                            }\r\n                            else {\r\n                                //get instance from target\r\n                                return _targets[index][_instancePropertyString];\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        })();\r\n        var PLUGIN = (function () {\r\n            var _plugin;\r\n            var _pluginsGlobals;\r\n            var _pluginsAutoUpdateLoop;\r\n            var _pluginsExtensions = [];\r\n            var _pluginsOptions = (function () {\r\n                var type = COMPATIBILITY.type;\r\n                var possibleTemplateTypes = [\r\n                    TYPES.b, //boolean\r\n                    TYPES.n, //number\r\n                    TYPES.s, //string\r\n                    TYPES.a, //array\r\n                    TYPES.o, //object\r\n                    TYPES.f, //function\r\n                    TYPES.z  //null\r\n                ];\r\n                var restrictedStringsSplit = ' ';\r\n                var restrictedStringsPossibilitiesSplit = ':';\r\n                var classNameAllowedValues = [TYPES.z, TYPES.s];\r\n                var numberAllowedValues = TYPES.n;\r\n                var booleanNullAllowedValues = [TYPES.z, TYPES.b];\r\n                var booleanTrueTemplate = [true, TYPES.b];\r\n                var booleanFalseTemplate = [false, TYPES.b];\r\n                var callbackTemplate = [null, [TYPES.z, TYPES.f]];\r\n                var updateOnLoadTemplate = [['img'], [TYPES.s, TYPES.a, TYPES.z]];\r\n                var inheritedAttrsTemplate = [['style', 'class'], [TYPES.s, TYPES.a, TYPES.z]];\r\n                var resizeAllowedValues = 'n:none b:both h:horizontal v:vertical';\r\n                var overflowBehaviorAllowedValues = 'v-h:visible-hidden v-s:visible-scroll s:scroll h:hidden';\r\n                var scrollbarsVisibilityAllowedValues = 'v:visible h:hidden a:auto';\r\n                var scrollbarsAutoHideAllowedValues = 'n:never s:scroll l:leave m:move';\r\n                var optionsDefaultsAndTemplate = {\r\n                    className: ['os-theme-dark', classNameAllowedValues],                //null || string\r\n                    resize: ['none', resizeAllowedValues],                               //none || both  || horizontal || vertical || n || b || h || v\r\n                    sizeAutoCapable: booleanTrueTemplate,                                //true || false\r\n                    clipAlways: booleanTrueTemplate,                                     //true || false\r\n                    normalizeRTL: booleanTrueTemplate,                                   //true || false\r\n                    paddingAbsolute: booleanFalseTemplate,                               //true || false\r\n                    autoUpdate: [null, booleanNullAllowedValues],                        //true || false || null\r\n                    autoUpdateInterval: [33, numberAllowedValues],                       //number\r\n                    updateOnLoad: updateOnLoadTemplate,                                  //string || array || null\r\n                    nativeScrollbarsOverlaid: {\r\n                        showNativeScrollbars: booleanFalseTemplate,                      //true || false\r\n                        initialize: booleanTrueTemplate                                  //true || false\r\n                    },\r\n                    overflowBehavior: {\r\n                        x: ['scroll', overflowBehaviorAllowedValues],                    //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n                        y: ['scroll', overflowBehaviorAllowedValues]                     //visible-hidden  || visible-scroll || hidden || scroll || v-h || v-s || h || s\r\n                    },\r\n                    scrollbars: {\r\n                        visibility: ['auto', scrollbarsVisibilityAllowedValues],         //visible || hidden || auto || v || h || a\r\n                        autoHide: ['never', scrollbarsAutoHideAllowedValues],            //never || scroll || leave || move || n || s || l || m\r\n                        autoHideDelay: [800, numberAllowedValues],                       //number\r\n                        dragScrolling: booleanTrueTemplate,                              //true || false\r\n                        clickScrolling: booleanFalseTemplate,                            //true || false\r\n                        touchSupport: booleanTrueTemplate,                               //true || false\r\n                        snapHandle: booleanFalseTemplate                                 //true || false\r\n                    },\r\n                    textarea: {\r\n                        dynWidth: booleanFalseTemplate,                                  //true || false\r\n                        dynHeight: booleanFalseTemplate,                                 //true || false\r\n                        inheritedAttrs: inheritedAttrsTemplate                           //string || array || null\r\n                    },\r\n                    callbacks: {\r\n                        onInitialized: callbackTemplate,                                 //null || function\r\n                        onInitializationWithdrawn: callbackTemplate,                     //null || function\r\n                        onDestroyed: callbackTemplate,                                   //null || function\r\n                        onScrollStart: callbackTemplate,                                 //null || function\r\n                        onScroll: callbackTemplate,                                      //null || function\r\n                        onScrollStop: callbackTemplate,                                  //null || function\r\n                        onOverflowChanged: callbackTemplate,                             //null || function\r\n                        onOverflowAmountChanged: callbackTemplate,                       //null || function\r\n                        onDirectionChanged: callbackTemplate,                            //null || function\r\n                        onContentSizeChanged: callbackTemplate,                          //null || function\r\n                        onHostSizeChanged: callbackTemplate,                             //null || function\r\n                        onUpdated: callbackTemplate                                      //null || function\r\n                    }\r\n                };\r\n                var convert = function (template) {\r\n                    var recursive = function (obj) {\r\n                        var key;\r\n                        var val;\r\n                        var valType;\r\n                        for (key in obj) {\r\n                            if (!obj[LEXICON.hOP](key))\r\n                                continue;\r\n                            val = obj[key];\r\n                            valType = type(val);\r\n                            if (valType == TYPES.a)\r\n                                obj[key] = val[template ? 1 : 0];\r\n                            else if (valType == TYPES.o)\r\n                                obj[key] = recursive(val);\r\n                        }\r\n                        return obj;\r\n                    };\r\n                    return recursive(FRAMEWORK.extend(true, {}, optionsDefaultsAndTemplate));\r\n                };\r\n\r\n                return {\r\n                    _defaults: convert(),\r\n\r\n                    _template: convert(true),\r\n\r\n                    /**\r\n                     * Validates the passed object by the passed template.\r\n                     * @param obj The object which shall be validated.\r\n                     * @param template The template which defines the allowed values and types.\r\n                     * @param writeErrors True if errors shall be logged to the console.\r\n                     * @param diffObj If a object is passed then only valid differences to this object will be returned.\r\n                     * @returns {{}} A object which contains two objects called \"default\" and \"prepared\" which contains only the valid properties of the passed original object and discards not different values compared to the passed diffObj.\r\n                     */\r\n                    _validate: function (obj, template, writeErrors, diffObj) {\r\n                        var validatedOptions = {};\r\n                        var validatedOptionsPrepared = {};\r\n                        var objectCopy = FRAMEWORK.extend(true, {}, obj);\r\n                        var inArray = FRAMEWORK.inArray;\r\n                        var isEmptyObj = FRAMEWORK.isEmptyObject;\r\n                        var checkObjectProps = function (data, template, diffData, validatedOptions, validatedOptionsPrepared, prevPropName) {\r\n                            for (var prop in template) {\r\n                                if (template[LEXICON.hOP](prop) && data[LEXICON.hOP](prop)) {\r\n                                    var isValid = false;\r\n                                    var isDiff = false;\r\n                                    var templateValue = template[prop];\r\n                                    var templateValueType = type(templateValue);\r\n                                    var templateIsComplex = templateValueType == TYPES.o;\r\n                                    var templateTypes = !COMPATIBILITY.isA(templateValue) ? [templateValue] : templateValue;\r\n                                    var dataDiffValue = diffData[prop];\r\n                                    var dataValue = data[prop];\r\n                                    var dataValueType = type(dataValue);\r\n                                    var propPrefix = prevPropName ? prevPropName + '.' : '';\r\n                                    var error = \"The option \\\"\" + propPrefix + prop + \"\\\" wasn't set, because\";\r\n                                    var errorPossibleTypes = [];\r\n                                    var errorRestrictedStrings = [];\r\n                                    var restrictedStringValuesSplit;\r\n                                    var restrictedStringValuesPossibilitiesSplit;\r\n                                    var isRestrictedValue;\r\n                                    var mainPossibility;\r\n                                    var currType;\r\n                                    var i;\r\n                                    var v;\r\n                                    var j;\r\n\r\n                                    dataDiffValue = dataDiffValue === undefined ? {} : dataDiffValue;\r\n\r\n                                    //if the template has a object as value, it means that the options are complex (verschachtelt)\r\n                                    if (templateIsComplex && dataValueType == TYPES.o) {\r\n                                        validatedOptions[prop] = {};\r\n                                        validatedOptionsPrepared[prop] = {};\r\n                                        checkObjectProps(dataValue, templateValue, dataDiffValue, validatedOptions[prop], validatedOptionsPrepared[prop], propPrefix + prop);\r\n                                        FRAMEWORK.each([data, validatedOptions, validatedOptionsPrepared], function (index, value) {\r\n                                            if (isEmptyObj(value[prop])) {\r\n                                                delete value[prop];\r\n                                            }\r\n                                        });\r\n                                    }\r\n                                    else if (!templateIsComplex) {\r\n                                        for (i = 0; i < templateTypes[LEXICON.l]; i++) {\r\n                                            currType = templateTypes[i];\r\n                                            templateValueType = type(currType);\r\n                                            //if currtype is string and starts with restrictedStringPrefix and end with restrictedStringSuffix\r\n                                            isRestrictedValue = templateValueType == TYPES.s && inArray(currType, possibleTemplateTypes) === -1;\r\n                                            if (isRestrictedValue) {\r\n                                                errorPossibleTypes.push(TYPES.s);\r\n\r\n                                                //split it into a array which contains all possible values for example: [\"y:yes\", \"n:no\", \"m:maybe\"]\r\n                                                restrictedStringValuesSplit = currType.split(restrictedStringsSplit);\r\n                                                errorRestrictedStrings = errorRestrictedStrings.concat(restrictedStringValuesSplit);\r\n                                                for (v = 0; v < restrictedStringValuesSplit[LEXICON.l]; v++) {\r\n                                                    //split the possible values into their possibiliteis for example: [\"y\", \"yes\"] -> the first is always the mainPossibility\r\n                                                    restrictedStringValuesPossibilitiesSplit = restrictedStringValuesSplit[v].split(restrictedStringsPossibilitiesSplit);\r\n                                                    mainPossibility = restrictedStringValuesPossibilitiesSplit[0];\r\n                                                    for (j = 0; j < restrictedStringValuesPossibilitiesSplit[LEXICON.l]; j++) {\r\n                                                        //if any possibility matches with the dataValue, its valid\r\n                                                        if (dataValue === restrictedStringValuesPossibilitiesSplit[j]) {\r\n                                                            isValid = true;\r\n                                                            break;\r\n                                                        }\r\n                                                    }\r\n                                                    if (isValid)\r\n                                                        break;\r\n                                                }\r\n                                            }\r\n                                            else {\r\n                                                errorPossibleTypes.push(currType);\r\n\r\n                                                if (dataValueType === currType) {\r\n                                                    isValid = true;\r\n                                                    break;\r\n                                                }\r\n                                            }\r\n                                        }\r\n\r\n                                        if (isValid) {\r\n                                            isDiff = dataValue !== dataDiffValue;\r\n\r\n                                            if (isDiff)\r\n                                                validatedOptions[prop] = dataValue;\r\n\r\n                                            if (isRestrictedValue ? inArray(dataDiffValue, restrictedStringValuesPossibilitiesSplit) < 0 : isDiff)\r\n                                                validatedOptionsPrepared[prop] = isRestrictedValue ? mainPossibility : dataValue;\r\n                                        }\r\n                                        else if (writeErrors) {\r\n                                            console.warn(error + \" it doesn't accept the type [ \" + dataValueType.toUpperCase() + \" ] with the value of \\\"\" + dataValue + \"\\\".\\r\\n\" +\r\n                                                \"Accepted types are: [ \" + errorPossibleTypes.join(', ').toUpperCase() + \" ].\" +\r\n                                                (errorRestrictedStrings[length] > 0 ? \"\\r\\nValid strings are: [ \" + errorRestrictedStrings.join(', ').split(restrictedStringsPossibilitiesSplit).join(', ') + \" ].\" : ''));\r\n                                        }\r\n                                        delete data[prop];\r\n                                    }\r\n                                }\r\n                            }\r\n                        };\r\n                        checkObjectProps(objectCopy, template, diffObj || {}, validatedOptions, validatedOptionsPrepared);\r\n\r\n                        //add values which aren't specified in the template to the finished validated object to prevent them from being discarded\r\n                        /*\r\n                        if(keepForeignProps) {\r\n                            FRAMEWORK.extend(true, validatedOptions, objectCopy);\r\n                            FRAMEWORK.extend(true, validatedOptionsPrepared, objectCopy);\r\n                        }\r\n                        */\r\n\r\n                        if (!isEmptyObj(objectCopy) && writeErrors)\r\n                            console.warn('The following options are discarded due to invalidity:\\r\\n' + window.JSON.stringify(objectCopy, null, 2));\r\n\r\n                        return {\r\n                            _default: validatedOptions,\r\n                            _prepared: validatedOptionsPrepared\r\n                        };\r\n                    }\r\n                }\r\n            }());\r\n\r\n            /**\r\n             * Initializes the object which contains global information about the plugin and each instance of it.\r\n             */\r\n            function initOverlayScrollbarsStatics() {\r\n                if (!_pluginsGlobals)\r\n                    _pluginsGlobals = new OverlayScrollbarsGlobals(_pluginsOptions._defaults);\r\n                if (!_pluginsAutoUpdateLoop)\r\n                    _pluginsAutoUpdateLoop = new OverlayScrollbarsAutoUpdateLoop(_pluginsGlobals);\r\n            }\r\n\r\n            /**\r\n             * The global object for the OverlayScrollbars objects. It contains resources which every OverlayScrollbars object needs. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n             * @param defaultOptions\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsGlobals(defaultOptions) {\r\n                var _base = this;\r\n                var strOverflow = 'overflow';\r\n                var strHidden = 'hidden';\r\n                var strScroll = 'scroll';\r\n                var bodyElement = FRAMEWORK('body');\r\n                var scrollbarDummyElement = FRAMEWORK('<div id=\"os-dummy-scrollbar-size\"><div></div></div>');\r\n                var scrollbarDummyElement0 = scrollbarDummyElement[0];\r\n                var dummyContainerChild = FRAMEWORK(scrollbarDummyElement.children('div').eq(0));\r\n\r\n                bodyElement.append(scrollbarDummyElement);\r\n                scrollbarDummyElement.hide().show(); //fix IE8 bug (incorrect measuring)\r\n\r\n                var nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement0);\r\n                var nativeScrollbarIsOverlaid = {\r\n                    x: nativeScrollbarSize.x === 0,\r\n                    y: nativeScrollbarSize.y === 0\r\n                };\r\n                var msie = (function () {\r\n                    var ua = window.navigator.userAgent;\r\n                    var strIndexOf = 'indexOf';\r\n                    var strSubString = 'substring';\r\n                    var msie = ua[strIndexOf]('MSIE ');\r\n                    var trident = ua[strIndexOf]('Trident/');\r\n                    var edge = ua[strIndexOf]('Edge/');\r\n                    var rv = ua[strIndexOf]('rv:');\r\n                    var result;\r\n                    var parseIntFunc = parseInt;\r\n\r\n                    // IE 10 or older => return version number\r\n                    if (msie > 0)\r\n                        result = parseIntFunc(ua[strSubString](msie + 5, ua[strIndexOf]('.', msie)), 10);\r\n\r\n                    // IE 11 => return version number\r\n                    else if (trident > 0)\r\n                        result = parseIntFunc(ua[strSubString](rv + 3, ua[strIndexOf]('.', rv)), 10);\r\n\r\n                    // Edge (IE 12+) => return version number\r\n                    else if (edge > 0)\r\n                        result = parseIntFunc(ua[strSubString](edge + 5, ua[strIndexOf]('.', edge)), 10);\r\n\r\n                    // other browser\r\n                    return result;\r\n                })();\r\n\r\n                FRAMEWORK.extend(_base, {\r\n                    defaultOptions: defaultOptions,\r\n                    msie: msie,\r\n                    autoUpdateLoop: false,\r\n                    autoUpdateRecommended: !COMPATIBILITY.mO(),\r\n                    nativeScrollbarSize: nativeScrollbarSize,\r\n                    nativeScrollbarIsOverlaid: nativeScrollbarIsOverlaid,\r\n                    nativeScrollbarStyling: (function () {\r\n                        var result = false;\r\n                        scrollbarDummyElement.addClass('os-viewport-native-scrollbars-invisible');\r\n                        try {\r\n                            result = (scrollbarDummyElement.css('scrollbar-width') === 'none' && (msie > 9 || !msie)) || window.getComputedStyle(scrollbarDummyElement0, '::-webkit-scrollbar').getPropertyValue('display') === 'none';\r\n                        } catch (ex) { }\r\n\r\n                        //fix opera bug: scrollbar styles will only appear if overflow value is scroll or auto during the activation of the style.\r\n                        //and set overflow to scroll\r\n                        //scrollbarDummyElement.css(strOverflow, strHidden).hide().css(strOverflow, strScroll).show();\r\n                        //return (scrollbarDummyElement0[LEXICON.oH] - scrollbarDummyElement0[LEXICON.cH]) === 0 && (scrollbarDummyElement0[LEXICON.oW] - scrollbarDummyElement0[LEXICON.cW]) === 0;\r\n\r\n                        return result;\r\n                    })(),\r\n                    overlayScrollbarDummySize: { x: 30, y: 30 },\r\n                    cssCalc: VENDORS._cssPropertyValue('width', 'calc', '(1px)') || null,\r\n                    restrictedMeasuring: (function () {\r\n                        //https://bugzilla.mozilla.org/show_bug.cgi?id=1439305\r\n                        //since 1.11.0 always false -> fixed via CSS (hopefully)\r\n                        scrollbarDummyElement.css(strOverflow, strHidden);\r\n                        var scrollSize = {\r\n                            w: scrollbarDummyElement0[LEXICON.sW],\r\n                            h: scrollbarDummyElement0[LEXICON.sH]\r\n                        };\r\n                        scrollbarDummyElement.css(strOverflow, 'visible');\r\n                        var scrollSize2 = {\r\n                            w: scrollbarDummyElement0[LEXICON.sW],\r\n                            h: scrollbarDummyElement0[LEXICON.sH]\r\n                        };\r\n                        return (scrollSize.w - scrollSize2.w) !== 0 || (scrollSize.h - scrollSize2.h) !== 0;\r\n                    })(),\r\n                    rtlScrollBehavior: (function () {\r\n                        scrollbarDummyElement.css({ 'overflow-y': strHidden, 'overflow-x': strScroll, 'direction': 'rtl' }).scrollLeft(0);\r\n                        var dummyContainerOffset = scrollbarDummyElement.offset();\r\n                        var dummyContainerChildOffset = dummyContainerChild.offset();\r\n                        //https://github.com/KingSora/OverlayScrollbars/issues/187\r\n                        scrollbarDummyElement.scrollLeft(-999);\r\n                        var dummyContainerChildOffsetAfterScroll = dummyContainerChild.offset();\r\n                        return {\r\n                            //origin direction = determines if the zero scroll position is on the left or right side\r\n                            //'i' means 'invert' (i === true means that the axis must be inverted to be correct)\r\n                            //true = on the left side\r\n                            //false = on the right side\r\n                            i: dummyContainerOffset.left === dummyContainerChildOffset.left,\r\n                            //negative = determines if the maximum scroll is positive or negative\r\n                            //'n' means 'negate' (n === true means that the axis must be negated to be correct)\r\n                            //true = negative\r\n                            //false = positive\r\n                            n: dummyContainerChildOffset.left !== dummyContainerChildOffsetAfterScroll.left\r\n                        };\r\n                    })(),\r\n                    supportTransform: !!VENDORS._cssProperty('transform'),\r\n                    supportTransition: !!VENDORS._cssProperty('transition'),\r\n                    supportPassiveEvents: (function () {\r\n                        var supportsPassive = false;\r\n                        try {\r\n                            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n                                get: function () {\r\n                                    supportsPassive = true;\r\n                                }\r\n                            }));\r\n                        } catch (e) { }\r\n                        return supportsPassive;\r\n                    })(),\r\n                    supportResizeObserver: !!COMPATIBILITY.rO(),\r\n                    supportMutationObserver: !!COMPATIBILITY.mO()\r\n                });\r\n\r\n                scrollbarDummyElement.removeAttr(LEXICON.s).remove();\r\n\r\n                //Catch zoom event:\r\n                (function () {\r\n                    if (nativeScrollbarIsOverlaid.x && nativeScrollbarIsOverlaid.y)\r\n                        return;\r\n\r\n                    var abs = MATH.abs;\r\n                    var windowWidth = COMPATIBILITY.wW();\r\n                    var windowHeight = COMPATIBILITY.wH();\r\n                    var windowDpr = getWindowDPR();\r\n                    var onResize = function () {\r\n                        if (INSTANCES().length > 0) {\r\n                            var newW = COMPATIBILITY.wW();\r\n                            var newH = COMPATIBILITY.wH();\r\n                            var deltaW = newW - windowWidth;\r\n                            var deltaH = newH - windowHeight;\r\n\r\n                            if (deltaW === 0 && deltaH === 0)\r\n                                return;\r\n\r\n                            var deltaWRatio = MATH.round(newW / (windowWidth / 100.0));\r\n                            var deltaHRatio = MATH.round(newH / (windowHeight / 100.0));\r\n                            var absDeltaW = abs(deltaW);\r\n                            var absDeltaH = abs(deltaH);\r\n                            var absDeltaWRatio = abs(deltaWRatio);\r\n                            var absDeltaHRatio = abs(deltaHRatio);\r\n                            var newDPR = getWindowDPR();\r\n\r\n                            var deltaIsBigger = absDeltaW > 2 && absDeltaH > 2;\r\n                            var difference = !differenceIsBiggerThanOne(absDeltaWRatio, absDeltaHRatio);\r\n                            var dprChanged = newDPR !== windowDpr && windowDpr > 0;\r\n                            var isZoom = deltaIsBigger && difference && dprChanged;\r\n                            var oldScrollbarSize = _base.nativeScrollbarSize;\r\n                            var newScrollbarSize;\r\n\r\n                            if (isZoom) {\r\n                                bodyElement.append(scrollbarDummyElement);\r\n                                newScrollbarSize = _base.nativeScrollbarSize = calcNativeScrollbarSize(scrollbarDummyElement[0]);\r\n                                scrollbarDummyElement.remove();\r\n                                if (oldScrollbarSize.x !== newScrollbarSize.x || oldScrollbarSize.y !== newScrollbarSize.y) {\r\n                                    FRAMEWORK.each(INSTANCES(), function () {\r\n                                        if (INSTANCES(this))\r\n                                            INSTANCES(this).update('zoom');\r\n                                    });\r\n                                }\r\n                            }\r\n\r\n                            windowWidth = newW;\r\n                            windowHeight = newH;\r\n                            windowDpr = newDPR;\r\n                        }\r\n                    };\r\n\r\n                    function differenceIsBiggerThanOne(valOne, valTwo) {\r\n                        var absValOne = abs(valOne);\r\n                        var absValTwo = abs(valTwo);\r\n                        return !(absValOne === absValTwo || absValOne + 1 === absValTwo || absValOne - 1 === absValTwo);\r\n                    }\r\n\r\n                    function getWindowDPR() {\r\n                        var dDPI = window.screen.deviceXDPI || 0;\r\n                        var sDPI = window.screen.logicalXDPI || 1;\r\n                        return window.devicePixelRatio || (dDPI / sDPI);\r\n                    }\r\n\r\n                    FRAMEWORK(window).on('resize', onResize);\r\n                })();\r\n\r\n                function calcNativeScrollbarSize(measureElement) {\r\n                    return {\r\n                        x: measureElement[LEXICON.oH] - measureElement[LEXICON.cH],\r\n                        y: measureElement[LEXICON.oW] - measureElement[LEXICON.cW]\r\n                    };\r\n                }\r\n            }\r\n\r\n            /**\r\n             * The object which manages the auto update loop for all OverlayScrollbars objects. This object is initialized only once: if the first OverlayScrollbars object gets initialized.\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsAutoUpdateLoop(globals) {\r\n                var _base = this;\r\n                var _inArray = FRAMEWORK.inArray;\r\n                var _getNow = COMPATIBILITY.now;\r\n                var _strAutoUpdate = 'autoUpdate';\r\n                var _strAutoUpdateInterval = _strAutoUpdate + 'Interval';\r\n                var _strLength = LEXICON.l;\r\n                var _loopingInstances = [];\r\n                var _loopingInstancesIntervalCache = [];\r\n                var _loopIsActive = false;\r\n                var _loopIntervalDefault = 33;\r\n                var _loopInterval = _loopIntervalDefault;\r\n                var _loopTimeOld = _getNow();\r\n                var _loopID;\r\n\r\n\r\n                /**\r\n                 * The auto update loop which will run every 50 milliseconds or less if the update interval of a instance is lower than 50 milliseconds.\r\n                 */\r\n                var loop = function () {\r\n                    if (_loopingInstances[_strLength] > 0 && _loopIsActive) {\r\n                        _loopID = COMPATIBILITY.rAF()(function () {\r\n                            loop();\r\n                        });\r\n                        var timeNew = _getNow();\r\n                        var timeDelta = timeNew - _loopTimeOld;\r\n                        var lowestInterval;\r\n                        var instance;\r\n                        var instanceOptions;\r\n                        var instanceAutoUpdateAllowed;\r\n                        var instanceAutoUpdateInterval;\r\n                        var now;\r\n\r\n                        if (timeDelta > _loopInterval) {\r\n                            _loopTimeOld = timeNew - (timeDelta % _loopInterval);\r\n                            lowestInterval = _loopIntervalDefault;\r\n                            for (var i = 0; i < _loopingInstances[_strLength]; i++) {\r\n                                instance = _loopingInstances[i];\r\n                                if (instance !== undefined) {\r\n                                    instanceOptions = instance.options();\r\n                                    instanceAutoUpdateAllowed = instanceOptions[_strAutoUpdate];\r\n                                    instanceAutoUpdateInterval = MATH.max(1, instanceOptions[_strAutoUpdateInterval]);\r\n                                    now = _getNow();\r\n\r\n                                    if ((instanceAutoUpdateAllowed === true || instanceAutoUpdateAllowed === null) && (now - _loopingInstancesIntervalCache[i]) > instanceAutoUpdateInterval) {\r\n                                        instance.update('auto');\r\n                                        _loopingInstancesIntervalCache[i] = new Date(now += instanceAutoUpdateInterval);\r\n                                    }\r\n\r\n                                    lowestInterval = MATH.max(1, MATH.min(lowestInterval, instanceAutoUpdateInterval));\r\n                                }\r\n                            }\r\n                            _loopInterval = lowestInterval;\r\n                        }\r\n                    } else {\r\n                        _loopInterval = _loopIntervalDefault;\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Add OverlayScrollbars instance to the auto update loop. Only successful if the instance isn't already added.\r\n                 * @param instance The instance which shall be updated in a loop automatically.\r\n                 */\r\n                _base.add = function (instance) {\r\n                    if (_inArray(instance, _loopingInstances) === -1) {\r\n                        _loopingInstances.push(instance);\r\n                        _loopingInstancesIntervalCache.push(_getNow());\r\n                        if (_loopingInstances[_strLength] > 0 && !_loopIsActive) {\r\n                            _loopIsActive = true;\r\n                            globals.autoUpdateLoop = _loopIsActive;\r\n                            loop();\r\n                        }\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Remove OverlayScrollbars instance from the auto update loop. Only successful if the instance was added before.\r\n                 * @param instance The instance which shall be updated in a loop automatically.\r\n                 */\r\n                _base.remove = function (instance) {\r\n                    var index = _inArray(instance, _loopingInstances);\r\n                    if (index > -1) {\r\n                        //remove from loopingInstances list\r\n                        _loopingInstancesIntervalCache.splice(index, 1);\r\n                        _loopingInstances.splice(index, 1);\r\n\r\n                        //correct update loop behavior\r\n                        if (_loopingInstances[_strLength] === 0 && _loopIsActive) {\r\n                            _loopIsActive = false;\r\n                            globals.autoUpdateLoop = _loopIsActive;\r\n                            if (_loopID !== undefined) {\r\n                                COMPATIBILITY.cAF()(_loopID);\r\n                                _loopID = -1;\r\n                            }\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            /**\r\n             * A object which manages the scrollbars visibility of the target element.\r\n             * @param pluginTargetElement The element from which the scrollbars shall be hidden.\r\n             * @param options The custom options.\r\n             * @param extensions The custom extensions.\r\n             * @param globals\r\n             * @param autoUpdateLoop\r\n             * @returns {*}\r\n             * @constructor\r\n             */\r\n            function OverlayScrollbarsInstance(pluginTargetElement, options, extensions, globals, autoUpdateLoop) {\r\n                //shortcuts\r\n                var type = COMPATIBILITY.type;\r\n                var inArray = FRAMEWORK.inArray;\r\n                var each = FRAMEWORK.each;\r\n\r\n                //make correct instanceof\r\n                var _base = new _plugin();\r\n                var _frameworkProto = FRAMEWORK[LEXICON.p];\r\n\r\n                //if passed element is no HTML element: skip and return\r\n                if (!isHTMLElement(pluginTargetElement))\r\n                    return;\r\n\r\n                //if passed element is already initialized: set passed options if there are any and return its instance\r\n                if (INSTANCES(pluginTargetElement)) {\r\n                    var inst = INSTANCES(pluginTargetElement);\r\n                    inst.options(options);\r\n                    return inst;\r\n                }\r\n\r\n                //globals:\r\n                var _nativeScrollbarIsOverlaid;\r\n                var _overlayScrollbarDummySize;\r\n                var _rtlScrollBehavior;\r\n                var _autoUpdateRecommended;\r\n                var _msieVersion;\r\n                var _nativeScrollbarStyling;\r\n                var _cssCalc;\r\n                var _nativeScrollbarSize;\r\n                var _supportTransition;\r\n                var _supportTransform;\r\n                var _supportPassiveEvents;\r\n                var _supportResizeObserver;\r\n                var _supportMutationObserver;\r\n                var _restrictedMeasuring;\r\n\r\n                //general readonly:\r\n                var _initialized;\r\n                var _destroyed;\r\n                var _isTextarea;\r\n                var _isBody;\r\n                var _documentMixed;\r\n                var _domExists;\r\n\r\n                //general:\r\n                var _isBorderBox;\r\n                var _sizeAutoObserverAdded;\r\n                var _paddingX;\r\n                var _paddingY;\r\n                var _borderX;\r\n                var _borderY;\r\n                var _marginX;\r\n                var _marginY;\r\n                var _isRTL;\r\n                var _sleeping;\r\n                var _contentBorderSize = {};\r\n                var _scrollHorizontalInfo = {};\r\n                var _scrollVerticalInfo = {};\r\n                var _viewportSize = {};\r\n                var _nativeScrollbarMinSize = {};\r\n\r\n                //naming:\t\r\n                var _strMinusHidden = '-hidden';\r\n                var _strMarginMinus = 'margin-';\r\n                var _strPaddingMinus = 'padding-';\r\n                var _strBorderMinus = 'border-';\r\n                var _strTop = 'top';\r\n                var _strRight = 'right';\r\n                var _strBottom = 'bottom';\r\n                var _strLeft = 'left';\r\n                var _strMinMinus = 'min-';\r\n                var _strMaxMinus = 'max-';\r\n                var _strWidth = 'width';\r\n                var _strHeight = 'height';\r\n                var _strFloat = 'float';\r\n                var _strEmpty = '';\r\n                var _strAuto = 'auto';\r\n                var _strSync = 'sync';\r\n                var _strScroll = 'scroll';\r\n                var _strHundredPercent = '100%';\r\n                var _strX = 'x';\r\n                var _strY = 'y';\r\n                var _strDot = '.';\r\n                var _strSpace = ' ';\r\n                var _strScrollbar = 'scrollbar';\r\n                var _strMinusHorizontal = '-horizontal';\r\n                var _strMinusVertical = '-vertical';\r\n                var _strScrollLeft = _strScroll + 'Left';\r\n                var _strScrollTop = _strScroll + 'Top';\r\n                var _strMouseTouchDownEvent = 'mousedown touchstart';\r\n                var _strMouseTouchUpEvent = 'mouseup touchend touchcancel';\r\n                var _strMouseTouchMoveEvent = 'mousemove touchmove';\r\n                var _strMouseEnter = 'mouseenter';\r\n                var _strMouseLeave = 'mouseleave';\r\n                var _strKeyDownEvent = 'keydown';\r\n                var _strKeyUpEvent = 'keyup';\r\n                var _strSelectStartEvent = 'selectstart';\r\n                var _strTransitionEndEvent = 'transitionend webkitTransitionEnd oTransitionEnd';\r\n                var _strResizeObserverProperty = '__overlayScrollbarsRO__';\r\n\r\n                //class names:\t\r\n                var _cassNamesPrefix = 'os-';\r\n                var _classNameHTMLElement = _cassNamesPrefix + 'html';\r\n                var _classNameHostElement = _cassNamesPrefix + 'host';\r\n                var _classNameHostElementForeign = _classNameHostElement + '-foreign';\r\n                var _classNameHostTextareaElement = _classNameHostElement + '-textarea';\r\n                var _classNameHostScrollbarHorizontalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusHorizontal + _strMinusHidden;\r\n                var _classNameHostScrollbarVerticalHidden = _classNameHostElement + '-' + _strScrollbar + _strMinusVertical + _strMinusHidden;\r\n                var _classNameHostTransition = _classNameHostElement + '-transition';\r\n                var _classNameHostRTL = _classNameHostElement + '-rtl';\r\n                var _classNameHostResizeDisabled = _classNameHostElement + '-resize-disabled';\r\n                var _classNameHostScrolling = _classNameHostElement + '-scrolling';\r\n                var _classNameHostOverflow = _classNameHostElement + '-overflow';\r\n                var _classNameHostOverflow = _classNameHostElement + '-overflow';\r\n                var _classNameHostOverflowX = _classNameHostOverflow + '-x';\r\n                var _classNameHostOverflowY = _classNameHostOverflow + '-y';\r\n                var _classNameTextareaElement = _cassNamesPrefix + 'textarea';\r\n                var _classNameTextareaCoverElement = _classNameTextareaElement + '-cover';\r\n                var _classNamePaddingElement = _cassNamesPrefix + 'padding';\r\n                var _classNameViewportElement = _cassNamesPrefix + 'viewport';\r\n                var _classNameViewportNativeScrollbarsInvisible = _classNameViewportElement + '-native-scrollbars-invisible';\r\n                var _classNameViewportNativeScrollbarsOverlaid = _classNameViewportElement + '-native-scrollbars-overlaid';\r\n                var _classNameContentElement = _cassNamesPrefix + 'content';\r\n                var _classNameContentArrangeElement = _cassNamesPrefix + 'content-arrange';\r\n                var _classNameContentGlueElement = _cassNamesPrefix + 'content-glue';\r\n                var _classNameSizeAutoObserverElement = _cassNamesPrefix + 'size-auto-observer';\r\n                var _classNameResizeObserverElement = _cassNamesPrefix + 'resize-observer';\r\n                var _classNameResizeObserverItemElement = _cassNamesPrefix + 'resize-observer-item';\r\n                var _classNameResizeObserverItemFinalElement = _classNameResizeObserverItemElement + '-final';\r\n                var _classNameTextInherit = _cassNamesPrefix + 'text-inherit';\r\n                var _classNameScrollbar = _cassNamesPrefix + _strScrollbar;\r\n                var _classNameScrollbarTrack = _classNameScrollbar + '-track';\r\n                var _classNameScrollbarTrackOff = _classNameScrollbarTrack + '-off';\r\n                var _classNameScrollbarHandle = _classNameScrollbar + '-handle';\r\n                var _classNameScrollbarHandleOff = _classNameScrollbarHandle + '-off';\r\n                var _classNameScrollbarUnusable = _classNameScrollbar + '-unusable';\r\n                var _classNameScrollbarAutoHidden = _classNameScrollbar + '-' + _strAuto + _strMinusHidden;\r\n                var _classNameScrollbarCorner = _classNameScrollbar + '-corner';\r\n                var _classNameScrollbarCornerResize = _classNameScrollbarCorner + '-resize';\r\n                var _classNameScrollbarCornerResizeB = _classNameScrollbarCornerResize + '-both';\r\n                var _classNameScrollbarCornerResizeH = _classNameScrollbarCornerResize + _strMinusHorizontal;\r\n                var _classNameScrollbarCornerResizeV = _classNameScrollbarCornerResize + _strMinusVertical;\r\n                var _classNameScrollbarHorizontal = _classNameScrollbar + _strMinusHorizontal;\r\n                var _classNameScrollbarVertical = _classNameScrollbar + _strMinusVertical;\r\n                var _classNameDragging = _cassNamesPrefix + 'dragging';\r\n                var _classNameThemeNone = _cassNamesPrefix + 'theme-none';\r\n                var _classNamesDynamicDestroy = [\r\n                    _classNameViewportNativeScrollbarsInvisible,\r\n                    _classNameViewportNativeScrollbarsOverlaid,\r\n                    _classNameScrollbarTrackOff,\r\n                    _classNameScrollbarHandleOff,\r\n                    _classNameScrollbarUnusable,\r\n                    _classNameScrollbarAutoHidden,\r\n                    _classNameScrollbarCornerResize,\r\n                    _classNameScrollbarCornerResizeB,\r\n                    _classNameScrollbarCornerResizeH,\r\n                    _classNameScrollbarCornerResizeV,\r\n                    _classNameDragging].join(_strSpace);\r\n\r\n                //callbacks:\t\r\n                var _callbacksInitQeueue = [];\r\n\r\n                //attrs viewport shall inherit from target\t\r\n                var _viewportAttrsFromTarget = [LEXICON.ti];\r\n\r\n                //options:\t\r\n                var _defaultOptions;\r\n                var _currentOptions;\r\n                var _currentPreparedOptions;\r\n\r\n                //extensions:\t\r\n                var _extensions = {};\r\n                var _extensionsPrivateMethods = 'added removed on contract';\r\n\r\n                //update\t\r\n                var _lastUpdateTime;\r\n                var _swallowedUpdateHints = {};\r\n                var _swallowedUpdateTimeout;\r\n                var _swallowUpdateLag = 42;\r\n                var _updateOnLoadEventName = 'load';\r\n                var _updateOnLoadElms = [];\r\n\r\n                //DOM elements:\t\r\n                var _windowElement;\r\n                var _documentElement;\r\n                var _htmlElement;\r\n                var _bodyElement;\r\n                var _targetElement;                     //the target element of this OverlayScrollbars object\t\r\n                var _hostElement;                       //the host element of this OverlayScrollbars object -> may be the same as targetElement\t\r\n                var _sizeAutoObserverElement;           //observes size auto changes\t\r\n                var _sizeObserverElement;               //observes size and padding changes\t\r\n                var _paddingElement;                    //manages the padding\t\r\n                var _viewportElement;                   //is the viewport of our scrollbar model\t\r\n                var _contentElement;                    //the element which holds the content\t\r\n                var _contentArrangeElement;             //is needed for correct sizing of the content element (only if native scrollbars are overlays)\t\r\n                var _contentGlueElement;                //has always the size of the content element\t\r\n                var _textareaCoverElement;              //only applied if target is a textarea element. Used for correct size calculation and for prevention of uncontrolled scrolling\t\r\n                var _scrollbarCornerElement;\r\n                var _scrollbarHorizontalElement;\r\n                var _scrollbarHorizontalTrackElement;\r\n                var _scrollbarHorizontalHandleElement;\r\n                var _scrollbarVerticalElement;\r\n                var _scrollbarVerticalTrackElement;\r\n                var _scrollbarVerticalHandleElement;\r\n                var _windowElementNative;\r\n                var _documentElementNative;\r\n                var _targetElementNative;\r\n                var _hostElementNative;\r\n                var _sizeAutoObserverElementNative;\r\n                var _sizeObserverElementNative;\r\n                var _paddingElementNative;\r\n                var _viewportElementNative;\r\n                var _contentElementNative;\r\n\r\n                //Cache:\t\r\n                var _hostSizeCache;\r\n                var _contentScrollSizeCache;\r\n                var _arrangeContentSizeCache;\r\n                var _hasOverflowCache;\r\n                var _hideOverflowCache;\r\n                var _widthAutoCache;\r\n                var _heightAutoCache;\r\n                var _cssBoxSizingCache;\r\n                var _cssPaddingCache;\r\n                var _cssBorderCache;\r\n                var _cssMarginCache;\r\n                var _cssDirectionCache;\r\n                var _cssDirectionDetectedCache;\r\n                var _paddingAbsoluteCache;\r\n                var _clipAlwaysCache;\r\n                var _contentGlueSizeCache;\r\n                var _overflowBehaviorCache;\r\n                var _overflowAmountCache;\r\n                var _ignoreOverlayScrollbarHidingCache;\r\n                var _autoUpdateCache;\r\n                var _sizeAutoCapableCache;\r\n                var _contentElementScrollSizeChangeDetectedCache;\r\n                var _hostElementSizeChangeDetectedCache;\r\n                var _scrollbarsVisibilityCache;\r\n                var _scrollbarsAutoHideCache;\r\n                var _scrollbarsClickScrollingCache;\r\n                var _scrollbarsDragScrollingCache;\r\n                var _resizeCache;\r\n                var _normalizeRTLCache;\r\n                var _classNameCache;\r\n                var _oldClassName;\r\n                var _textareaAutoWrappingCache;\r\n                var _textareaInfoCache;\r\n                var _textareaSizeCache;\r\n                var _textareaDynHeightCache;\r\n                var _textareaDynWidthCache;\r\n                var _bodyMinSizeCache;\r\n                var _updateAutoCache = {};\r\n\r\n                //MutationObserver:\t\r\n                var _mutationObserverHost;\r\n                var _mutationObserverContent;\r\n                var _mutationObserverHostCallback;\r\n                var _mutationObserverContentCallback;\r\n                var _mutationObserversConnected;\r\n                var _mutationObserverAttrsTextarea = ['wrap', 'cols', 'rows'];\r\n                var _mutationObserverAttrsHost = [LEXICON.i, LEXICON.c, LEXICON.s, 'open'].concat(_viewportAttrsFromTarget);\r\n\r\n                //events:\t\r\n                var _destroyEvents = [];\r\n\r\n                //textarea:\t\r\n                var _textareaHasFocus;\r\n\r\n                //scrollbars:\t\r\n                var _scrollbarsAutoHideTimeoutId;\r\n                var _scrollbarsAutoHideMoveTimeoutId;\r\n                var _scrollbarsAutoHideDelay;\r\n                var _scrollbarsAutoHideNever;\r\n                var _scrollbarsAutoHideScroll;\r\n                var _scrollbarsAutoHideMove;\r\n                var _scrollbarsAutoHideLeave;\r\n                var _scrollbarsHandleHovered;\r\n                var _scrollbarsHandlesDefineScrollPos;\r\n\r\n                //resize\t\r\n                var _resizeNone;\r\n                var _resizeBoth;\r\n                var _resizeHorizontal;\r\n                var _resizeVertical;\r\n\r\n\r\n                //==== Event Listener ====//\t\r\n\r\n                /**\t\r\n                 * Adds or removes a event listener from the given element. \t\r\n                 * @param element The element to which the event listener shall be applied or removed.\t\r\n                 * @param eventNames The name(s) of the events.\t\r\n                 * @param listener The method which shall be called.\t\r\n                 * @param remove True if the handler shall be removed, false or undefined if the handler shall be added.\t\r\n                 * @param passiveOrOptions The options for the event.\r\n                 */\r\n                function setupResponsiveEventListener(element, eventNames, listener, remove, passiveOrOptions) {\r\n                    var collected = COMPATIBILITY.isA(eventNames) && COMPATIBILITY.isA(listener);\r\n                    var method = remove ? 'removeEventListener' : 'addEventListener';\r\n                    var onOff = remove ? 'off' : 'on';\r\n                    var events = collected ? false : eventNames.split(_strSpace)\r\n                    var i = 0;\r\n\r\n                    var passiveOrOptionsIsObj = FRAMEWORK.isPlainObject(passiveOrOptions);\r\n                    var passive = (_supportPassiveEvents && (passiveOrOptionsIsObj ? (passiveOrOptions._passive) : passiveOrOptions)) || false;\r\n                    var capture = passiveOrOptionsIsObj && (passiveOrOptions._capture || false);\r\n                    var nativeParam = _supportPassiveEvents ? {\r\n                        passive: passive,\r\n                        capture: capture,\r\n                    } : capture;\r\n\r\n                    if (collected) {\r\n                        for (; i < eventNames[LEXICON.l]; i++)\r\n                            setupResponsiveEventListener(element, eventNames[i], listener[i], remove, passiveOrOptions);\r\n                    }\r\n                    else {\r\n                        for (; i < events[LEXICON.l]; i++) {\r\n                            if(_supportPassiveEvents) {\r\n                                element[0][method](events[i], listener, nativeParam);\r\n                            }\r\n                            else {\r\n                                element[onOff](events[i], listener);\r\n                            }     \r\n                        }\r\n                    }\r\n                }\r\n\r\n\r\n                function addDestroyEventListener(element, eventNames, listener, passive) {\r\n                    setupResponsiveEventListener(element, eventNames, listener, false, passive);\r\n                    _destroyEvents.push(COMPATIBILITY.bind(setupResponsiveEventListener, 0, element, eventNames, listener, true, passive));\r\n                }\r\n\r\n                //==== Resize Observer ====//\r\n\r\n                /**\r\n                 * Adds or removes a resize observer from the given element.\r\n                 * @param targetElement The element to which the resize observer shall be added or removed.\r\n                 * @param onElementResizedCallback The callback which is fired every time the resize observer registers a size change or false / undefined if the resizeObserver shall be removed.\r\n                 */\r\n                function setupResizeObserver(targetElement, onElementResizedCallback) {\r\n                    if (targetElement) {\r\n                        var resizeObserver = COMPATIBILITY.rO();\r\n                        var strAnimationStartEvent = 'animationstart mozAnimationStart webkitAnimationStart MSAnimationStart';\r\n                        var strChildNodes = 'childNodes';\r\n                        var constScroll = 3333333;\r\n                        var callback = function () {\r\n                            targetElement[_strScrollTop](constScroll)[_strScrollLeft](_isRTL ? _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll : constScroll);\r\n                            onElementResizedCallback();\r\n                        };\r\n                        //add resize observer:\r\n                        if (onElementResizedCallback) {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.addClass('observed').append(generateDiv(_classNameResizeObserverElement)).contents()[0];\r\n                                var observer = element[_strResizeObserverProperty] = new resizeObserver(callback);\r\n                                observer.observe(element);\r\n                            }\r\n                            else {\r\n                                if (_msieVersion > 9 || !_autoUpdateRecommended) {\r\n                                    targetElement.prepend(\r\n                                        generateDiv(_classNameResizeObserverElement,\r\n                                            generateDiv({ c: _classNameResizeObserverItemElement, dir: 'ltr' },\r\n                                                generateDiv(_classNameResizeObserverItemElement,\r\n                                                    generateDiv(_classNameResizeObserverItemFinalElement)\r\n                                                ) +\r\n                                                generateDiv(_classNameResizeObserverItemElement,\r\n                                                    generateDiv({ c: _classNameResizeObserverItemFinalElement, style: 'width: 200%; height: 200%' })\r\n                                                )\r\n                                            )\r\n                                        )\r\n                                    );\r\n\r\n                                    var observerElement = targetElement[0][strChildNodes][0][strChildNodes][0];\r\n                                    var shrinkElement = FRAMEWORK(observerElement[strChildNodes][1]);\r\n                                    var expandElement = FRAMEWORK(observerElement[strChildNodes][0]);\r\n                                    var expandElementChild = FRAMEWORK(expandElement[0][strChildNodes][0]);\r\n                                    var widthCache = observerElement[LEXICON.oW];\r\n                                    var heightCache = observerElement[LEXICON.oH];\r\n                                    var isDirty;\r\n                                    var rAFId;\r\n                                    var currWidth;\r\n                                    var currHeight;\r\n                                    var factor = 2;\r\n                                    var nativeScrollbarSize = globals.nativeScrollbarSize; //care don't make changes to this object!!!\r\n                                    var reset = function () {\r\n                                        /*\r\n                                         var sizeResetWidth = observerElement[LEXICON.oW] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                                         var sizeResetHeight = observerElement[LEXICON.oH] + nativeScrollbarSize.x * factor + nativeScrollbarSize.y * factor + _overlayScrollbarDummySize.x + _overlayScrollbarDummySize.y;\r\n                                         var expandChildCSS = {};\r\n                                         expandChildCSS[_strWidth] = sizeResetWidth;\r\n                                         expandChildCSS[_strHeight] = sizeResetHeight;\r\n                                         expandElementChild.css(expandChildCSS);\r\n\r\n\r\n                                         expandElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                                         shrinkElement[_strScrollLeft](sizeResetWidth)[_strScrollTop](sizeResetHeight);\r\n                                         */\r\n                                        expandElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\r\n                                        shrinkElement[_strScrollLeft](constScroll)[_strScrollTop](constScroll);\r\n                                    };\r\n                                    var onResized = function () {\r\n                                        rAFId = 0;\r\n                                        if (!isDirty)\r\n                                            return;\r\n\r\n                                        widthCache = currWidth;\r\n                                        heightCache = currHeight;\r\n                                        callback();\r\n                                    };\r\n                                    var onScroll = function (event) {\r\n                                        currWidth = observerElement[LEXICON.oW];\r\n                                        currHeight = observerElement[LEXICON.oH];\r\n                                        isDirty = currWidth != widthCache || currHeight != heightCache;\r\n\r\n                                        if (event && isDirty && !rAFId) {\r\n                                            COMPATIBILITY.cAF()(rAFId);\r\n                                            rAFId = COMPATIBILITY.rAF()(onResized);\r\n                                        }\r\n                                        else if (!event)\r\n                                            onResized();\r\n\r\n                                        reset();\r\n                                        if (event) {\r\n                                            COMPATIBILITY.prvD(event);\r\n                                            COMPATIBILITY.stpP(event);\r\n                                        }\r\n                                        return false;\r\n                                    };\r\n                                    var expandChildCSS = {};\r\n                                    var observerElementCSS = {};\r\n\r\n                                    setTopRightBottomLeft(observerElementCSS, _strEmpty, [\r\n                                        -((nativeScrollbarSize.y + 1) * factor),\r\n                                        nativeScrollbarSize.x * -factor,\r\n                                        nativeScrollbarSize.y * -factor,\r\n                                        -((nativeScrollbarSize.x + 1) * factor)\r\n                                    ]);\r\n\r\n                                    FRAMEWORK(observerElement).css(observerElementCSS);\r\n                                    expandElement.on(_strScroll, onScroll);\r\n                                    shrinkElement.on(_strScroll, onScroll);\r\n                                    targetElement.on(strAnimationStartEvent, function () {\r\n                                        onScroll(false);\r\n                                    });\r\n                                    //lets assume that the divs will never be that large and a constant value is enough\r\n                                    expandChildCSS[_strWidth] = constScroll;\r\n                                    expandChildCSS[_strHeight] = constScroll;\r\n                                    expandElementChild.css(expandChildCSS);\r\n\r\n                                    reset();\r\n                                }\r\n                                else {\r\n                                    var attachEvent = _documentElementNative.attachEvent;\r\n                                    var isIE = _msieVersion !== undefined;\r\n                                    if (attachEvent) {\r\n                                        targetElement.prepend(generateDiv(_classNameResizeObserverElement));\r\n                                        findFirst(targetElement, _strDot + _classNameResizeObserverElement)[0].attachEvent('onresize', callback);\r\n                                    }\r\n                                    else {\r\n                                        var obj = _documentElementNative.createElement(TYPES.o);\r\n                                        obj.setAttribute(LEXICON.ti, '-1');\r\n                                        obj.setAttribute(LEXICON.c, _classNameResizeObserverElement);\r\n                                        obj.onload = function () {\r\n                                            var wnd = this.contentDocument.defaultView;\r\n                                            wnd.addEventListener('resize', callback);\r\n                                            wnd.document.documentElement.style.display = 'none';\r\n                                        };\r\n                                        obj.type = 'text/html';\r\n                                        if (isIE)\r\n                                            targetElement.prepend(obj);\r\n                                        obj.data = 'about:blank';\r\n                                        if (!isIE)\r\n                                            targetElement.prepend(obj);\r\n                                        targetElement.on(strAnimationStartEvent, callback);\r\n                                    }\r\n                                }\r\n                            }\r\n\r\n                            if (targetElement[0] === _sizeObserverElementNative) {\r\n                                var directionChanged = function () {\r\n                                    var dir = _hostElement.css('direction');\r\n                                    var css = {};\r\n                                    var scrollLeftValue = 0;\r\n                                    var result = false;\r\n                                    if (dir !== _cssDirectionDetectedCache) {\r\n                                        if (dir === 'ltr') {\r\n                                            css[_strLeft] = 0;\r\n                                            css[_strRight] = _strAuto;\r\n                                            scrollLeftValue = constScroll;\r\n                                        }\r\n                                        else {\r\n                                            css[_strLeft] = _strAuto;\r\n                                            css[_strRight] = 0;\r\n                                            scrollLeftValue = _rtlScrollBehavior.n ? -constScroll : _rtlScrollBehavior.i ? 0 : constScroll;\r\n                                        }\r\n                                        //execution order is important for IE!!!\r\n                                        _sizeObserverElement.children().eq(0).css(css);\r\n                                        _sizeObserverElement[_strScrollLeft](scrollLeftValue)[_strScrollTop](constScroll);\r\n                                        _cssDirectionDetectedCache = dir;\r\n                                        result = true;\r\n                                    }\r\n                                    return result;\r\n                                };\r\n                                directionChanged();\r\n                                addDestroyEventListener(targetElement, _strScroll, function (event) {\r\n                                    if (directionChanged())\r\n                                        update();\r\n                                    COMPATIBILITY.prvD(event);\r\n                                    COMPATIBILITY.stpP(event);\r\n                                    return false;\r\n                                });\r\n                            }\r\n                        }\r\n                        //remove resize observer:\r\n                        else {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                var resizeObserverObj = element[_strResizeObserverProperty];\r\n                                if (resizeObserverObj) {\r\n                                    resizeObserverObj.disconnect();\r\n                                    delete element[_strResizeObserverProperty];\r\n                                }\r\n                            }\r\n                            else {\r\n                                remove(targetElement.children(_strDot + _classNameResizeObserverElement).eq(0));\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Freezes or unfreezes the given resize observer.\r\n                 * @param targetElement The element to which the target resize observer is applied.\r\n                 * @param freeze True if the resize observer shall be frozen, false otherwise.\r\n                 \r\n                function freezeResizeObserver(targetElement, freeze) {\r\n                    if (targetElement !== undefined) {\r\n                        if(freeze) {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                element[_strResizeObserverProperty].unobserve(element);\r\n                            }\r\n                            else {\r\n                                targetElement = targetElement.children(_strDot + _classNameResizeObserverElement).eq(0);\r\n                                var w = targetElement.css(_strWidth);\r\n                                var h = targetElement.css(_strHeight);\r\n                                var css = {};\r\n                                css[_strWidth] = w;\r\n                                css[_strHeight] = h;\r\n                                targetElement.css(css);\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (_supportResizeObserver) {\r\n                                var element = targetElement.contents()[0];\r\n                                element[_strResizeObserverProperty].observe(element);\r\n                            }\r\n                            else {\r\n                                var css = { };\r\n                                css[_strHeight] = _strEmpty;\r\n                                css[_strWidth] = _strEmpty;\r\n                                targetElement.children(_strDot + _classNameResizeObserverElement).eq(0).css(css);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                */\r\n\r\n\r\n                //==== Mutation Observers ====//\r\n\r\n                /**\r\n                 * Creates MutationObservers for the host and content Element if they are supported.\r\n                 */\r\n                function createMutationObservers() {\r\n                    if (_supportMutationObserver) {\r\n                        var mutationObserverContentLag = 11;\r\n                        var mutationObserver = COMPATIBILITY.mO();\r\n                        var contentLastUpdate = COMPATIBILITY.now();\r\n                        var mutationTarget;\r\n                        var mutationAttrName;\r\n                        var mutationIsClass;\r\n                        var oldMutationVal;\r\n                        var newClassVal;\r\n                        var hostClassNameRegex;\r\n                        var contentTimeout;\r\n                        var now;\r\n                        var sizeAuto;\r\n                        var action;\r\n\r\n                        _mutationObserverHostCallback = function (mutations) {\r\n\r\n                            var doUpdate = false;\r\n                            var doUpdateForce = false;\r\n                            var mutation;\r\n                            var mutatedAttrs = [];\r\n\r\n                            if (_initialized && !_sleeping) {\r\n                                each(mutations, function () {\r\n                                    mutation = this;\r\n                                    mutationTarget = mutation.target;\r\n                                    mutationAttrName = mutation.attributeName;\r\n                                    mutationIsClass = mutationAttrName === LEXICON.c;\r\n                                    oldMutationVal = mutation.oldValue;\r\n                                    newClassVal = mutationTarget.className;\r\n\r\n                                    if (_domExists && mutationIsClass && !doUpdateForce) {\r\n                                        // if old class value contains _classNameHostElementForeign and new class value doesn't\r\n                                        if (oldMutationVal.indexOf(_classNameHostElementForeign) > -1 && newClassVal.indexOf(_classNameHostElementForeign) < 0) {\r\n                                            hostClassNameRegex = createHostClassNameRegExp(true);\r\n                                            _hostElementNative.className = newClassVal.split(_strSpace).concat(oldMutationVal.split(_strSpace).filter(function (name) {\r\n                                                return name.match(hostClassNameRegex);\r\n                                            })).join(_strSpace);\r\n                                            doUpdate = doUpdateForce = true;\r\n                                        }\r\n                                    }\r\n\r\n                                    if (!doUpdate) {\r\n                                        doUpdate = mutationIsClass\r\n                                            ? hostClassNamesChanged(oldMutationVal, newClassVal)\r\n                                            : mutationAttrName === LEXICON.s\r\n                                                ? oldMutationVal !== mutationTarget[LEXICON.s].cssText\r\n                                                : true;\r\n                                    }\r\n\r\n                                    mutatedAttrs.push(mutationAttrName);\r\n                                });\r\n\r\n                                updateViewportAttrsFromTarget(mutatedAttrs);\r\n\r\n                                if (doUpdate)\r\n                                    _base.update(doUpdateForce || _strAuto);\r\n                            }\r\n                            return doUpdate;\r\n                        };\r\n                        _mutationObserverContentCallback = function (mutations) {\r\n                            var doUpdate = false;\r\n                            var mutation;\r\n\r\n                            if (_initialized && !_sleeping) {\r\n                                each(mutations, function () {\r\n                                    mutation = this;\r\n                                    doUpdate = isUnknownMutation(mutation);\r\n                                    return !doUpdate;\r\n                                });\r\n\r\n                                if (doUpdate) {\r\n                                    now = COMPATIBILITY.now();\r\n                                    sizeAuto = (_heightAutoCache || _widthAutoCache);\r\n                                    action = function () {\r\n                                        if (!_destroyed) {\r\n                                            contentLastUpdate = now;\r\n\r\n                                            //if cols, rows or wrap attr was changed\r\n                                            if (_isTextarea)\r\n                                                textareaUpdate();\r\n\r\n                                            if (sizeAuto)\r\n                                                update();\r\n                                            else\r\n                                                _base.update(_strAuto);\r\n                                        }\r\n                                    };\r\n                                    clearTimeout(contentTimeout);\r\n                                    if (mutationObserverContentLag <= 0 || now - contentLastUpdate > mutationObserverContentLag || !sizeAuto)\r\n                                        action();\r\n                                    else\r\n                                        contentTimeout = setTimeout(action, mutationObserverContentLag);\r\n                                }\r\n                            }\r\n                            return doUpdate;\r\n                        }\r\n\r\n                        _mutationObserverHost = new mutationObserver(_mutationObserverHostCallback);\r\n                        _mutationObserverContent = new mutationObserver(_mutationObserverContentCallback);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Connects the MutationObservers if they are supported.\r\n                 */\r\n                function connectMutationObservers() {\r\n                    if (_supportMutationObserver && !_mutationObserversConnected) {\r\n                        _mutationObserverHost.observe(_hostElementNative, {\r\n                            attributes: true,\r\n                            attributeOldValue: true,\r\n                            attributeFilter: _mutationObserverAttrsHost\r\n                        });\r\n\r\n                        _mutationObserverContent.observe(_isTextarea ? _targetElementNative : _contentElementNative, {\r\n                            attributes: true,\r\n                            attributeOldValue: true,\r\n                            subtree: !_isTextarea,\r\n                            childList: !_isTextarea,\r\n                            characterData: !_isTextarea,\r\n                            attributeFilter: _isTextarea ? _mutationObserverAttrsTextarea : _mutationObserverAttrsHost\r\n                        });\r\n\r\n                        _mutationObserversConnected = true;\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Disconnects the MutationObservers if they are supported.\r\n                 */\r\n                function disconnectMutationObservers() {\r\n                    if (_supportMutationObserver && _mutationObserversConnected) {\r\n                        _mutationObserverHost.disconnect();\r\n                        _mutationObserverContent.disconnect();\r\n\r\n                        _mutationObserversConnected = false;\r\n                    }\r\n                }\r\n\r\n\r\n                //==== Events of elements ====//\r\n\r\n                /**\r\n                 * This method gets called every time the host element gets resized. IMPORTANT: Padding changes are detected too!!\r\n                 * It refreshes the hostResizedEventArgs and the hostSizeResizeCache.\r\n                 * If there are any size changes, the update method gets called.\r\n                 */\r\n                function hostOnResized() {\r\n                    if (!_sleeping) {\r\n                        var changed;\r\n                        var hostSize = {\r\n                            w: _sizeObserverElementNative[LEXICON.sW],\r\n                            h: _sizeObserverElementNative[LEXICON.sH]\r\n                        };\r\n\r\n                        changed = checkCache(hostSize, _hostElementSizeChangeDetectedCache);\r\n                        _hostElementSizeChangeDetectedCache = hostSize;\r\n                        if (changed)\r\n                            update({ _hostSizeChanged: true });\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * The mouse enter event of the host element. This event is only needed for the autoHide feature.\r\n                 */\r\n                function hostOnMouseEnter() {\r\n                    if (_scrollbarsAutoHideLeave)\r\n                        refreshScrollbarsAutoHide(true);\r\n                }\r\n\r\n                /**\r\n                 * The mouse leave event of the host element. This event is only needed for the autoHide feature.\r\n                 */\r\n                function hostOnMouseLeave() {\r\n                    if (_scrollbarsAutoHideLeave && !_bodyElement.hasClass(_classNameDragging))\r\n                        refreshScrollbarsAutoHide(false);\r\n                }\r\n\r\n                /**\r\n                 * The mouse move event of the host element. This event is only needed for the autoHide \"move\" feature.\r\n                 */\r\n                function hostOnMouseMove() {\r\n                    if (_scrollbarsAutoHideMove) {\r\n                        refreshScrollbarsAutoHide(true);\r\n                        clearTimeout(_scrollbarsAutoHideMoveTimeoutId);\r\n                        _scrollbarsAutoHideMoveTimeoutId = setTimeout(function () {\r\n                            if (_scrollbarsAutoHideMove && !_destroyed)\r\n                                refreshScrollbarsAutoHide(false);\r\n                        }, 100);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Prevents text from deselection if attached to the document element on the mousedown event of a DOM element.\r\n                 * @param event The select start event.\r\n                 */\r\n                function documentOnSelectStart(event) {\r\n                    COMPATIBILITY.prvD(event);\r\n                    return false;\r\n                }\r\n\r\n                /**\t\r\n                 * A callback which will be called after a element has loaded.\t\r\n                 */\r\n                function updateOnLoadCallback(event) {\r\n                    var elm = FRAMEWORK(event.target);\r\n\r\n                    eachUpdateOnLoad(function (i, updateOnLoadSelector) {\r\n                        if (elm.is(updateOnLoadSelector)) {\r\n                            update({ _contentSizeChanged: true });\r\n                        }\r\n                    });\r\n                }\r\n\r\n                /**\r\n                * Adds or removes mouse & touch events of the host element. (for handling auto-hiding of the scrollbars)\r\n                * @param destroy Indicates whether the events shall be added or removed.\r\n                */\r\n                function setupHostMouseTouchEvents(destroy) {\r\n                    if (!destroy)\r\n                        setupHostMouseTouchEvents(true);\r\n\r\n                    setupResponsiveEventListener(_hostElement,\r\n                        _strMouseTouchMoveEvent.split(_strSpace)[0],\r\n                        hostOnMouseMove,\r\n                        (!_scrollbarsAutoHideMove || destroy), true);\r\n                    setupResponsiveEventListener(_hostElement,\r\n                        [_strMouseEnter, _strMouseLeave],\r\n                        [hostOnMouseEnter, hostOnMouseLeave],\r\n                        (!_scrollbarsAutoHideLeave || destroy), true);\r\n\r\n                    //if the plugin is initialized and the mouse is over the host element, make the scrollbars visible\r\n                    if (!_initialized && !destroy)\r\n                        _hostElement.one('mouseover', hostOnMouseEnter);\r\n                }\r\n\r\n\r\n                //==== Update Detection ====//\r\n\r\n                /**\r\n                 * Measures the min width and min height of the body element and refreshes the related cache.\r\n                 * @returns {boolean} True if the min width or min height has changed, false otherwise.\r\n                 */\r\n                function bodyMinSizeChanged() {\r\n                    var bodyMinSize = {};\r\n                    if (_isBody && _contentArrangeElement) {\r\n                        bodyMinSize.w = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strWidth));\r\n                        bodyMinSize.h = parseToZeroOrNumber(_contentArrangeElement.css(_strMinMinus + _strHeight));\r\n                        bodyMinSize.c = checkCache(bodyMinSize, _bodyMinSizeCache);\r\n                        bodyMinSize.f = true; //flag for \"measured at least once\"\r\n                    }\r\n                    _bodyMinSizeCache = bodyMinSize;\r\n                    return !!bodyMinSize.c;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the class names really changed (new class without plugin host prefix)\r\n                 * @param oldClassNames The old ClassName string or array.\r\n                 * @param newClassNames The new ClassName string or array.\r\n                 * @returns {boolean} True if the class names has really changed, false otherwise.\r\n                 */\r\n                function hostClassNamesChanged(oldClassNames, newClassNames) {\r\n                    var currClasses = typeof newClassNames == TYPES.s ? newClassNames.split(_strSpace) : [];\r\n                    var oldClasses = typeof oldClassNames == TYPES.s ? oldClassNames.split(_strSpace) : [];\r\n                    var diff = getArrayDifferences(oldClasses, currClasses);\r\n\r\n                    // remove none theme from diff list to prevent update\r\n                    var idx = inArray(_classNameThemeNone, diff);\r\n                    var i;\r\n                    var regex;\r\n\r\n                    if (idx > -1)\r\n                        diff.splice(idx, 1);\r\n\r\n                    if (diff[LEXICON.l] > 0) {\r\n                        regex = createHostClassNameRegExp(true, true);\r\n                        for (i = 0; i < diff.length; i++) {\r\n                            if (!diff[i].match(regex)) {\r\n                                return true;\r\n                            }\r\n                        }\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the given mutation is not from a from the plugin generated element. If the target element is a textarea the mutation is always unknown.\r\n                 * @param mutation The mutation which shall be checked.\r\n                 * @returns {boolean} True if the mutation is from a unknown element, false otherwise.\r\n                 */\r\n                function isUnknownMutation(mutation) {\r\n                    var attributeName = mutation.attributeName;\r\n                    var mutationTarget = mutation.target;\r\n                    var mutationType = mutation.type;\r\n                    var strClosest = 'closest';\r\n\r\n                    if (mutationTarget === _contentElementNative)\r\n                        return attributeName === null;\r\n                    if (mutationType === 'attributes' && (attributeName === LEXICON.c || attributeName === LEXICON.s) && !_isTextarea) {\r\n                        //ignore className changes by the plugin\t\r\n                        if (attributeName === LEXICON.c && FRAMEWORK(mutationTarget).hasClass(_classNameHostElement))\r\n                            return hostClassNamesChanged(mutation.oldValue, mutationTarget.className);\r\n\r\n                        //only do it of browser support it natively\t\r\n                        if (typeof mutationTarget[strClosest] != TYPES.f)\r\n                            return true;\r\n                        if (mutationTarget[strClosest](_strDot + _classNameResizeObserverElement) !== null ||\r\n                            mutationTarget[strClosest](_strDot + _classNameScrollbar) !== null ||\r\n                            mutationTarget[strClosest](_strDot + _classNameScrollbarCorner) !== null)\r\n                            return false;\r\n                    }\r\n                    return true;\r\n                }\r\n\r\n                /**\r\n                 * Returns true if the content size was changed since the last time this method was called.\r\n                 * @returns {boolean} True if the content size was changed, false otherwise.\r\n                 */\r\n                function updateAutoContentSizeChanged() {\r\n                    if (_sleeping)\r\n                        return false;\r\n\r\n                    var contentMeasureElement = getContentMeasureElement();\r\n                    var textareaValueLength = _isTextarea && _widthAutoCache && !_textareaAutoWrappingCache ? _targetElement.val().length : 0;\r\n                    var setCSS = !_mutationObserversConnected && _widthAutoCache && !_isTextarea;\r\n                    var css = {};\r\n                    var float;\r\n                    var bodyMinSizeC;\r\n                    var changed;\r\n                    var contentElementScrollSize;\r\n\r\n                    if (setCSS) {\r\n                        float = _contentElement.css(_strFloat);\r\n                        css[_strFloat] = _isRTL ? _strRight : _strLeft;\r\n                        css[_strWidth] = _strAuto;\r\n                        _contentElement.css(css);\r\n                    }\r\n                    contentElementScrollSize = {\r\n                        w: contentMeasureElement[LEXICON.sW] + textareaValueLength,\r\n                        h: contentMeasureElement[LEXICON.sH] + textareaValueLength\r\n                    };\r\n                    if (setCSS) {\r\n                        css[_strFloat] = float;\r\n                        css[_strWidth] = _strHundredPercent;\r\n                        _contentElement.css(css);\r\n                    }\r\n\r\n                    bodyMinSizeC = bodyMinSizeChanged();\r\n                    changed = checkCache(contentElementScrollSize, _contentElementScrollSizeChangeDetectedCache);\r\n\r\n                    _contentElementScrollSizeChangeDetectedCache = contentElementScrollSize;\r\n\r\n                    return changed || bodyMinSizeC;\r\n                }\r\n\r\n                /**\r\n                 * Returns true when a attribute which the MutationObserver would observe has changed.  \r\n                 * @returns {boolean} True if one of the attributes which a MutationObserver would observe has changed, false or undefined otherwise.\r\n                 */\r\n                function meaningfulAttrsChanged() {\r\n                    if (_sleeping || _mutationObserversConnected)\r\n                        return;\r\n\r\n                    var elem;\r\n                    var curr;\r\n                    var cache;\r\n                    var changedAttrs = [];\r\n                    var checks = [\r\n                        {\r\n                            _elem: _hostElement,\r\n                            _attrs: _mutationObserverAttrsHost.concat(':visible')\r\n                        },\r\n                        {\r\n                            _elem: _isTextarea ? _targetElement : undefined,\r\n                            _attrs: _mutationObserverAttrsTextarea\r\n                        }\r\n                    ];\r\n\r\n                    each(checks, function (index, check) {\r\n                        elem = check._elem;\r\n                        if (elem) {\r\n                            each(check._attrs, function (index, attr) {\r\n                                curr = attr.charAt(0) === ':' ? elem.is(attr) : elem.attr(attr);\r\n                                cache = _updateAutoCache[attr];\r\n\r\n                                if (checkCache(curr, cache)) {\r\n                                    changedAttrs.push(attr);\r\n                                }\r\n\r\n                                _updateAutoCache[attr] = curr;\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                    updateViewportAttrsFromTarget(changedAttrs);\r\n\r\n                    return changedAttrs[LEXICON.l] > 0;\r\n                }\r\n\r\n                /**\r\n                 * Checks is a CSS Property of a child element is affecting the scroll size of the content.\r\n                 * @param propertyName The CSS property name.\r\n                 * @returns {boolean} True if the property is affecting the content scroll size, false otherwise.\r\n                 */\r\n                function isSizeAffectingCSSProperty(propertyName) {\r\n                    if (!_initialized)\r\n                        return true;\r\n                    var flexGrow = 'flex-grow';\r\n                    var flexShrink = 'flex-shrink';\r\n                    var flexBasis = 'flex-basis';\r\n                    var affectingPropsX = [\r\n                        _strWidth,\r\n                        _strMinMinus + _strWidth,\r\n                        _strMaxMinus + _strWidth,\r\n                        _strMarginMinus + _strLeft,\r\n                        _strMarginMinus + _strRight,\r\n                        _strLeft,\r\n                        _strRight,\r\n                        'font-weight',\r\n                        'word-spacing',\r\n                        flexGrow,\r\n                        flexShrink,\r\n                        flexBasis\r\n                    ];\r\n                    var affectingPropsXContentBox = [\r\n                        _strPaddingMinus + _strLeft,\r\n                        _strPaddingMinus + _strRight,\r\n                        _strBorderMinus + _strLeft + _strWidth,\r\n                        _strBorderMinus + _strRight + _strWidth\r\n                    ];\r\n                    var affectingPropsY = [\r\n                        _strHeight,\r\n                        _strMinMinus + _strHeight,\r\n                        _strMaxMinus + _strHeight,\r\n                        _strMarginMinus + _strTop,\r\n                        _strMarginMinus + _strBottom,\r\n                        _strTop,\r\n                        _strBottom,\r\n                        'line-height',\r\n                        flexGrow,\r\n                        flexShrink,\r\n                        flexBasis\r\n                    ];\r\n                    var affectingPropsYContentBox = [\r\n                        _strPaddingMinus + _strTop,\r\n                        _strPaddingMinus + _strBottom,\r\n                        _strBorderMinus + _strTop + _strWidth,\r\n                        _strBorderMinus + _strBottom + _strWidth\r\n                    ];\r\n                    var _strS = 's';\r\n                    var _strVS = 'v-s';\r\n                    var checkX = _overflowBehaviorCache.x === _strS || _overflowBehaviorCache.x === _strVS;\r\n                    var checkY = _overflowBehaviorCache.y === _strS || _overflowBehaviorCache.y === _strVS;\r\n                    var sizeIsAffected = false;\r\n                    var checkPropertyName = function (arr, name) {\r\n                        for (var i = 0; i < arr[LEXICON.l]; i++) {\r\n                            if (arr[i] === name)\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    };\r\n\r\n                    if (checkY) {\r\n                        sizeIsAffected = checkPropertyName(affectingPropsY, propertyName);\r\n                        if (!sizeIsAffected && !_isBorderBox)\r\n                            sizeIsAffected = checkPropertyName(affectingPropsYContentBox, propertyName);\r\n                    }\r\n                    if (checkX && !sizeIsAffected) {\r\n                        sizeIsAffected = checkPropertyName(affectingPropsX, propertyName);\r\n                        if (!sizeIsAffected && !_isBorderBox)\r\n                            sizeIsAffected = checkPropertyName(affectingPropsXContentBox, propertyName);\r\n                    }\r\n                    return sizeIsAffected;\r\n                }\r\n\r\n\r\n                //==== Update ====//\r\n\r\n                /**\r\n                 * Sets the attribute values of the viewport element to the values from the target element.\r\n                 * The value of a attribute is only set if the attribute is whitelisted.\r\n                 * @attrs attrs The array of attributes which shall be set or undefined if all whitelisted shall be set.\r\n                 */\r\n                function updateViewportAttrsFromTarget(attrs) {\r\n                    attrs = attrs || _viewportAttrsFromTarget;\r\n                    each(attrs, function (index, attr) {\r\n                        if (COMPATIBILITY.inA(attr, _viewportAttrsFromTarget) > -1) {\r\n                            var targetAttr = _targetElement.attr(attr);\r\n                            if (type(targetAttr) == TYPES.s) {\r\n                                _viewportElement.attr(attr, targetAttr);\r\n                            }\r\n                            else {\r\n                                _viewportElement.removeAttr(attr);\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                /**\r\n                 * Updates the variables and size of the textarea element, and manages the scroll on new line or new character.\r\n                 */\r\n                function textareaUpdate() {\r\n                    if (!_sleeping) {\r\n                        var wrapAttrOff = !_textareaAutoWrappingCache;\r\n                        var minWidth = _viewportSize.w;\r\n                        var minHeight = _viewportSize.h;\r\n                        var css = {};\r\n                        var doMeasure = _widthAutoCache || wrapAttrOff;\r\n                        var origWidth;\r\n                        var width;\r\n                        var origHeight;\r\n                        var height;\r\n\r\n                        //reset min size\r\n                        css[_strMinMinus + _strWidth] = _strEmpty;\r\n                        css[_strMinMinus + _strHeight] = _strEmpty;\r\n\r\n                        //set width auto\r\n                        css[_strWidth] = _strAuto;\r\n                        _targetElement.css(css);\r\n\r\n                        //measure width\r\n                        origWidth = _targetElementNative[LEXICON.oW];\r\n                        width = doMeasure ? MATH.max(origWidth, _targetElementNative[LEXICON.sW] - 1) : 1;\r\n                        /*width += (_widthAutoCache ? _marginX + (!_isBorderBox ? wrapAttrOff ? 0 : _paddingX + _borderX : 0) : 0);*/\r\n\r\n                        //set measured width\r\n                        css[_strWidth] = _widthAutoCache ? _strAuto /*width*/ : _strHundredPercent;\r\n                        css[_strMinMinus + _strWidth] = _strHundredPercent;\r\n\r\n                        //set height auto\r\n                        css[_strHeight] = _strAuto;\r\n                        _targetElement.css(css);\r\n\r\n                        //measure height\r\n                        origHeight = _targetElementNative[LEXICON.oH];\r\n                        height = MATH.max(origHeight, _targetElementNative[LEXICON.sH] - 1);\r\n\r\n                        //append correct size values\r\n                        css[_strWidth] = width;\r\n                        css[_strHeight] = height;\r\n                        _textareaCoverElement.css(css);\r\n\r\n                        //apply min width / min height to prevent textarea collapsing\r\n                        css[_strMinMinus + _strWidth] = minWidth /*+ (!_isBorderBox && _widthAutoCache ? _paddingX + _borderX : 0)*/;\r\n                        css[_strMinMinus + _strHeight] = minHeight /*+ (!_isBorderBox && _heightAutoCache ? _paddingY + _borderY : 0)*/;\r\n                        _targetElement.css(css);\r\n\r\n                        return {\r\n                            _originalWidth: origWidth,\r\n                            _originalHeight: origHeight,\r\n                            _dynamicWidth: width,\r\n                            _dynamicHeight: height\r\n                        };\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Updates the plugin and DOM to the current options.\r\n                 * This method should only be called if a update is 100% required.\r\n                 * @param updateHints A objects which contains hints for this update:\r\n                 * {\r\n                 *   _hostSizeChanged : boolean,\r\n                 *   _contentSizeChanged : boolean,\r\n                 *   _force : boolean,                             == preventSwallowing\r\n                 *   _changedOptions : { },                        == preventSwallowing && preventSleep\r\n                *  }\r\n                 */\r\n                function update(updateHints) {\r\n                    clearTimeout(_swallowedUpdateTimeout);\r\n                    updateHints = updateHints || {};\r\n                    _swallowedUpdateHints._hostSizeChanged |= updateHints._hostSizeChanged;\r\n                    _swallowedUpdateHints._contentSizeChanged |= updateHints._contentSizeChanged;\r\n                    _swallowedUpdateHints._force |= updateHints._force;\r\n\r\n                    var now = COMPATIBILITY.now();\r\n                    var hostSizeChanged = !!_swallowedUpdateHints._hostSizeChanged;\r\n                    var contentSizeChanged = !!_swallowedUpdateHints._contentSizeChanged;\r\n                    var force = !!_swallowedUpdateHints._force;\r\n                    var changedOptions = updateHints._changedOptions;\r\n                    var swallow = _swallowUpdateLag > 0 && _initialized && !_destroyed && !force && !changedOptions && (now - _lastUpdateTime) < _swallowUpdateLag && (!_heightAutoCache && !_widthAutoCache);\r\n                    var displayIsHidden;\r\n\r\n                    if (swallow)\r\n                        _swallowedUpdateTimeout = setTimeout(update, _swallowUpdateLag);\r\n\r\n                    //abort update due to:\r\n                    //destroyed\r\n                    //swallowing\r\n                    //sleeping\r\n                    //host is hidden or has false display\r\n                    if (_destroyed || swallow || (_sleeping && !changedOptions) || (_initialized && !force && (displayIsHidden = _hostElement.is(':hidden'))) || _hostElement.css('display') === 'inline')\r\n                        return;\r\n\r\n                    _lastUpdateTime = now;\r\n                    _swallowedUpdateHints = {};\r\n\r\n                    //if scrollbar styling is possible and native scrollbars aren't overlaid the scrollbar styling will be applied which hides the native scrollbars completely.\r\n                    if (_nativeScrollbarStyling && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\r\n                        //native scrollbars are hidden, so change the values to zero\r\n                        _nativeScrollbarSize.x = 0;\r\n                        _nativeScrollbarSize.y = 0;\r\n                    }\r\n                    else {\r\n                        //refresh native scrollbar size (in case of zoom)\r\n                        _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\r\n                    }\r\n\r\n                    // Scrollbar padding is needed for firefox, because firefox hides scrollbar automatically if the size of the div is too small.\r\n                    // The calculation: [scrollbar size +3 *3]\r\n                    // (+3 because of possible decoration e.g. borders, margins etc., but only if native scrollbar is NOT a overlaid scrollbar)\r\n                    // (*3 because (1)increase / (2)decrease -button and (3)resize handle)\r\n                    _nativeScrollbarMinSize = {\r\n                        x: (_nativeScrollbarSize.x + (_nativeScrollbarIsOverlaid.x ? 0 : 3)) * 3,\r\n                        y: (_nativeScrollbarSize.y + (_nativeScrollbarIsOverlaid.y ? 0 : 3)) * 3\r\n                    };\r\n\r\n                    changedOptions = changedOptions || {};\r\n                    //freezeResizeObserver(_sizeObserverElement, true);\r\n                    //freezeResizeObserver(_sizeAutoObserverElement, true);\r\n\r\n                    var checkCacheAutoForce = function () {\r\n                        return checkCache.apply(this, [].slice.call(arguments).concat([force]));\r\n                    };\r\n\r\n                    //save current scroll offset\r\n                    var currScroll = {\r\n                        x: _viewportElement[_strScrollLeft](),\r\n                        y: _viewportElement[_strScrollTop]()\r\n                    };\r\n\r\n                    var currentPreparedOptionsScrollbars = _currentPreparedOptions.scrollbars;\r\n                    var currentPreparedOptionsTextarea = _currentPreparedOptions.textarea;\r\n\r\n                    //scrollbars visibility:\r\n                    var scrollbarsVisibility = currentPreparedOptionsScrollbars.visibility;\r\n                    var scrollbarsVisibilityChanged = checkCacheAutoForce(scrollbarsVisibility, _scrollbarsVisibilityCache);\r\n\r\n                    //scrollbars autoHide:\r\n                    var scrollbarsAutoHide = currentPreparedOptionsScrollbars.autoHide;\r\n                    var scrollbarsAutoHideChanged = checkCacheAutoForce(scrollbarsAutoHide, _scrollbarsAutoHideCache);\r\n\r\n                    //scrollbars click scrolling\r\n                    var scrollbarsClickScrolling = currentPreparedOptionsScrollbars.clickScrolling;\r\n                    var scrollbarsClickScrollingChanged = checkCacheAutoForce(scrollbarsClickScrolling, _scrollbarsClickScrollingCache);\r\n\r\n                    //scrollbars drag scrolling\r\n                    var scrollbarsDragScrolling = currentPreparedOptionsScrollbars.dragScrolling;\r\n                    var scrollbarsDragScrollingChanged = checkCacheAutoForce(scrollbarsDragScrolling, _scrollbarsDragScrollingCache);\r\n\r\n                    //className\r\n                    var className = _currentPreparedOptions.className;\r\n                    var classNameChanged = checkCacheAutoForce(className, _classNameCache);\r\n\r\n                    //resize\r\n                    var resize = _currentPreparedOptions.resize;\r\n                    var resizeChanged = checkCacheAutoForce(resize, _resizeCache) && !_isBody; //body can't be resized since the window itself acts as resize possibility.\r\n\r\n                    //paddingAbsolute\r\n                    var paddingAbsolute = _currentPreparedOptions.paddingAbsolute;\r\n                    var paddingAbsoluteChanged = checkCacheAutoForce(paddingAbsolute, _paddingAbsoluteCache);\r\n\r\n                    //clipAlways\r\n                    var clipAlways = _currentPreparedOptions.clipAlways;\r\n                    var clipAlwaysChanged = checkCacheAutoForce(clipAlways, _clipAlwaysCache);\r\n\r\n                    //sizeAutoCapable\r\n                    var sizeAutoCapable = _currentPreparedOptions.sizeAutoCapable && !_isBody; //body can never be size auto, because it shall be always as big as the viewport.\r\n                    var sizeAutoCapableChanged = checkCacheAutoForce(sizeAutoCapable, _sizeAutoCapableCache);\r\n\r\n                    //showNativeScrollbars\r\n                    var ignoreOverlayScrollbarHiding = _currentPreparedOptions.nativeScrollbarsOverlaid.showNativeScrollbars;\r\n                    var ignoreOverlayScrollbarHidingChanged = checkCacheAutoForce(ignoreOverlayScrollbarHiding, _ignoreOverlayScrollbarHidingCache);\r\n\r\n                    //autoUpdate\r\n                    var autoUpdate = _currentPreparedOptions.autoUpdate;\r\n                    var autoUpdateChanged = checkCacheAutoForce(autoUpdate, _autoUpdateCache);\r\n\r\n                    //overflowBehavior\r\n                    var overflowBehavior = _currentPreparedOptions.overflowBehavior;\r\n                    var overflowBehaviorChanged = checkCacheAutoForce(overflowBehavior, _overflowBehaviorCache, force);\r\n\r\n                    //dynWidth:\r\n                    var textareaDynWidth = currentPreparedOptionsTextarea.dynWidth;\r\n                    var textareaDynWidthChanged = checkCacheAutoForce(_textareaDynWidthCache, textareaDynWidth);\r\n\r\n                    //dynHeight:\r\n                    var textareaDynHeight = currentPreparedOptionsTextarea.dynHeight;\r\n                    var textareaDynHeightChanged = checkCacheAutoForce(_textareaDynHeightCache, textareaDynHeight);\r\n\r\n                    //scrollbars visibility\r\n                    _scrollbarsAutoHideNever = scrollbarsAutoHide === 'n';\r\n                    _scrollbarsAutoHideScroll = scrollbarsAutoHide === 's';\r\n                    _scrollbarsAutoHideMove = scrollbarsAutoHide === 'm';\r\n                    _scrollbarsAutoHideLeave = scrollbarsAutoHide === 'l';\r\n\r\n                    //scrollbars autoHideDelay\r\n                    _scrollbarsAutoHideDelay = currentPreparedOptionsScrollbars.autoHideDelay;\r\n\r\n                    //old className\r\n                    _oldClassName = _classNameCache;\r\n\r\n                    //resize\r\n                    _resizeNone = resize === 'n';\r\n                    _resizeBoth = resize === 'b';\r\n                    _resizeHorizontal = resize === 'h';\r\n                    _resizeVertical = resize === 'v';\r\n\r\n                    //normalizeRTL\r\n                    _normalizeRTLCache = _currentPreparedOptions.normalizeRTL;\r\n\r\n                    //ignore overlay scrollbar hiding\r\n                    ignoreOverlayScrollbarHiding = ignoreOverlayScrollbarHiding && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y);\r\n\r\n                    //refresh options cache\r\n                    _scrollbarsVisibilityCache = scrollbarsVisibility;\r\n                    _scrollbarsAutoHideCache = scrollbarsAutoHide;\r\n                    _scrollbarsClickScrollingCache = scrollbarsClickScrolling;\r\n                    _scrollbarsDragScrollingCache = scrollbarsDragScrolling;\r\n                    _classNameCache = className;\r\n                    _resizeCache = resize;\r\n                    _paddingAbsoluteCache = paddingAbsolute;\r\n                    _clipAlwaysCache = clipAlways;\r\n                    _sizeAutoCapableCache = sizeAutoCapable;\r\n                    _ignoreOverlayScrollbarHidingCache = ignoreOverlayScrollbarHiding;\r\n                    _autoUpdateCache = autoUpdate;\r\n                    _overflowBehaviorCache = extendDeep({}, overflowBehavior);\r\n                    _textareaDynWidthCache = textareaDynWidth;\r\n                    _textareaDynHeightCache = textareaDynHeight;\r\n                    _hasOverflowCache = _hasOverflowCache || { x: false, y: false };\r\n\r\n                    //set correct class name to the host element\r\n                    if (classNameChanged) {\r\n                        removeClass(_hostElement, _oldClassName + _strSpace + _classNameThemeNone);\r\n                        addClass(_hostElement, className !== undefined && className !== null && className.length > 0 ? className : _classNameThemeNone);\r\n                    }\r\n\r\n                    //set correct auto Update\r\n                    if (autoUpdateChanged) {\r\n                        if (autoUpdate === true || (autoUpdate === null && _autoUpdateRecommended)) {\r\n                            disconnectMutationObservers();\r\n                            autoUpdateLoop.add(_base);\r\n                        }\r\n                        else {\r\n                            autoUpdateLoop.remove(_base);\r\n                            connectMutationObservers();\r\n                        }\r\n                    }\r\n\r\n                    //activate or deactivate size auto capability\r\n                    if (sizeAutoCapableChanged) {\r\n                        if (sizeAutoCapable) {\r\n                            if (_contentGlueElement) {\r\n                                _contentGlueElement.show();\r\n                            }\r\n                            else {\r\n                                _contentGlueElement = FRAMEWORK(generateDiv(_classNameContentGlueElement));\r\n                                _paddingElement.before(_contentGlueElement);\r\n                            }\r\n                            if (_sizeAutoObserverAdded) {\r\n                                _sizeAutoObserverElement.show();\r\n                            }\r\n                            else {\r\n                                _sizeAutoObserverElement = FRAMEWORK(generateDiv(_classNameSizeAutoObserverElement));\r\n                                _sizeAutoObserverElementNative = _sizeAutoObserverElement[0];\r\n\r\n                                _contentGlueElement.before(_sizeAutoObserverElement);\r\n                                var oldSize = { w: -1, h: -1 };\r\n                                setupResizeObserver(_sizeAutoObserverElement, function () {\r\n                                    var newSize = {\r\n                                        w: _sizeAutoObserverElementNative[LEXICON.oW],\r\n                                        h: _sizeAutoObserverElementNative[LEXICON.oH]\r\n                                    };\r\n                                    if (checkCache(newSize, oldSize)) {\r\n                                        if (_initialized && (_heightAutoCache && newSize.h > 0) || (_widthAutoCache && newSize.w > 0)) {\r\n                                            update();\r\n                                        }\r\n                                        else if (_initialized && (!_heightAutoCache && newSize.h === 0) || (!_widthAutoCache && newSize.w === 0)) {\r\n                                            update();\r\n                                        }\r\n                                    }\r\n                                    oldSize = newSize;\r\n                                });\r\n                                _sizeAutoObserverAdded = true;\r\n                                //fix heightAuto detector bug if height is fixed but contentHeight is 0.\r\n                                //the probability this bug will ever happen is very very low, thats why its ok if we use calc which isn't supported in IE8.\r\n                                if (_cssCalc !== null)\r\n                                    _sizeAutoObserverElement.css(_strHeight, _cssCalc + '(100% + 1px)');\r\n                            }\r\n                        }\r\n                        else {\r\n                            if (_sizeAutoObserverAdded)\r\n                                _sizeAutoObserverElement.hide();\r\n                            if (_contentGlueElement)\r\n                                _contentGlueElement.hide();\r\n                        }\r\n                    }\r\n\r\n                    //if force, update all resizeObservers too\r\n                    if (force) {\r\n                        _sizeObserverElement.find('*').trigger(_strScroll);\r\n                        if (_sizeAutoObserverAdded)\r\n                            _sizeAutoObserverElement.find('*').trigger(_strScroll);\r\n                    }\r\n\r\n                    //display hidden:\r\n                    displayIsHidden = displayIsHidden === undefined ? _hostElement.is(':hidden') : displayIsHidden;\r\n\r\n                    //textarea AutoWrapping:\r\n                    var textareaAutoWrapping = _isTextarea ? _targetElement.attr('wrap') !== 'off' : false;\r\n                    var textareaAutoWrappingChanged = checkCacheAutoForce(textareaAutoWrapping, _textareaAutoWrappingCache);\r\n\r\n                    //detect direction:\r\n                    var cssDirection = _hostElement.css('direction');\r\n                    var cssDirectionChanged = checkCacheAutoForce(cssDirection, _cssDirectionCache);\r\n\r\n                    //detect box-sizing:\r\n                    var boxSizing = _hostElement.css('box-sizing');\r\n                    var boxSizingChanged = checkCacheAutoForce(boxSizing, _cssBoxSizingCache);\r\n\r\n                    //detect padding:\r\n                    var padding = getTopRightBottomLeftHost(_strPaddingMinus);\r\n\r\n                    //width + height auto detecting var:\r\n                    var sizeAutoObserverElementBCRect;\r\n                    //exception occurs in IE8 sometimes (unknown exception)\r\n                    try {\r\n                        sizeAutoObserverElementBCRect = _sizeAutoObserverAdded ? _sizeAutoObserverElementNative[LEXICON.bCR]() : null;\r\n                    } catch (ex) {\r\n                        return;\r\n                    }\r\n\r\n                    _isRTL = cssDirection === 'rtl';\r\n                    _isBorderBox = (boxSizing === 'border-box');\r\n                    var isRTLLeft = _isRTL ? _strLeft : _strRight;\r\n                    var isRTLRight = _isRTL ? _strRight : _strLeft;\r\n\r\n                    //detect width auto:\r\n                    var widthAutoResizeDetection = false;\r\n                    var widthAutoObserverDetection = (_sizeAutoObserverAdded && (_hostElement.css(_strFloat) !== 'none' /*|| _isTextarea */)) ? (MATH.round(sizeAutoObserverElementBCRect.right - sizeAutoObserverElementBCRect.left) === 0) && (!paddingAbsolute ? (_hostElementNative[LEXICON.cW] - _paddingX) > 0 : true) : false;\r\n                    if (sizeAutoCapable && !widthAutoObserverDetection) {\r\n                        var tmpCurrHostWidth = _hostElementNative[LEXICON.oW];\r\n                        var tmpCurrContentGlueWidth = _contentGlueElement.css(_strWidth);\r\n                        _contentGlueElement.css(_strWidth, _strAuto);\r\n\r\n                        var tmpNewHostWidth = _hostElementNative[LEXICON.oW];\r\n                        _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\r\n                        widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\r\n                        if (!widthAutoResizeDetection) {\r\n                            _contentGlueElement.css(_strWidth, tmpCurrHostWidth + 1);\r\n                            tmpNewHostWidth = _hostElementNative[LEXICON.oW];\r\n                            _contentGlueElement.css(_strWidth, tmpCurrContentGlueWidth);\r\n                            widthAutoResizeDetection = tmpCurrHostWidth !== tmpNewHostWidth;\r\n                        }\r\n                    }\r\n                    var widthAuto = (widthAutoObserverDetection || widthAutoResizeDetection) && sizeAutoCapable && !displayIsHidden;\r\n                    var widthAutoChanged = checkCacheAutoForce(widthAuto, _widthAutoCache);\r\n                    var wasWidthAuto = !widthAuto && _widthAutoCache;\r\n\r\n                    //detect height auto:\r\n                    var heightAuto = _sizeAutoObserverAdded && sizeAutoCapable && !displayIsHidden ? (MATH.round(sizeAutoObserverElementBCRect.bottom - sizeAutoObserverElementBCRect.top) === 0) /* && (!paddingAbsolute && (_msieVersion > 9 || !_msieVersion) ? true : true) */ : false;\r\n                    var heightAutoChanged = checkCacheAutoForce(heightAuto, _heightAutoCache);\r\n                    var wasHeightAuto = !heightAuto && _heightAutoCache;\r\n\r\n                    //detect border:\r\n                    //we need the border only if border box and auto size\r\n                    var updateBorderX = (widthAuto && _isBorderBox) || !_isBorderBox;\r\n                    var updateBorderY = (heightAuto && _isBorderBox) || !_isBorderBox;\r\n                    var border = getTopRightBottomLeftHost(_strBorderMinus, '-' + _strWidth, !updateBorderX, !updateBorderY)\r\n\r\n                    //detect margin:\r\n                    var margin = getTopRightBottomLeftHost(_strMarginMinus);\r\n\r\n                    //vars to apply correct css\r\n                    var contentElementCSS = {};\r\n                    var contentGlueElementCSS = {};\r\n\r\n                    //funcs\r\n                    var getHostSize = function () {\r\n                        //has to be clientSize because offsetSize respect borders\r\n                        return {\r\n                            w: _hostElementNative[LEXICON.cW],\r\n                            h: _hostElementNative[LEXICON.cH]\r\n                        };\r\n                    };\r\n                    var getViewportSize = function () {\r\n                        //viewport size is padding container because it never has padding, margin and a border\r\n                        //determine zoom rounding error -> sometimes scrollWidth/Height is smaller than clientWidth/Height\r\n                        //if this happens add the difference to the viewportSize to compensate the rounding error\r\n                        return {\r\n                            w: _paddingElementNative[LEXICON.oW] + MATH.max(0, _contentElementNative[LEXICON.cW] - _contentElementNative[LEXICON.sW]),\r\n                            h: _paddingElementNative[LEXICON.oH] + MATH.max(0, _contentElementNative[LEXICON.cH] - _contentElementNative[LEXICON.sH])\r\n                        };\r\n                    };\r\n\r\n                    //set info for padding\r\n                    var paddingAbsoluteX = _paddingX = padding.l + padding.r;\r\n                    var paddingAbsoluteY = _paddingY = padding.t + padding.b;\r\n                    paddingAbsoluteX *= paddingAbsolute ? 1 : 0;\r\n                    paddingAbsoluteY *= paddingAbsolute ? 1 : 0;\r\n                    padding.c = checkCacheAutoForce(padding, _cssPaddingCache);\r\n\r\n                    //set info for border\r\n                    _borderX = border.l + border.r;\r\n                    _borderY = border.t + border.b;\r\n                    border.c = checkCacheAutoForce(border, _cssBorderCache);\r\n\r\n                    //set info for margin\r\n                    _marginX = margin.l + margin.r;\r\n                    _marginY = margin.t + margin.b;\r\n                    margin.c = checkCacheAutoForce(margin, _cssMarginCache);\r\n\r\n                    //refresh cache\r\n                    _textareaAutoWrappingCache = textareaAutoWrapping;\r\n                    _cssDirectionCache = cssDirection;\r\n                    _cssBoxSizingCache = boxSizing;\r\n                    _widthAutoCache = widthAuto;\r\n                    _heightAutoCache = heightAuto;\r\n                    _cssPaddingCache = padding;\r\n                    _cssBorderCache = border;\r\n                    _cssMarginCache = margin;\r\n\r\n                    //IEFix direction changed\r\n                    if (cssDirectionChanged && _sizeAutoObserverAdded)\r\n                        _sizeAutoObserverElement.css(_strFloat, isRTLRight);\r\n\r\n                    //apply padding:\r\n                    if (padding.c || cssDirectionChanged || paddingAbsoluteChanged || widthAutoChanged || heightAutoChanged || boxSizingChanged || sizeAutoCapableChanged) {\r\n                        var paddingElementCSS = {};\r\n                        var textareaCSS = {};\r\n                        var paddingValues = [padding.t, padding.r, padding.b, padding.l];\r\n\r\n                        setTopRightBottomLeft(contentGlueElementCSS, _strMarginMinus, [-padding.t, -padding.r, -padding.b, -padding.l]);\r\n                        if (paddingAbsolute) {\r\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty, paddingValues);\r\n                            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus);\r\n                        }\r\n                        else {\r\n                            setTopRightBottomLeft(paddingElementCSS, _strEmpty);\r\n                            setTopRightBottomLeft(_isTextarea ? textareaCSS : contentElementCSS, _strPaddingMinus, paddingValues);\r\n                        }\r\n\r\n                        _paddingElement.css(paddingElementCSS);\r\n                        _targetElement.css(textareaCSS);\r\n                    }\r\n\r\n                    //viewport size is padding container because it never has padding, margin and a border.\r\n                    _viewportSize = getViewportSize();\r\n\r\n                    //update Textarea\r\n                    var textareaSize = _isTextarea ? textareaUpdate() : false;\r\n                    var textareaSizeChanged = _isTextarea && checkCacheAutoForce(textareaSize, _textareaSizeCache);\r\n                    var textareaDynOrigSize = _isTextarea && textareaSize ? {\r\n                        w: textareaDynWidth ? textareaSize._dynamicWidth : textareaSize._originalWidth,\r\n                        h: textareaDynHeight ? textareaSize._dynamicHeight : textareaSize._originalHeight\r\n                    } : {};\r\n                    _textareaSizeCache = textareaSize;\r\n\r\n                    //fix height auto / width auto in cooperation with current padding & boxSizing behavior:\r\n                    if (heightAuto && (heightAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c)) {\r\n                        contentElementCSS[_strHeight] = _strAuto;\r\n                    }\r\n                    else if (heightAutoChanged || paddingAbsoluteChanged) {\r\n                        contentElementCSS[_strHeight] = _strHundredPercent;\r\n                    }\r\n                    if (widthAuto && (widthAutoChanged || paddingAbsoluteChanged || boxSizingChanged || padding.c || border.c || cssDirectionChanged)) {\r\n                        contentElementCSS[_strWidth] = _strAuto;\r\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strHundredPercent; //IE Fix\r\n                    }\r\n                    else if (widthAutoChanged || paddingAbsoluteChanged) {\r\n                        contentElementCSS[_strWidth] = _strHundredPercent;\r\n                        contentElementCSS[_strFloat] = _strEmpty;\r\n                        contentGlueElementCSS[_strMaxMinus + _strWidth] = _strEmpty; //IE Fix\r\n                    }\r\n                    if (widthAuto) {\r\n                        //textareaDynOrigSize.w || _strAuto :: doesnt works because applied margin will shift width\r\n                        contentGlueElementCSS[_strWidth] = _strAuto;\r\n\r\n                        contentElementCSS[_strWidth] = VENDORS._cssPropertyValue(_strWidth, 'max-content intrinsic') || _strAuto;\r\n                        contentElementCSS[_strFloat] = isRTLRight;\r\n                    }\r\n                    else {\r\n                        contentGlueElementCSS[_strWidth] = _strEmpty;\r\n                    }\r\n                    if (heightAuto) {\r\n                        //textareaDynOrigSize.h || _contentElementNative[LEXICON.cH] :: use for anti scroll jumping\r\n                        contentGlueElementCSS[_strHeight] = textareaDynOrigSize.h || _contentElementNative[LEXICON.cH];\r\n                    }\r\n                    else {\r\n                        contentGlueElementCSS[_strHeight] = _strEmpty;\r\n                    }\r\n                    if (sizeAutoCapable)\r\n                        _contentGlueElement.css(contentGlueElementCSS);\r\n                    _contentElement.css(contentElementCSS);\r\n\r\n                    //CHECKPOINT HERE ~\r\n                    contentElementCSS = {};\r\n                    contentGlueElementCSS = {};\r\n\r\n                    //if [content(host) client / scroll size, or target element direction, or content(host) max-sizes] changed, or force is true\r\n                    if (hostSizeChanged || contentSizeChanged || textareaSizeChanged || cssDirectionChanged || boxSizingChanged || paddingAbsoluteChanged || widthAutoChanged || widthAuto || heightAutoChanged || heightAuto || ignoreOverlayScrollbarHidingChanged || overflowBehaviorChanged || clipAlwaysChanged || resizeChanged || scrollbarsVisibilityChanged || scrollbarsAutoHideChanged || scrollbarsDragScrollingChanged || scrollbarsClickScrollingChanged || textareaDynWidthChanged || textareaDynHeightChanged || textareaAutoWrappingChanged) {\r\n                        var strOverflow = 'overflow';\r\n                        var strOverflowX = strOverflow + '-x';\r\n                        var strOverflowY = strOverflow + '-y';\r\n                        var strHidden = 'hidden';\r\n                        var strVisible = 'visible';\r\n\r\n                        //Reset the viewport (very important for natively overlaid scrollbars and zoom change\r\n                        //don't change the overflow prop as it is very expensive and affects performance !A LOT!\r\n                        if (!_nativeScrollbarStyling) {\r\n                            var viewportElementResetCSS = {};\r\n                            var resetXTmp = _hasOverflowCache.y && _hideOverflowCache.ys && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.y ? _viewportElement.css(isRTLLeft) : -_nativeScrollbarSize.y) : 0;\r\n                            var resetBottomTmp = _hasOverflowCache.x && _hideOverflowCache.xs && !ignoreOverlayScrollbarHiding ? (_nativeScrollbarIsOverlaid.x ? _viewportElement.css(_strBottom) : -_nativeScrollbarSize.x) : 0;\r\n                            setTopRightBottomLeft(viewportElementResetCSS, _strEmpty);\r\n                            _viewportElement.css(viewportElementResetCSS);\r\n                        }\r\n\r\n                        //measure several sizes:\r\n                        var contentMeasureElement = getContentMeasureElement();\r\n                        //in Firefox content element has to have overflow hidden, else element margins aren't calculated properly, this element prevents this bug, but only if scrollbars aren't overlaid\r\n                        var contentSize = {\r\n                            //use clientSize because natively overlaidScrollbars add borders\r\n                            w: textareaDynOrigSize.w || contentMeasureElement[LEXICON.cW],\r\n                            h: textareaDynOrigSize.h || contentMeasureElement[LEXICON.cH]\r\n                        };\r\n                        var scrollSize = {\r\n                            w: contentMeasureElement[LEXICON.sW],\r\n                            h: contentMeasureElement[LEXICON.sH]\r\n                        };\r\n\r\n                        //apply the correct viewport style and measure viewport size\r\n                        if (!_nativeScrollbarStyling) {\r\n                            viewportElementResetCSS[_strBottom] = wasHeightAuto ? _strEmpty : resetBottomTmp;\r\n                            viewportElementResetCSS[isRTLLeft] = wasWidthAuto ? _strEmpty : resetXTmp;\r\n                            _viewportElement.css(viewportElementResetCSS);\r\n                        }\r\n                        _viewportSize = getViewportSize();\r\n\r\n                        //measure and correct several sizes\r\n                        var hostSize = getHostSize();\r\n                        var hostAbsoluteRectSize = {\r\n                            w: hostSize.w - _marginX - _borderX - (_isBorderBox ? 0 : _paddingX),\r\n                            h: hostSize.h - _marginY - _borderY - (_isBorderBox ? 0 : _paddingY)\r\n                        };\r\n                        var contentGlueSize = {\r\n                            //client/scrollSize + AbsolutePadding -> because padding is only applied to the paddingElement if its absolute, so you have to add it manually\r\n                            //hostSize is clientSize -> so padding should be added manually, right? FALSE! Because content glue is inside hostElement, so we don't have to worry about padding\r\n                            w: MATH.max((widthAuto ? contentSize.w : scrollSize.w) + paddingAbsoluteX, hostAbsoluteRectSize.w),\r\n                            h: MATH.max((heightAuto ? contentSize.h : scrollSize.h) + paddingAbsoluteY, hostAbsoluteRectSize.h)\r\n                        };\r\n                        contentGlueSize.c = checkCacheAutoForce(contentGlueSize, _contentGlueSizeCache);\r\n                        _contentGlueSizeCache = contentGlueSize;\r\n\r\n                        //apply correct contentGlue size\r\n                        if (sizeAutoCapable) {\r\n                            //size contentGlue correctly to make sure the element has correct size if the sizing switches to auto\r\n                            if (contentGlueSize.c || (heightAuto || widthAuto)) {\r\n                                contentGlueElementCSS[_strWidth] = contentGlueSize.w;\r\n                                contentGlueElementCSS[_strHeight] = contentGlueSize.h;\r\n\r\n                                //textarea-sizes are already calculated correctly at this point\r\n                                if (!_isTextarea) {\r\n                                    contentSize = {\r\n                                        //use clientSize because natively overlaidScrollbars add borders\r\n                                        w: contentMeasureElement[LEXICON.cW],\r\n                                        h: contentMeasureElement[LEXICON.cH]\r\n                                    };\r\n                                }\r\n                            }\r\n                            var textareaCoverCSS = {};\r\n                            var setContentGlueElementCSSfunction = function (horizontal) {\r\n                                var scrollbarVars = getScrollbarVars(horizontal);\r\n                                var wh = scrollbarVars._w_h;\r\n                                var strWH = scrollbarVars._width_height;\r\n                                var autoSize = horizontal ? widthAuto : heightAuto;\r\n                                var borderSize = horizontal ? _borderX : _borderY;\r\n                                var paddingSize = horizontal ? _paddingX : _paddingY;\r\n                                var marginSize = horizontal ? _marginX : _marginY;\r\n                                var viewportSize = _viewportSize[wh] - borderSize - marginSize - (_isBorderBox ? 0 : paddingSize);\r\n\r\n                                //make contentGlue size -1 if element is not auto sized, to make sure that a resize event happens when the element shrinks\r\n                                if (!autoSize || (!autoSize && border.c))\r\n                                    contentGlueElementCSS[strWH] = hostAbsoluteRectSize[wh] - 1;\r\n\r\n                                //if size is auto and host is smaller than size as min size, make content glue size -1 to make sure size changes will be detected (this is only needed if padding is 0)\r\n                                if (autoSize && (contentSize[wh] < viewportSize) && (horizontal && _isTextarea ? !textareaAutoWrapping : true)) {\r\n                                    if (_isTextarea)\r\n                                        textareaCoverCSS[strWH] = parseToZeroOrNumber(_textareaCoverElement.css(strWH)) - 1;\r\n                                    contentGlueElementCSS[strWH] -= 1;\r\n                                }\r\n\r\n                                //make sure content glue size is at least 1\r\n                                if (contentSize[wh] > 0)\r\n                                    contentGlueElementCSS[strWH] = MATH.max(1, contentGlueElementCSS[strWH]);\r\n                            };\r\n                            setContentGlueElementCSSfunction(true);\r\n                            setContentGlueElementCSSfunction(false);\r\n\r\n                            if (_isTextarea)\r\n                                _textareaCoverElement.css(textareaCoverCSS);\r\n                            _contentGlueElement.css(contentGlueElementCSS);\r\n                        }\r\n                        if (widthAuto)\r\n                            contentElementCSS[_strWidth] = _strHundredPercent;\r\n                        if (widthAuto && !_isBorderBox && !_mutationObserversConnected)\r\n                            contentElementCSS[_strFloat] = 'none';\r\n\r\n                        //apply and reset content style\r\n                        _contentElement.css(contentElementCSS);\r\n                        contentElementCSS = {};\r\n\r\n                        //measure again, but this time all correct sizes:\r\n                        var contentScrollSize = {\r\n                            w: contentMeasureElement[LEXICON.sW],\r\n                            h: contentMeasureElement[LEXICON.sH],\r\n                        };\r\n                        contentScrollSize.c = contentSizeChanged = checkCacheAutoForce(contentScrollSize, _contentScrollSizeCache);\r\n                        _contentScrollSizeCache = contentScrollSize;\r\n\r\n                        //refresh viewport size after correct measuring\r\n                        _viewportSize = getViewportSize();\r\n\r\n                        hostSize = getHostSize();\r\n                        hostSizeChanged = checkCacheAutoForce(hostSize, _hostSizeCache);\r\n                        _hostSizeCache = hostSize;\r\n\r\n                        var hideOverflowForceTextarea = _isTextarea && (_viewportSize.w === 0 || _viewportSize.h === 0);\r\n                        var previousOverflowAmount = _overflowAmountCache;\r\n                        var overflowBehaviorIsVS = {};\r\n                        var overflowBehaviorIsVH = {};\r\n                        var overflowBehaviorIsS = {};\r\n                        var overflowAmount = {};\r\n                        var hasOverflow = {};\r\n                        var hideOverflow = {};\r\n                        var canScroll = {};\r\n                        var viewportRect = _paddingElementNative[LEXICON.bCR]();\r\n                        var setOverflowVariables = function (horizontal) {\r\n                            var scrollbarVars = getScrollbarVars(horizontal);\r\n                            var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                            var xyI = scrollbarVarsInverted._x_y;\r\n                            var xy = scrollbarVars._x_y;\r\n                            var wh = scrollbarVars._w_h;\r\n                            var widthHeight = scrollbarVars._width_height;\r\n                            var scrollMax = _strScroll + scrollbarVars._Left_Top + 'Max';\r\n                            var fractionalOverflowAmount = viewportRect[widthHeight] ? MATH.abs(viewportRect[widthHeight] - _viewportSize[wh]) : 0;\r\n                            var checkFractionalOverflowAmount = previousOverflowAmount && previousOverflowAmount[xy] > 0 && _viewportElementNative[scrollMax] === 0;\r\n                            overflowBehaviorIsVS[xy] = overflowBehavior[xy] === 'v-s';\r\n                            overflowBehaviorIsVH[xy] = overflowBehavior[xy] === 'v-h';\r\n                            overflowBehaviorIsS[xy] = overflowBehavior[xy] === 's';\r\n                            overflowAmount[xy] = MATH.max(0, MATH.round((contentScrollSize[wh] - _viewportSize[wh]) * 100) / 100);\r\n                            overflowAmount[xy] *= (hideOverflowForceTextarea || (checkFractionalOverflowAmount && fractionalOverflowAmount > 0 && fractionalOverflowAmount < 1)) ? 0 : 1;\r\n                            hasOverflow[xy] = overflowAmount[xy] > 0;\r\n\r\n                            //hideOverflow:\r\n                            //x || y : true === overflow is hidden by \"overflow: scroll\" OR \"overflow: hidden\"\r\n                            //xs || ys : true === overflow is hidden by \"overflow: scroll\"\r\n                            hideOverflow[xy] = overflowBehaviorIsVS[xy] || overflowBehaviorIsVH[xy] ? (hasOverflow[xyI] && !overflowBehaviorIsVS[xyI] && !overflowBehaviorIsVH[xyI]) : hasOverflow[xy];\r\n                            hideOverflow[xy + 's'] = hideOverflow[xy] ? (overflowBehaviorIsS[xy] || overflowBehaviorIsVS[xy]) : false;\r\n\r\n                            canScroll[xy] = hasOverflow[xy] && hideOverflow[xy + 's'];\r\n                        };\r\n                        setOverflowVariables(true);\r\n                        setOverflowVariables(false);\r\n\r\n                        overflowAmount.c = checkCacheAutoForce(overflowAmount, _overflowAmountCache);\r\n                        _overflowAmountCache = overflowAmount;\r\n                        hasOverflow.c = checkCacheAutoForce(hasOverflow, _hasOverflowCache);\r\n                        _hasOverflowCache = hasOverflow;\r\n                        hideOverflow.c = checkCacheAutoForce(hideOverflow, _hideOverflowCache);\r\n                        _hideOverflowCache = hideOverflow;\r\n\r\n                        //if native scrollbar is overlay at x OR y axis, prepare DOM\r\n                        if (_nativeScrollbarIsOverlaid.x || _nativeScrollbarIsOverlaid.y) {\r\n                            var borderDesign = 'px solid transparent';\r\n                            var contentArrangeElementCSS = {};\r\n                            var arrangeContent = {};\r\n                            var arrangeChanged = force;\r\n                            var setContentElementCSS;\r\n\r\n                            if (hasOverflow.x || hasOverflow.y) {\r\n                                arrangeContent.w = _nativeScrollbarIsOverlaid.y && hasOverflow.y ? contentScrollSize.w + _overlayScrollbarDummySize.y : _strEmpty;\r\n                                arrangeContent.h = _nativeScrollbarIsOverlaid.x && hasOverflow.x ? contentScrollSize.h + _overlayScrollbarDummySize.x : _strEmpty;\r\n                                arrangeChanged = checkCacheAutoForce(arrangeContent, _arrangeContentSizeCache);\r\n                                _arrangeContentSizeCache = arrangeContent;\r\n                            }\r\n\r\n                            if (hasOverflow.c || hideOverflow.c || contentScrollSize.c || cssDirectionChanged || widthAutoChanged || heightAutoChanged || widthAuto || heightAuto || ignoreOverlayScrollbarHidingChanged) {\r\n                                contentElementCSS[_strMarginMinus + isRTLRight] = contentElementCSS[_strBorderMinus + isRTLRight] = _strEmpty;\r\n                                setContentElementCSS = function (horizontal) {\r\n                                    var scrollbarVars = getScrollbarVars(horizontal);\r\n                                    var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                                    var xy = scrollbarVars._x_y;\r\n                                    var strDirection = horizontal ? _strBottom : isRTLLeft;\r\n                                    var invertedAutoSize = horizontal ? heightAuto : widthAuto;\r\n\r\n                                    if (_nativeScrollbarIsOverlaid[xy] && hasOverflow[xy] && hideOverflow[xy + 's']) {\r\n                                        contentElementCSS[_strMarginMinus + strDirection] = invertedAutoSize ? (ignoreOverlayScrollbarHiding ? _strEmpty : _overlayScrollbarDummySize[xy]) : _strEmpty;\r\n                                        contentElementCSS[_strBorderMinus + strDirection] = ((horizontal ? !invertedAutoSize : true) && !ignoreOverlayScrollbarHiding) ? (_overlayScrollbarDummySize[xy] + borderDesign) : _strEmpty;\r\n                                    }\r\n                                    else {\r\n                                        arrangeContent[scrollbarVarsInverted._w_h] =\r\n                                            contentElementCSS[_strMarginMinus + strDirection] =\r\n                                            contentElementCSS[_strBorderMinus + strDirection] = _strEmpty;\r\n                                        arrangeChanged = true;\r\n                                    }\r\n                                };\r\n\r\n                                if (_nativeScrollbarStyling) {\r\n                                    addRemoveClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible, !ignoreOverlayScrollbarHiding)\r\n                                }\r\n                                else {\r\n                                    setContentElementCSS(true);\r\n                                    setContentElementCSS(false);\r\n                                }\r\n                            }\r\n                            if (ignoreOverlayScrollbarHiding) {\r\n                                arrangeContent.w = arrangeContent.h = _strEmpty;\r\n                                arrangeChanged = true;\r\n                            }\r\n                            if (arrangeChanged && !_nativeScrollbarStyling) {\r\n                                contentArrangeElementCSS[_strWidth] = hideOverflow.y ? arrangeContent.w : _strEmpty;\r\n                                contentArrangeElementCSS[_strHeight] = hideOverflow.x ? arrangeContent.h : _strEmpty;\r\n\r\n                                if (!_contentArrangeElement) {\r\n                                    _contentArrangeElement = FRAMEWORK(generateDiv(_classNameContentArrangeElement));\r\n                                    _viewportElement.prepend(_contentArrangeElement);\r\n                                }\r\n                                _contentArrangeElement.css(contentArrangeElementCSS);\r\n                            }\r\n                            _contentElement.css(contentElementCSS);\r\n                        }\r\n\r\n                        var viewportElementCSS = {};\r\n                        var paddingElementCSS = {};\r\n                        var setViewportCSS;\r\n                        if (hostSizeChanged || hasOverflow.c || hideOverflow.c || contentScrollSize.c || overflowBehaviorChanged || boxSizingChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged || clipAlwaysChanged || heightAutoChanged) {\r\n                            viewportElementCSS[isRTLRight] = _strEmpty;\r\n                            setViewportCSS = function (horizontal) {\r\n                                var scrollbarVars = getScrollbarVars(horizontal);\r\n                                var scrollbarVarsInverted = getScrollbarVars(!horizontal);\r\n                                var xy = scrollbarVars._x_y;\r\n                                var XY = scrollbarVars._X_Y;\r\n                                var strDirection = horizontal ? _strBottom : isRTLLeft;\r\n\r\n                                var reset = function () {\r\n                                    viewportElementCSS[strDirection] = _strEmpty;\r\n                                    _contentBorderSize[scrollbarVarsInverted._w_h] = 0;\r\n                                };\r\n                                if (hasOverflow[xy] && hideOverflow[xy + 's']) {\r\n                                    viewportElementCSS[strOverflow + XY] = _strScroll;\r\n                                    if (ignoreOverlayScrollbarHiding || _nativeScrollbarStyling) {\r\n                                        reset();\r\n                                    }\r\n                                    else {\r\n                                        viewportElementCSS[strDirection] = -(_nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[xy] : _nativeScrollbarSize[xy]);\r\n                                        _contentBorderSize[scrollbarVarsInverted._w_h] = _nativeScrollbarIsOverlaid[xy] ? _overlayScrollbarDummySize[scrollbarVarsInverted._x_y] : 0;\r\n                                    }\r\n                                } else {\r\n                                    viewportElementCSS[strOverflow + XY] = _strEmpty;\r\n                                    reset();\r\n                                }\r\n                            };\r\n                            setViewportCSS(true);\r\n                            setViewportCSS(false);\r\n\r\n                            // if the scroll container is too small and if there is any overflow with no overlay scrollbar (and scrollbar styling isn't possible), \r\n                            // make viewport element greater in size (Firefox hide Scrollbars fix)\r\n                            // because firefox starts hiding scrollbars on too small elements\r\n                            // with this behavior the overflow calculation may be incorrect or the scrollbars would appear suddenly\r\n                            // https://bugzilla.mozilla.org/show_bug.cgi?id=292284\r\n                            if (!_nativeScrollbarStyling\r\n                                && (_viewportSize.h < _nativeScrollbarMinSize.x || _viewportSize.w < _nativeScrollbarMinSize.y)\r\n                                && ((hasOverflow.x && hideOverflow.x && !_nativeScrollbarIsOverlaid.x) || (hasOverflow.y && hideOverflow.y && !_nativeScrollbarIsOverlaid.y))) {\r\n                                viewportElementCSS[_strPaddingMinus + _strTop] = _nativeScrollbarMinSize.x;\r\n                                viewportElementCSS[_strMarginMinus + _strTop] = -_nativeScrollbarMinSize.x;\r\n\r\n                                viewportElementCSS[_strPaddingMinus + isRTLRight] = _nativeScrollbarMinSize.y;\r\n                                viewportElementCSS[_strMarginMinus + isRTLRight] = -_nativeScrollbarMinSize.y;\r\n                            }\r\n                            else {\r\n                                viewportElementCSS[_strPaddingMinus + _strTop] =\r\n                                    viewportElementCSS[_strMarginMinus + _strTop] =\r\n                                    viewportElementCSS[_strPaddingMinus + isRTLRight] =\r\n                                    viewportElementCSS[_strMarginMinus + isRTLRight] = _strEmpty;\r\n                            }\r\n                            viewportElementCSS[_strPaddingMinus + isRTLLeft] =\r\n                                viewportElementCSS[_strMarginMinus + isRTLLeft] = _strEmpty;\r\n\r\n                            //if there is any overflow (x OR y axis) and this overflow shall be hidden, make overflow hidden, else overflow visible\r\n                            if ((hasOverflow.x && hideOverflow.x) || (hasOverflow.y && hideOverflow.y) || hideOverflowForceTextarea) {\r\n                                //only hide if is Textarea\r\n                                if (_isTextarea && hideOverflowForceTextarea) {\r\n                                    paddingElementCSS[strOverflowX] =\r\n                                        paddingElementCSS[strOverflowY] = strHidden;\r\n                                }\r\n                            }\r\n                            else {\r\n                                if (!clipAlways || (overflowBehaviorIsVH.x || overflowBehaviorIsVS.x || overflowBehaviorIsVH.y || overflowBehaviorIsVS.y)) {\r\n                                    //only un-hide if Textarea\r\n                                    if (_isTextarea) {\r\n                                        paddingElementCSS[strOverflowX] =\r\n                                            paddingElementCSS[strOverflowY] = _strEmpty;\r\n                                    }\r\n                                    viewportElementCSS[strOverflowX] =\r\n                                        viewportElementCSS[strOverflowY] = strVisible;\r\n                                }\r\n                            }\r\n\r\n                            _paddingElement.css(paddingElementCSS);\r\n                            _viewportElement.css(viewportElementCSS);\r\n                            viewportElementCSS = {};\r\n\r\n                            //force soft redraw in webkit because without the scrollbars will may appear because DOM wont be redrawn under special conditions\r\n                            if ((hasOverflow.c || boxSizingChanged || widthAutoChanged || heightAutoChanged) && !(_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)) {\r\n                                var elementStyle = _contentElementNative[LEXICON.s];\r\n                                var dump;\r\n                                elementStyle.webkitTransform = 'scale(1)';\r\n                                elementStyle.display = 'run-in';\r\n                                dump = _contentElementNative[LEXICON.oH];\r\n                                elementStyle.display = _strEmpty; //|| dump; //use dump to prevent it from deletion if minify\r\n                                elementStyle.webkitTransform = _strEmpty;\r\n                            }\r\n                            /*\r\n                            //force hard redraw in webkit if native overlaid scrollbars shall appear\r\n                            if (ignoreOverlayScrollbarHidingChanged && ignoreOverlayScrollbarHiding) {\r\n                                _hostElement.hide();\r\n                                var dump = _hostElementNative[LEXICON.oH];\r\n                                _hostElement.show();\r\n                            }\r\n                            */\r\n                        }\r\n\r\n                        //change to direction RTL and width auto Bugfix in Webkit\r\n                        //without this fix, the DOM still thinks the scrollbar is LTR and thus the content is shifted to the left\r\n                        contentElementCSS = {};\r\n                        if (cssDirectionChanged || widthAutoChanged || heightAutoChanged) {\r\n                            if (_isRTL && widthAuto) {\r\n                                var floatTmp = _contentElement.css(_strFloat);\r\n                                var posLeftWithoutFloat = MATH.round(_contentElement.css(_strFloat, _strEmpty).css(_strLeft, _strEmpty).position().left);\r\n                                _contentElement.css(_strFloat, floatTmp);\r\n                                var posLeftWithFloat = MATH.round(_contentElement.position().left);\r\n\r\n                                if (posLeftWithoutFloat !== posLeftWithFloat)\r\n                                    contentElementCSS[_strLeft] = posLeftWithoutFloat;\r\n                            }\r\n                            else {\r\n                                contentElementCSS[_strLeft] = _strEmpty;\r\n                            }\r\n                        }\r\n                        _contentElement.css(contentElementCSS);\r\n\r\n                        //handle scroll position\r\n                        if (_isTextarea && contentSizeChanged) {\r\n                            var textareaInfo = getTextareaInfo();\r\n                            if (textareaInfo) {\r\n                                var textareaRowsChanged = _textareaInfoCache === undefined ? true : textareaInfo._rows !== _textareaInfoCache._rows;\r\n                                var cursorRow = textareaInfo._cursorRow;\r\n                                var cursorCol = textareaInfo._cursorColumn;\r\n                                var widestRow = textareaInfo._widestRow;\r\n                                var lastRow = textareaInfo._rows;\r\n                                var lastCol = textareaInfo._columns;\r\n                                var cursorPos = textareaInfo._cursorPosition;\r\n                                var cursorMax = textareaInfo._cursorMax;\r\n                                var cursorIsLastPosition = (cursorPos >= cursorMax && _textareaHasFocus);\r\n                                var textareaScrollAmount = {\r\n                                    x: (!textareaAutoWrapping && (cursorCol === lastCol && cursorRow === widestRow)) ? _overflowAmountCache.x : -1,\r\n                                    y: (textareaAutoWrapping ? cursorIsLastPosition || textareaRowsChanged && (previousOverflowAmount ? (currScroll.y === previousOverflowAmount.y) : false) : (cursorIsLastPosition || textareaRowsChanged) && cursorRow === lastRow) ? _overflowAmountCache.y : -1\r\n                                };\r\n                                currScroll.x = textareaScrollAmount.x > -1 ? (_isRTL && _normalizeRTLCache && _rtlScrollBehavior.i ? 0 : textareaScrollAmount.x) : currScroll.x; //if inverted, scroll to 0 -> normalized this means to max scroll offset.\r\n                                currScroll.y = textareaScrollAmount.y > -1 ? textareaScrollAmount.y : currScroll.y;\r\n                            }\r\n                            _textareaInfoCache = textareaInfo;\r\n                        }\r\n                        if (_isRTL && _rtlScrollBehavior.i && _nativeScrollbarIsOverlaid.y && hasOverflow.x && _normalizeRTLCache)\r\n                            currScroll.x += _contentBorderSize.w || 0;\r\n                        if (widthAuto)\r\n                            _hostElement[_strScrollLeft](0);\r\n                        if (heightAuto)\r\n                            _hostElement[_strScrollTop](0);\r\n                        _viewportElement[_strScrollLeft](currScroll.x)[_strScrollTop](currScroll.y);\r\n\r\n                        //scrollbars management:\r\n                        var scrollbarsVisibilityVisible = scrollbarsVisibility === 'v';\r\n                        var scrollbarsVisibilityHidden = scrollbarsVisibility === 'h';\r\n                        var scrollbarsVisibilityAuto = scrollbarsVisibility === 'a';\r\n                        var refreshScrollbarsVisibility = function (showX, showY) {\r\n                            showY = showY === undefined ? showX : showY;\r\n                            refreshScrollbarAppearance(true, showX, canScroll.x)\r\n                            refreshScrollbarAppearance(false, showY, canScroll.y)\r\n                        };\r\n\r\n                        //manage class name which indicates scrollable overflow\r\n                        addRemoveClass(_hostElement, _classNameHostOverflow, hideOverflow.x || hideOverflow.y);\r\n                        addRemoveClass(_hostElement, _classNameHostOverflowX, hideOverflow.x);\r\n                        addRemoveClass(_hostElement, _classNameHostOverflowY, hideOverflow.y);\r\n\r\n                        //add or remove rtl class name for styling purposes except when its body, then the scrollbar stays\r\n                        if (cssDirectionChanged && !_isBody) {\r\n                            addRemoveClass(_hostElement, _classNameHostRTL, _isRTL);\r\n                        }\r\n\r\n                        //manage the resize feature (CSS3 resize \"polyfill\" for this plugin)\r\n                        if (_isBody)\r\n                            addClass(_hostElement, _classNameHostResizeDisabled);\r\n                        if (resizeChanged) {\r\n                            addRemoveClass(_hostElement, _classNameHostResizeDisabled, _resizeNone);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResize, !_resizeNone);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeB, _resizeBoth);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeH, _resizeHorizontal);\r\n                            addRemoveClass(_scrollbarCornerElement, _classNameScrollbarCornerResizeV, _resizeVertical);\r\n                        }\r\n\r\n                        //manage the scrollbars general visibility + the scrollbar interactivity (unusable class name)\r\n                        if (scrollbarsVisibilityChanged || overflowBehaviorChanged || hideOverflow.c || hasOverflow.c || ignoreOverlayScrollbarHidingChanged) {\r\n                            if (ignoreOverlayScrollbarHiding) {\r\n                                if (ignoreOverlayScrollbarHidingChanged) {\r\n                                    removeClass(_hostElement, _classNameHostScrolling);\r\n                                    if (ignoreOverlayScrollbarHiding) {\r\n                                        refreshScrollbarsVisibility(false);\r\n                                    }\r\n                                }\r\n                            }\r\n                            else if (scrollbarsVisibilityAuto) {\r\n                                refreshScrollbarsVisibility(canScroll.x, canScroll.y);\r\n                            }\r\n                            else if (scrollbarsVisibilityVisible) {\r\n                                refreshScrollbarsVisibility(true);\r\n                            }\r\n                            else if (scrollbarsVisibilityHidden) {\r\n                                refreshScrollbarsVisibility(false);\r\n                            }\r\n                        }\r\n\r\n                        //manage the scrollbars auto hide feature (auto hide them after specific actions)\r\n                        if (scrollbarsAutoHideChanged || ignoreOverlayScrollbarHidingChanged) {\r\n                            setupHostMouseTouchEvents(!_scrollbarsAutoHideLeave && !_scrollbarsAutoHideMove);\r\n                            refreshScrollbarsAutoHide(_scrollbarsAutoHideNever, !_scrollbarsAutoHideNever);\r\n                        }\r\n\r\n                        //manage scrollbars handle length & offset - don't remove!\r\n                        if (hostSizeChanged || overflowAmount.c || heightAutoChanged || widthAutoChanged || resizeChanged || boxSizingChanged || paddingAbsoluteChanged || ignoreOverlayScrollbarHidingChanged || cssDirectionChanged) {\r\n                            refreshScrollbarHandleLength(true);\r\n                            refreshScrollbarHandleOffset(true);\r\n                            refreshScrollbarHandleLength(false);\r\n                            refreshScrollbarHandleOffset(false);\r\n                        }\r\n\r\n                        //manage interactivity\r\n                        if (scrollbarsClickScrollingChanged)\r\n                            refreshScrollbarsInteractive(true, scrollbarsClickScrolling);\r\n                        if (scrollbarsDragScrollingChanged)\r\n                            refreshScrollbarsInteractive(false, scrollbarsDragScrolling);\r\n\r\n                        //callbacks:\r\n                        dispatchCallback('onDirectionChanged', {\r\n                            isRTL: _isRTL,\r\n                            dir: cssDirection\r\n                        }, cssDirectionChanged);\r\n                        dispatchCallback('onHostSizeChanged', {\r\n                            width: _hostSizeCache.w,\r\n                            height: _hostSizeCache.h\r\n                        }, hostSizeChanged);\r\n                        dispatchCallback('onContentSizeChanged', {\r\n                            width: _contentScrollSizeCache.w,\r\n                            height: _contentScrollSizeCache.h\r\n                        }, contentSizeChanged);\r\n                        dispatchCallback('onOverflowChanged', {\r\n                            x: hasOverflow.x,\r\n                            y: hasOverflow.y,\r\n                            xScrollable: hideOverflow.xs,\r\n                            yScrollable: hideOverflow.ys,\r\n                            clipped: hideOverflow.x || hideOverflow.y\r\n                        }, hasOverflow.c || hideOverflow.c);\r\n                        dispatchCallback('onOverflowAmountChanged', {\r\n                            x: overflowAmount.x,\r\n                            y: overflowAmount.y\r\n                        }, overflowAmount.c);\r\n                    }\r\n\r\n                    //fix body min size\r\n                    if (_isBody && _bodyMinSizeCache && (_hasOverflowCache.c || _bodyMinSizeCache.c)) {\r\n                        //its possible that no min size was measured until now, because the content arrange element was just added now, in this case, measure now the min size.\r\n                        if (!_bodyMinSizeCache.f)\r\n                            bodyMinSizeChanged();\r\n                        if (_nativeScrollbarIsOverlaid.y && _hasOverflowCache.x)\r\n                            _contentElement.css(_strMinMinus + _strWidth, _bodyMinSizeCache.w + _overlayScrollbarDummySize.y);\r\n                        if (_nativeScrollbarIsOverlaid.x && _hasOverflowCache.y)\r\n                            _contentElement.css(_strMinMinus + _strHeight, _bodyMinSizeCache.h + _overlayScrollbarDummySize.x);\r\n                        _bodyMinSizeCache.c = false;\r\n                    }\r\n\r\n                    if (_initialized && changedOptions.updateOnLoad) {\r\n                        updateElementsOnLoad();\r\n                    }\r\n\r\n                    //freezeResizeObserver(_sizeObserverElement, false);\r\n                    //freezeResizeObserver(_sizeAutoObserverElement, false);\r\n\r\n                    dispatchCallback('onUpdated', { forced: force });\r\n                }\r\n\r\n                /**\r\n                 * Updates the found elements of which the load event shall be handled.\r\n                 */\r\n                function updateElementsOnLoad() {\r\n                    if (!_isTextarea) {\r\n                        eachUpdateOnLoad(function (i, updateOnLoadSelector) {\r\n                            _contentElement.find(updateOnLoadSelector).each(function (i, el) {\r\n                                // if element doesn't have a updateOnLoadCallback applied\r\n                                if (COMPATIBILITY.inA(el, _updateOnLoadElms) < 0) {\r\n                                    _updateOnLoadElms.push(el);\r\n                                    FRAMEWORK(el)\r\n                                        .off(_updateOnLoadEventName, updateOnLoadCallback)\r\n                                        .on(_updateOnLoadEventName, updateOnLoadCallback);\r\n                                }\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n\r\n                //==== Options ====//\r\n\r\n                /**\r\n                 * Sets new options but doesn't call the update method.\r\n                 * @param newOptions The object which contains the new options.\r\n                 * @returns {*} A object which contains the changed options.\r\n                 */\r\n                function setOptions(newOptions) {\r\n                    var validatedOpts = _pluginsOptions._validate(newOptions, _pluginsOptions._template, true, _currentOptions)\r\n\r\n                    _currentOptions = extendDeep({}, _currentOptions, validatedOpts._default);\r\n                    _currentPreparedOptions = extendDeep({}, _currentPreparedOptions, validatedOpts._prepared);\r\n\r\n                    return validatedOpts._prepared;\r\n                }\r\n\r\n\r\n                //==== Structure ====//\r\n\r\n                /**\r\n                 * Builds or destroys the wrapper and helper DOM elements.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                /**\r\n                 * Builds or destroys the wrapper and helper DOM elements.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupStructureDOM(destroy) {\r\n                    var strParent = 'parent';\r\n                    var classNameResizeObserverHost = 'os-resize-observer-host';\r\n                    var classNameTextareaElementFull = _classNameTextareaElement + _strSpace + _classNameTextInherit;\r\n                    var textareaClass = _isTextarea ? _strSpace + _classNameTextInherit : _strEmpty;\r\n                    var adoptAttrs = _currentPreparedOptions.textarea.inheritedAttrs;\r\n                    var adoptAttrsMap = {};\r\n                    var applyAdoptedAttrs = function () {\r\n                        var applyAdoptedAttrsElm = destroy ? _targetElement : _hostElement;\r\n                        each(adoptAttrsMap, function (key, value) {\r\n                            if (type(value) == TYPES.s) {\r\n                                if (key == LEXICON.c)\r\n                                    applyAdoptedAttrsElm.addClass(value);\r\n                                else\r\n                                    applyAdoptedAttrsElm.attr(key, value);\r\n                            }\r\n                        });\r\n                    };\r\n                    var hostElementClassNames = [\r\n                        _classNameHostElement,\r\n                        _classNameHostElementForeign,\r\n                        _classNameHostTextareaElement,\r\n                        _classNameHostResizeDisabled,\r\n                        _classNameHostRTL,\r\n                        _classNameHostScrollbarHorizontalHidden,\r\n                        _classNameHostScrollbarVerticalHidden,\r\n                        _classNameHostTransition,\r\n                        _classNameHostScrolling,\r\n                        _classNameHostOverflow,\r\n                        _classNameHostOverflowX,\r\n                        _classNameHostOverflowY,\r\n                        _classNameThemeNone,\r\n                        _classNameTextareaElement,\r\n                        _classNameTextInherit,\r\n                        _classNameCache].join(_strSpace);\r\n                    var hostElementCSS = {};\r\n\r\n                    //get host element as first element, because that's the most upper element and required for the other elements\r\n                    _hostElement = _hostElement || (_isTextarea ? (_domExists ? _targetElement[strParent]()[strParent]()[strParent]()[strParent]() : FRAMEWORK(generateDiv(_classNameHostTextareaElement))) : _targetElement);\r\n                    _contentElement = _contentElement || selectOrGenerateDivByClass(_classNameContentElement + textareaClass);\r\n                    _viewportElement = _viewportElement || selectOrGenerateDivByClass(_classNameViewportElement + textareaClass);\r\n                    _paddingElement = _paddingElement || selectOrGenerateDivByClass(_classNamePaddingElement + textareaClass);\r\n                    _sizeObserverElement = _sizeObserverElement || selectOrGenerateDivByClass(classNameResizeObserverHost);\r\n                    _textareaCoverElement = _textareaCoverElement || (_isTextarea ? selectOrGenerateDivByClass(_classNameTextareaCoverElement) : undefined);\r\n\r\n                    //add this class to workaround class changing issues with UI frameworks especially Vue\r\n                    if (_domExists)\r\n                        addClass(_hostElement, _classNameHostElementForeign);\r\n\r\n                    //on destroy, remove all generated class names from the host element before collecting the adopted attributes \r\n                    //to prevent adopting generated class names\r\n                    if (destroy)\r\n                        removeClass(_hostElement, hostElementClassNames);\r\n\r\n                    //collect all adopted attributes\r\n                    adoptAttrs = type(adoptAttrs) == TYPES.s ? adoptAttrs.split(_strSpace) : adoptAttrs;\r\n                    if (COMPATIBILITY.isA(adoptAttrs) && _isTextarea) {\r\n                        each(adoptAttrs, function (i, v) {\r\n                            if (type(v) == TYPES.s) {\r\n                                adoptAttrsMap[v] = destroy ? _hostElement.attr(v) : _targetElement.attr(v);\r\n                            }\r\n                        });\r\n                    }\r\n\r\n                    if (!destroy) {\r\n                        if (_isTextarea) {\r\n                            if (!_currentPreparedOptions.sizeAutoCapable) {\r\n                                hostElementCSS[_strWidth] = _targetElement.css(_strWidth);\r\n                                hostElementCSS[_strHeight] = _targetElement.css(_strHeight);\r\n                            }\r\n\r\n                            if (!_domExists)\r\n                                _targetElement.addClass(_classNameTextInherit).wrap(_hostElement);\r\n\r\n                            //jQuery clones elements in wrap functions, so we have to select them again\r\n                            _hostElement = _targetElement[strParent]().css(hostElementCSS);\r\n                        }\r\n\r\n                        if (!_domExists) {\r\n                            //add the correct class to the target element\r\n                            addClass(_targetElement, _isTextarea ? classNameTextareaElementFull : _classNameHostElement);\r\n\r\n                            //wrap the content into the generated elements to create the required DOM\r\n                            _hostElement.wrapInner(_contentElement)\r\n                                .wrapInner(_viewportElement)\r\n                                .wrapInner(_paddingElement)\r\n                                .prepend(_sizeObserverElement);\r\n\r\n                            //jQuery clones elements in wrap functions, so we have to select them again\r\n                            _contentElement = findFirst(_hostElement, _strDot + _classNameContentElement);\r\n                            _viewportElement = findFirst(_hostElement, _strDot + _classNameViewportElement);\r\n                            _paddingElement = findFirst(_hostElement, _strDot + _classNamePaddingElement);\r\n\r\n                            if (_isTextarea) {\r\n                                _contentElement.prepend(_textareaCoverElement);\r\n                                applyAdoptedAttrs();\r\n                            }\r\n                        }\r\n\r\n                        if (_nativeScrollbarStyling)\r\n                            addClass(_viewportElement, _classNameViewportNativeScrollbarsInvisible);\r\n                        if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y)\r\n                            addClass(_viewportElement, _classNameViewportNativeScrollbarsOverlaid);\r\n                        if (_isBody)\r\n                            addClass(_htmlElement, _classNameHTMLElement);\r\n\r\n                        _sizeObserverElementNative = _sizeObserverElement[0];\r\n                        _hostElementNative = _hostElement[0];\r\n                        _paddingElementNative = _paddingElement[0];\r\n                        _viewportElementNative = _viewportElement[0];\r\n                        _contentElementNative = _contentElement[0];\r\n\r\n                        updateViewportAttrsFromTarget();\r\n                    }\r\n                    else {\r\n                        if (_domExists && _initialized) {\r\n                            //clear size observer\r\n                            _sizeObserverElement.children().remove();\r\n\r\n                            //remove the style property and classes from already generated elements\r\n                            each([_paddingElement, _viewportElement, _contentElement, _textareaCoverElement], function (i, elm) {\r\n                                if (elm) {\r\n                                    removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                                }\r\n                            });\r\n\r\n                            //add classes to the host element which was removed previously to match the expected DOM\r\n                            addClass(_hostElement, _isTextarea ? _classNameHostTextareaElement : _classNameHostElement);\r\n                        }\r\n                        else {\r\n                            //remove size observer\r\n                            remove(_sizeObserverElement);\r\n\r\n                            //unwrap the content to restore DOM\r\n                            _contentElement.contents()\r\n                                .unwrap()\r\n                                .unwrap()\r\n                                .unwrap();\r\n\r\n                            if (_isTextarea) {\r\n                                _targetElement.unwrap();\r\n                                remove(_hostElement);\r\n                                remove(_textareaCoverElement);\r\n                                applyAdoptedAttrs();\r\n                            }\r\n                        }\r\n\r\n                        if (_isTextarea)\r\n                            _targetElement.removeAttr(LEXICON.s);\r\n\r\n                        if (_isBody)\r\n                            removeClass(_htmlElement, _classNameHTMLElement);\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Adds or removes all wrapper elements interactivity events.\r\n                 * @param destroy Indicates whether the Events shall be added or removed.\r\n                 */\r\n                function setupStructureEvents() {\r\n                    var textareaKeyDownRestrictedKeyCodes = [\r\n                        112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 123,    //F1 to F12\r\n                        33, 34,                                                   //page up, page down\r\n                        37, 38, 39, 40,                                           //left, up, right, down arrows\r\n                        16, 17, 18, 19, 20, 144                                   //Shift, Ctrl, Alt, Pause, CapsLock, NumLock\r\n                    ];\r\n                    var textareaKeyDownKeyCodesList = [];\r\n                    var textareaUpdateIntervalID;\r\n                    var scrollStopTimeoutId;\r\n                    var scrollStopDelay = 175;\r\n                    var strFocus = 'focus';\r\n\r\n                    function updateTextarea(doClearInterval) {\r\n                        textareaUpdate();\r\n                        _base.update(_strAuto);\r\n                        if (doClearInterval && _autoUpdateRecommended)\r\n                            clearInterval(textareaUpdateIntervalID);\r\n                    }\r\n                    function textareaOnScroll(event) {\r\n                        _targetElement[_strScrollLeft](_rtlScrollBehavior.i && _normalizeRTLCache ? 9999999 : 0);\r\n                        _targetElement[_strScrollTop](0);\r\n                        COMPATIBILITY.prvD(event);\r\n                        COMPATIBILITY.stpP(event);\r\n                        return false;\r\n                    }\r\n                    function textareaOnDrop(event) {\r\n                        setTimeout(function () {\r\n                            if (!_destroyed)\r\n                                updateTextarea();\r\n                        }, 50);\r\n                    }\r\n                    function textareaOnFocus() {\r\n                        _textareaHasFocus = true;\r\n                        addClass(_hostElement, strFocus);\r\n                    }\r\n                    function textareaOnFocusout() {\r\n                        _textareaHasFocus = false;\r\n                        textareaKeyDownKeyCodesList = [];\r\n                        removeClass(_hostElement, strFocus);\r\n                        updateTextarea(true);\r\n                    }\r\n                    function textareaOnKeyDown(event) {\r\n                        var keyCode = event.keyCode;\r\n\r\n                        if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\r\n                            if (!textareaKeyDownKeyCodesList[LEXICON.l]) {\r\n                                updateTextarea();\r\n                                textareaUpdateIntervalID = setInterval(updateTextarea, 1000 / 60);\r\n                            }\r\n                            if (inArray(keyCode, textareaKeyDownKeyCodesList) < 0)\r\n                                textareaKeyDownKeyCodesList.push(keyCode);\r\n                        }\r\n                    }\r\n                    function textareaOnKeyUp(event) {\r\n                        var keyCode = event.keyCode;\r\n                        var index = inArray(keyCode, textareaKeyDownKeyCodesList);\r\n\r\n                        if (inArray(keyCode, textareaKeyDownRestrictedKeyCodes) < 0) {\r\n                            if (index > -1)\r\n                                textareaKeyDownKeyCodesList.splice(index, 1);\r\n                            if (!textareaKeyDownKeyCodesList[LEXICON.l])\r\n                                updateTextarea(true);\r\n                        }\r\n                    }\r\n                    function contentOnTransitionEnd(event) {\r\n                        if (_autoUpdateCache === true)\r\n                            return;\r\n                        event = event.originalEvent || event;\r\n                        if (isSizeAffectingCSSProperty(event.propertyName))\r\n                            _base.update(_strAuto);\r\n                    }\r\n                    function viewportOnScroll(event) {\r\n                        if (!_sleeping) {\r\n                            if (scrollStopTimeoutId !== undefined)\r\n                                clearTimeout(scrollStopTimeoutId);\r\n                            else {\r\n                                if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                    refreshScrollbarsAutoHide(true);\r\n\r\n                                if (!nativeOverlayScrollbarsAreActive())\r\n                                    addClass(_hostElement, _classNameHostScrolling);\r\n\r\n                                dispatchCallback('onScrollStart', event);\r\n                            }\r\n\r\n                            //if a scrollbars handle gets dragged, the mousemove event is responsible for refreshing the handle offset\r\n                            //because if CSS scroll-snap is used, the handle offset gets only refreshed on every snap point\r\n                            //this looks laggy & clunky, it looks much better if the offset refreshes with the mousemove\r\n                            if (!_scrollbarsHandlesDefineScrollPos) {\r\n                                refreshScrollbarHandleOffset(true);\r\n                                refreshScrollbarHandleOffset(false);\r\n                            }\r\n                            dispatchCallback('onScroll', event);\r\n\r\n                            scrollStopTimeoutId = setTimeout(function () {\r\n                                if (!_destroyed) {\r\n                                    //OnScrollStop:\r\n                                    clearTimeout(scrollStopTimeoutId);\r\n                                    scrollStopTimeoutId = undefined;\r\n\r\n                                    if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                        refreshScrollbarsAutoHide(false);\r\n\r\n                                    if (!nativeOverlayScrollbarsAreActive())\r\n                                        removeClass(_hostElement, _classNameHostScrolling);\r\n\r\n                                    dispatchCallback('onScrollStop', event);\r\n                                }\r\n                            }, scrollStopDelay);\r\n                        }\r\n                    }\r\n\r\n\r\n                    if (_isTextarea) {\r\n                        if (_msieVersion > 9 || !_autoUpdateRecommended) {\r\n                            addDestroyEventListener(_targetElement, 'input', updateTextarea);\r\n                        }\r\n                        else {\r\n                            addDestroyEventListener(_targetElement,\r\n                                [_strKeyDownEvent, _strKeyUpEvent],\r\n                                [textareaOnKeyDown, textareaOnKeyUp]);\r\n                        }\r\n\r\n                        addDestroyEventListener(_targetElement,\r\n                            [_strScroll, 'drop', strFocus, strFocus + 'out'],\r\n                            [textareaOnScroll, textareaOnDrop, textareaOnFocus, textareaOnFocusout]);\r\n                    }\r\n                    else {\r\n                        addDestroyEventListener(_contentElement, _strTransitionEndEvent, contentOnTransitionEnd);\r\n                    }\r\n                    addDestroyEventListener(_viewportElement, _strScroll, viewportOnScroll, true);\r\n                }\r\n\r\n\r\n                //==== Scrollbars ====//\r\n\r\n                /**\r\n                 * Builds or destroys all scrollbar DOM elements (scrollbar, track, handle)\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupScrollbarsDOM(destroy) {\r\n                    var selectOrGenerateScrollbarDOM = function (isHorizontal) {\r\n                        var scrollbarClassName = isHorizontal ? _classNameScrollbarHorizontal : _classNameScrollbarVertical;\r\n                        var scrollbar = selectOrGenerateDivByClass(_classNameScrollbar + _strSpace + scrollbarClassName, true);\r\n                        var track = selectOrGenerateDivByClass(_classNameScrollbarTrack, scrollbar);\r\n                        var handle = selectOrGenerateDivByClass(_classNameScrollbarHandle, scrollbar);\r\n\r\n                        if (!_domExists && !destroy) {\r\n                            scrollbar.append(track);\r\n                            track.append(handle);\r\n                        }\r\n\r\n                        return {\r\n                            _scrollbar: scrollbar,\r\n                            _track: track,\r\n                            _handle: handle\r\n                        };\r\n                    };\r\n                    function resetScrollbarDOM(isHorizontal) {\r\n                        var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                        var scrollbar = scrollbarVars._scrollbar;\r\n                        var track = scrollbarVars._track;\r\n                        var handle = scrollbarVars._handle;\r\n\r\n                        if (_domExists && _initialized) {\r\n                            each([scrollbar, track, handle], function (i, elm) {\r\n                                removeClass(elm.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                            });\r\n                        }\r\n                        else {\r\n                            remove(scrollbar || selectOrGenerateScrollbarDOM(isHorizontal)._scrollbar);\r\n                        }\r\n                    }\r\n                    var horizontalElements;\r\n                    var verticalElements;\r\n\r\n                    if (!destroy) {\r\n                        horizontalElements = selectOrGenerateScrollbarDOM(true);\r\n                        verticalElements = selectOrGenerateScrollbarDOM();\r\n\r\n                        _scrollbarHorizontalElement = horizontalElements._scrollbar;\r\n                        _scrollbarHorizontalTrackElement = horizontalElements._track;\r\n                        _scrollbarHorizontalHandleElement = horizontalElements._handle;\r\n                        _scrollbarVerticalElement = verticalElements._scrollbar;\r\n                        _scrollbarVerticalTrackElement = verticalElements._track;\r\n                        _scrollbarVerticalHandleElement = verticalElements._handle;\r\n\r\n                        if (!_domExists) {\r\n                            _paddingElement.after(_scrollbarVerticalElement);\r\n                            _paddingElement.after(_scrollbarHorizontalElement);\r\n                        }\r\n                    }\r\n                    else {\r\n                        resetScrollbarDOM(true);\r\n                        resetScrollbarDOM();\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Initializes all scrollbar interactivity events. (track and handle dragging, clicking, scrolling)\r\n                 * @param isHorizontal True if the target scrollbar is the horizontal scrollbar, false if the target scrollbar is the vertical scrollbar.\r\n                 */\r\n                function setupScrollbarEvents(isHorizontal) {\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var insideIFrame = _windowElementNative.top !== _windowElementNative;\r\n                    var xy = scrollbarVars._x_y;\r\n                    var XY = scrollbarVars._X_Y;\r\n                    var scroll = _strScroll + scrollbarVars._Left_Top;\r\n                    var strActive = 'active';\r\n                    var strSnapHandle = 'snapHandle';\r\n                    var strClickEvent = 'click';\r\n                    var scrollDurationFactor = 1;\r\n                    var increaseDecreaseScrollAmountKeyCodes = [16, 17]; //shift, ctrl\r\n                    var trackTimeout;\r\n                    var mouseDownScroll;\r\n                    var mouseDownOffset;\r\n                    var mouseDownInvertedScale;\r\n\r\n                    function getPointerPosition(event) {\r\n                        return _msieVersion && insideIFrame ? event['screen' + XY] : COMPATIBILITY.page(event)[xy]; //use screen coordinates in EDGE & IE because the page values are incorrect in frames.\r\n                    }\r\n                    function getPreparedScrollbarsOption(name) {\r\n                        return _currentPreparedOptions.scrollbars[name];\r\n                    }\r\n                    function increaseTrackScrollAmount() {\r\n                        scrollDurationFactor = 0.5;\r\n                    }\r\n                    function decreaseTrackScrollAmount() {\r\n                        scrollDurationFactor = 1;\r\n                    }\r\n                    function stopClickEventPropagation(event) {\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n                    function documentKeyDown(event) {\r\n                        if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\r\n                            increaseTrackScrollAmount();\r\n                    }\r\n                    function documentKeyUp(event) {\r\n                        if (inArray(event.keyCode, increaseDecreaseScrollAmountKeyCodes) > -1)\r\n                            decreaseTrackScrollAmount();\r\n                    }\r\n                    function onMouseTouchDownContinue(event) {\r\n                        var originalEvent = event.originalEvent || event;\r\n                        var isTouchEvent = originalEvent.touches !== undefined;\r\n                        return _sleeping || _destroyed || nativeOverlayScrollbarsAreActive() || !_scrollbarsDragScrollingCache || (isTouchEvent && !getPreparedScrollbarsOption('touchSupport')) ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\r\n                    }\r\n                    function documentDragMove(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var trackLength = scrollbarVarsInfo._trackLength;\r\n                            var handleLength = scrollbarVarsInfo._handleLength;\r\n                            var scrollRange = scrollbarVarsInfo._maxScroll;\r\n                            var scrollRaw = (getPointerPosition(event) - mouseDownOffset) * mouseDownInvertedScale;\r\n                            var scrollDeltaPercent = scrollRaw / (trackLength - handleLength);\r\n                            var scrollDelta = (scrollRange * scrollDeltaPercent);\r\n                            scrollDelta = isFinite(scrollDelta) ? scrollDelta : 0;\r\n                            if (_isRTL && isHorizontal && !_rtlScrollBehavior.i)\r\n                                scrollDelta *= -1;\r\n\r\n                            _viewportElement[scroll](MATH.round(mouseDownScroll + scrollDelta));\r\n\r\n                            if (_scrollbarsHandlesDefineScrollPos)\r\n                                refreshScrollbarHandleOffset(isHorizontal, mouseDownScroll + scrollDelta);\r\n\r\n                            if (!_supportPassiveEvents)\r\n                                COMPATIBILITY.prvD(event);\r\n                        }\r\n                        else\r\n                            documentMouseTouchUp(event);\r\n                    }\r\n                    function documentMouseTouchUp(event) {\r\n                        event = event || event.originalEvent;\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent],\r\n                            [documentDragMove, documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart],\r\n                            true);\r\n                        COMPATIBILITY.rAF()(function() {\r\n                            setupResponsiveEventListener(_documentElement, strClickEvent, stopClickEventPropagation, true, { _capture: true });\r\n                        });\r\n                        \r\n                            \r\n                        if (_scrollbarsHandlesDefineScrollPos)\r\n                            refreshScrollbarHandleOffset(isHorizontal, true);\r\n\r\n                        _scrollbarsHandlesDefineScrollPos = false;\r\n                        removeClass(_bodyElement, _classNameDragging);\r\n                        removeClass(scrollbarVars._handle, strActive);\r\n                        removeClass(scrollbarVars._track, strActive);\r\n                        removeClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                        mouseDownScroll = undefined;\r\n                        mouseDownOffset = undefined;\r\n                        mouseDownInvertedScale = 1;\r\n\r\n                        decreaseTrackScrollAmount();\r\n\r\n                        if (trackTimeout !== undefined) {\r\n                            _base.scrollStop();\r\n                            clearTimeout(trackTimeout);\r\n                            trackTimeout = undefined;\r\n                        }\r\n\r\n                        if (event) {\r\n                            var rect = _hostElementNative[LEXICON.bCR]();\r\n                            var mouseInsideHost = event.clientX >= rect.left && event.clientX <= rect.right && event.clientY >= rect.top && event.clientY <= rect.bottom;\r\n\r\n                            //if mouse is outside host element\r\n                            if (!mouseInsideHost)\r\n                                hostOnMouseLeave();\r\n\r\n                            if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                                refreshScrollbarsAutoHide(false);\r\n                        }\r\n                    }\r\n                    function onHandleMouseTouchDown(event) {\r\n                        if (onMouseTouchDownContinue(event))\r\n                            onHandleMouseTouchDownAction(event);\r\n                    }\r\n                    function onHandleMouseTouchDownAction(event) {\r\n                        mouseDownScroll = _viewportElement[scroll]();\r\n                        mouseDownScroll = isNaN(mouseDownScroll) ? 0 : mouseDownScroll;\r\n                        if (_isRTL && isHorizontal && !_rtlScrollBehavior.n || !_isRTL)\r\n                            mouseDownScroll = mouseDownScroll < 0 ? 0 : mouseDownScroll;\r\n\r\n                        mouseDownInvertedScale = getHostElementInvertedScale()[xy];\r\n                        mouseDownOffset = getPointerPosition(event);\r\n\r\n                        _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\r\n                        addClass(_bodyElement, _classNameDragging);\r\n                        addClass(scrollbarVars._handle, strActive);\r\n                        addClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strMouseTouchMoveEvent, _strMouseTouchUpEvent, _strSelectStartEvent],\r\n                            [documentDragMove, documentMouseTouchUp, documentOnSelectStart]);\r\n                        COMPATIBILITY.rAF()(function() {\r\n                            setupResponsiveEventListener(_documentElement, strClickEvent, stopClickEventPropagation, false, { _capture: true });\r\n                        });\r\n                        \r\n\r\n                        if (_msieVersion || !_documentMixed)\r\n                            COMPATIBILITY.prvD(event);\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n                    function onTrackMouseTouchDown(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var handleToViewportRatio = scrollbarVars._info._handleLength / Math.round(MATH.min(1, _viewportSize[scrollbarVars._w_h] / _contentScrollSizeCache[scrollbarVars._w_h]) * scrollbarVars._info._trackLength);\r\n                            var scrollDistance = MATH.round(_viewportSize[scrollbarVars._w_h] * handleToViewportRatio);\r\n                            var scrollBaseDuration = 270 * handleToViewportRatio;\r\n                            var scrollFirstIterationDelay = 400 * handleToViewportRatio;\r\n                            var trackOffset = scrollbarVars._track.offset()[scrollbarVars._left_top];\r\n                            var ctrlKey = event.ctrlKey;\r\n                            var instantScroll = event.shiftKey;\r\n                            var instantScrollTransition = instantScroll && ctrlKey;\r\n                            var isFirstIteration = true;\r\n                            var easing = 'linear';\r\n                            var decreaseScroll;\r\n                            var finishedCondition;\r\n                            var scrollActionFinsished = function (transition) {\r\n                                if (_scrollbarsHandlesDefineScrollPos)\r\n                                    refreshScrollbarHandleOffset(isHorizontal, transition);\r\n                            };\r\n                            var scrollActionInstantFinished = function () {\r\n                                scrollActionFinsished();\r\n                                onHandleMouseTouchDownAction(event);\r\n                            };\r\n                            var scrollAction = function () {\r\n                                if (!_destroyed) {\r\n                                    var mouseOffset = (mouseDownOffset - trackOffset) * mouseDownInvertedScale;\r\n                                    var handleOffset = scrollbarVarsInfo._handleOffset;\r\n                                    var trackLength = scrollbarVarsInfo._trackLength;\r\n                                    var handleLength = scrollbarVarsInfo._handleLength;\r\n                                    var scrollRange = scrollbarVarsInfo._maxScroll;\r\n                                    var currScroll = scrollbarVarsInfo._currentScroll;\r\n                                    var scrollDuration = scrollBaseDuration * scrollDurationFactor;\r\n                                    var timeoutDelay = isFirstIteration ? MATH.max(scrollFirstIterationDelay, scrollDuration) : scrollDuration;\r\n                                    var instantScrollPosition = scrollRange * ((mouseOffset - (handleLength / 2)) / (trackLength - handleLength)); // 100% * positionPercent\r\n                                    var rtlIsNormal = _isRTL && isHorizontal && ((!_rtlScrollBehavior.i && !_rtlScrollBehavior.n) || _normalizeRTLCache);\r\n                                    var decreaseScrollCondition = rtlIsNormal ? handleOffset < mouseOffset : handleOffset > mouseOffset;\r\n                                    var scrollObj = {};\r\n                                    var animationObj = {\r\n                                        easing: easing,\r\n                                        step: function (now) {\r\n                                            if (_scrollbarsHandlesDefineScrollPos) {\r\n                                                _viewportElement[scroll](now); //https://github.com/jquery/jquery/issues/4340\r\n                                                refreshScrollbarHandleOffset(isHorizontal, now);\r\n                                            }\r\n                                        }\r\n                                    };\r\n                                    instantScrollPosition = isFinite(instantScrollPosition) ? instantScrollPosition : 0;\r\n                                    instantScrollPosition = _isRTL && isHorizontal && !_rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\r\n\r\n                                    //_base.scrollStop();\r\n\r\n                                    if (instantScroll) {\r\n                                        _viewportElement[scroll](instantScrollPosition); //scroll instantly to new position\r\n                                        if (instantScrollTransition) {\r\n                                            //get the scroll position after instant scroll (in case CSS Snap Points are used) to get the correct snapped scroll position\r\n                                            //and the animation stops at the correct point\r\n                                            instantScrollPosition = _viewportElement[scroll]();\r\n                                            //scroll back to the position before instant scrolling so animation can be performed\r\n                                            _viewportElement[scroll](currScroll);\r\n\r\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.i ? (scrollRange - instantScrollPosition) : instantScrollPosition;\r\n                                            instantScrollPosition = rtlIsNormal && _rtlScrollBehavior.n ? -instantScrollPosition : instantScrollPosition;\r\n\r\n                                            scrollObj[xy] = instantScrollPosition;\r\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\r\n                                                duration: 130,\r\n                                                complete: scrollActionInstantFinished\r\n                                            }));\r\n                                        }\r\n                                        else\r\n                                            scrollActionInstantFinished();\r\n                                    }\r\n                                    else {\r\n                                        decreaseScroll = isFirstIteration ? decreaseScrollCondition : decreaseScroll;\r\n                                        finishedCondition = rtlIsNormal\r\n                                            ? (decreaseScroll ? handleOffset + handleLength >= mouseOffset : handleOffset <= mouseOffset)\r\n                                            : (decreaseScroll ? handleOffset <= mouseOffset : handleOffset + handleLength >= mouseOffset);\r\n\r\n                                        if (finishedCondition) {\r\n                                            clearTimeout(trackTimeout);\r\n                                            _base.scrollStop();\r\n                                            trackTimeout = undefined;\r\n                                            scrollActionFinsished(true);\r\n                                        }\r\n                                        else {\r\n                                            trackTimeout = setTimeout(scrollAction, timeoutDelay);\r\n\r\n                                            scrollObj[xy] = (decreaseScroll ? '-=' : '+=') + scrollDistance;\r\n                                            _base.scroll(scrollObj, extendDeep(animationObj, {\r\n                                                duration: scrollDuration\r\n                                            }));\r\n                                        }\r\n                                        isFirstIteration = false;\r\n                                    }\r\n                                }\r\n                            };\r\n                            if (ctrlKey)\r\n                                increaseTrackScrollAmount();\r\n\r\n                            mouseDownInvertedScale = getHostElementInvertedScale()[xy];\r\n                            mouseDownOffset = COMPATIBILITY.page(event)[xy];\r\n\r\n                            _scrollbarsHandlesDefineScrollPos = !getPreparedScrollbarsOption(strSnapHandle);\r\n                            addClass(_bodyElement, _classNameDragging);\r\n                            addClass(scrollbarVars._track, strActive);\r\n                            addClass(scrollbarVars._scrollbar, strActive);\r\n\r\n                            setupResponsiveEventListener(_documentElement,\r\n                                [_strMouseTouchUpEvent, _strKeyDownEvent, _strKeyUpEvent, _strSelectStartEvent],\r\n                                [documentMouseTouchUp, documentKeyDown, documentKeyUp, documentOnSelectStart]);\r\n\r\n                            scrollAction();\r\n                            COMPATIBILITY.prvD(event);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                    }\r\n                    function onTrackMouseTouchEnter(event) {\r\n                        //make sure both scrollbars will stay visible if one scrollbar is hovered if autoHide is \"scroll\" or \"move\".\r\n                        _scrollbarsHandleHovered = true;\r\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                            refreshScrollbarsAutoHide(true);\r\n                    }\r\n                    function onTrackMouseTouchLeave(event) {\r\n                        _scrollbarsHandleHovered = false;\r\n                        if (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove)\r\n                            refreshScrollbarsAutoHide(false);\r\n                    }\r\n                    function onScrollbarMouseTouchDown(event) {\r\n                        COMPATIBILITY.stpP(event);\r\n                    }\r\n\r\n                    addDestroyEventListener(scrollbarVars._handle,\r\n                        _strMouseTouchDownEvent,\r\n                        onHandleMouseTouchDown);\r\n                    addDestroyEventListener(scrollbarVars._track,\r\n                        [_strMouseTouchDownEvent, _strMouseEnter, _strMouseLeave],\r\n                        [onTrackMouseTouchDown, onTrackMouseTouchEnter, onTrackMouseTouchLeave]);\r\n                    addDestroyEventListener(scrollbarVars._scrollbar,\r\n                        _strMouseTouchDownEvent,\r\n                        onScrollbarMouseTouchDown);\r\n\r\n                    if (_supportTransition) {\r\n                        addDestroyEventListener(scrollbarVars._scrollbar, _strTransitionEndEvent, function (event) {\r\n                            if (event.target !== scrollbarVars._scrollbar[0])\r\n                                return;\r\n                            refreshScrollbarHandleLength(isHorizontal);\r\n                            refreshScrollbarHandleOffset(isHorizontal);\r\n                        });\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Shows or hides the given scrollbar and applied a class name which indicates if the scrollbar is scrollable or not.\r\n                 * @param isHorizontal True if the horizontal scrollbar is the target, false if the vertical scrollbar is the target.\r\n                 * @param shallBeVisible True if the scrollbar shall be shown, false if hidden.\r\n                 * @param canScroll True if the scrollbar is scrollable, false otherwise.\r\n                 */\r\n                function refreshScrollbarAppearance(isHorizontal, shallBeVisible, canScroll) {\r\n                    var scrollbarHiddenClassName = isHorizontal ? _classNameHostScrollbarHorizontalHidden : _classNameHostScrollbarVerticalHidden;\r\n                    var scrollbarElement = isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement;\r\n\r\n                    addRemoveClass(_hostElement, scrollbarHiddenClassName, !shallBeVisible);\r\n                    addRemoveClass(scrollbarElement, _classNameScrollbarUnusable, !canScroll);\r\n                }\r\n\r\n                /**\r\n                 * Autoshows / autohides both scrollbars with.\r\n                 * @param shallBeVisible True if the scrollbars shall be autoshown (only the case if they are hidden by a autohide), false if the shall be auto hidden.\r\n                 * @param delayfree True if the scrollbars shall be hidden without a delay, false or undefined otherwise.\r\n                 */\r\n                function refreshScrollbarsAutoHide(shallBeVisible, delayfree) {\r\n                    clearTimeout(_scrollbarsAutoHideTimeoutId);\r\n                    if (shallBeVisible) {\r\n                        //if(_hasOverflowCache.x && _hideOverflowCache.xs)\r\n                        removeClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\r\n                        //if(_hasOverflowCache.y && _hideOverflowCache.ys)\r\n                        removeClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\r\n                    }\r\n                    else {\r\n                        var anyActive;\r\n                        var strActive = 'active';\r\n                        var hide = function () {\r\n                            if (!_scrollbarsHandleHovered && !_destroyed) {\r\n                                anyActive = _scrollbarHorizontalHandleElement.hasClass(strActive) || _scrollbarVerticalHandleElement.hasClass(strActive);\r\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\r\n                                    addClass(_scrollbarHorizontalElement, _classNameScrollbarAutoHidden);\r\n                                if (!anyActive && (_scrollbarsAutoHideScroll || _scrollbarsAutoHideMove || _scrollbarsAutoHideLeave))\r\n                                    addClass(_scrollbarVerticalElement, _classNameScrollbarAutoHidden);\r\n                            }\r\n                        };\r\n                        if (_scrollbarsAutoHideDelay > 0 && delayfree !== true)\r\n                            _scrollbarsAutoHideTimeoutId = setTimeout(hide, _scrollbarsAutoHideDelay);\r\n                        else\r\n                            hide();\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the handle length of the given scrollbar.\r\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n                 */\r\n                function refreshScrollbarHandleLength(isHorizontal) {\r\n                    var handleCSS = {};\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var digit = 1000000;\r\n                    //get and apply intended handle length\r\n                    var handleRatio = MATH.min(1, _viewportSize[scrollbarVars._w_h] / _contentScrollSizeCache[scrollbarVars._w_h]);\r\n                    handleCSS[scrollbarVars._width_height] = (MATH.floor(handleRatio * 100 * digit) / digit) + '%'; //the last * digit / digit is for flooring to the 4th digit\r\n\r\n                    if (!nativeOverlayScrollbarsAreActive())\r\n                        scrollbarVars._handle.css(handleCSS);\r\n\r\n                    //measure the handle length to respect min & max length\r\n                    scrollbarVarsInfo._handleLength = scrollbarVars._handle[0]['offset' + scrollbarVars._Width_Height];\r\n                    scrollbarVarsInfo._handleLengthRatio = handleRatio;\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the handle offset of the given scrollbar.\r\n                 * @param isHorizontal True if the horizontal scrollbar handle shall be refreshed, false if the vertical one shall be refreshed.\r\n                 * @param scrollOrTransition The scroll position of the given scrollbar axis to which the handle shall be moved or a boolean which indicates whether a transition shall be applied. If undefined or boolean if the current scroll-offset is taken. (if isHorizontal ? scrollLeft : scrollTop)\r\n                 */\r\n                function refreshScrollbarHandleOffset(isHorizontal, scrollOrTransition) {\r\n                    var transition = type(scrollOrTransition) == TYPES.b;\r\n                    var transitionDuration = 250;\r\n                    var isRTLisHorizontal = _isRTL && isHorizontal;\r\n                    var scrollbarVars = getScrollbarVars(isHorizontal);\r\n                    var scrollbarVarsInfo = scrollbarVars._info;\r\n                    var strTranslateBrace = 'translate(';\r\n                    var strTransform = VENDORS._cssProperty('transform');\r\n                    var strTransition = VENDORS._cssProperty('transition');\r\n                    var nativeScroll = isHorizontal ? _viewportElement[_strScrollLeft]() : _viewportElement[_strScrollTop]();\r\n                    var currentScroll = scrollOrTransition === undefined || transition ? nativeScroll : scrollOrTransition;\r\n\r\n                    //measure the handle length to respect min & max length\r\n                    var handleLength = scrollbarVarsInfo._handleLength;\r\n                    var trackLength = scrollbarVars._track[0]['offset' + scrollbarVars._Width_Height];\r\n                    var handleTrackDiff = trackLength - handleLength;\r\n                    var handleCSS = {};\r\n                    var transformOffset;\r\n                    var translateValue;\r\n\r\n                    //DONT use the variable '_contentScrollSizeCache[scrollbarVars._w_h]' instead of '_viewportElement[0]['scroll' + scrollbarVars._Width_Height]'\r\n                    // because its a bit behind during the small delay when content size updates\r\n                    //(delay = mutationObserverContentLag, if its 0 then this var could be used)\r\n                    var maxScroll = (_viewportElementNative[_strScroll + scrollbarVars._Width_Height] - _viewportElementNative['client' + scrollbarVars._Width_Height]) * (_rtlScrollBehavior.n && isRTLisHorizontal ? -1 : 1); //* -1 if rtl scroll max is negative\r\n                    var getScrollRatio = function (base) {\r\n                        return isNaN(base / maxScroll) ? 0 : MATH.max(0, MATH.min(1, base / maxScroll));\r\n                    };\r\n                    var getHandleOffset = function (scrollRatio) {\r\n                        var offset = handleTrackDiff * scrollRatio;\r\n                        offset = isNaN(offset) ? 0 : offset;\r\n                        offset = (isRTLisHorizontal && !_rtlScrollBehavior.i) ? (trackLength - handleLength - offset) : offset;\r\n                        offset = MATH.max(0, offset);\r\n                        return offset;\r\n                    };\r\n                    var scrollRatio = getScrollRatio(nativeScroll);\r\n                    var unsnappedScrollRatio = getScrollRatio(currentScroll);\r\n                    var handleOffset = getHandleOffset(unsnappedScrollRatio);\r\n                    var snappedHandleOffset = getHandleOffset(scrollRatio);\r\n\r\n                    scrollbarVarsInfo._maxScroll = maxScroll;\r\n                    scrollbarVarsInfo._currentScroll = nativeScroll;\r\n                    scrollbarVarsInfo._currentScrollRatio = scrollRatio;\r\n\r\n                    if (_supportTransform) {\r\n                        transformOffset = isRTLisHorizontal ? -(trackLength - handleLength - handleOffset) : handleOffset; //in px\r\n                        //transformOffset = (transformOffset / trackLength * 100) * (trackLength / handleLength); //in %\r\n                        translateValue = isHorizontal ? strTranslateBrace + transformOffset + 'px, 0)' : strTranslateBrace + '0, ' + transformOffset + 'px)';\r\n\r\n                        handleCSS[strTransform] = translateValue;\r\n\r\n                        //apply or clear up transition\r\n                        if (_supportTransition)\r\n                            handleCSS[strTransition] = transition && MATH.abs(handleOffset - scrollbarVarsInfo._handleOffset) > 1 ? getCSSTransitionString(scrollbarVars._handle) + ', ' + (strTransform + _strSpace + transitionDuration + 'ms') : _strEmpty;\r\n                    }\r\n                    else\r\n                        handleCSS[scrollbarVars._left_top] = handleOffset;\r\n\r\n\r\n                    //only apply css if offset has changed and overflow exists.\r\n                    if (!nativeOverlayScrollbarsAreActive()) {\r\n                        scrollbarVars._handle.css(handleCSS);\r\n\r\n                        //clear up transition\r\n                        if (_supportTransform && _supportTransition && transition) {\r\n                            scrollbarVars._handle.one(_strTransitionEndEvent, function () {\r\n                                if (!_destroyed)\r\n                                    scrollbarVars._handle.css(strTransition, _strEmpty);\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                    scrollbarVarsInfo._handleOffset = handleOffset;\r\n                    scrollbarVarsInfo._snappedHandleOffset = snappedHandleOffset;\r\n                    scrollbarVarsInfo._trackLength = trackLength;\r\n                }\r\n\r\n                /**\r\n                 * Refreshes the interactivity of the given scrollbar element.\r\n                 * @param isTrack True if the track element is the target, false if the handle element is the target.\r\n                 * @param value True for interactivity false for no interactivity.\r\n                 */\r\n                function refreshScrollbarsInteractive(isTrack, value) {\r\n                    var action = value ? 'removeClass' : 'addClass';\r\n                    var element1 = isTrack ? _scrollbarHorizontalTrackElement : _scrollbarHorizontalHandleElement;\r\n                    var element2 = isTrack ? _scrollbarVerticalTrackElement : _scrollbarVerticalHandleElement;\r\n                    var className = isTrack ? _classNameScrollbarTrackOff : _classNameScrollbarHandleOff;\r\n\r\n                    element1[action](className);\r\n                    element2[action](className);\r\n                }\r\n\r\n                /**\r\n                 * Returns a object which is used for fast access for specific variables.\r\n                 * @param isHorizontal True if the horizontal scrollbar vars shall be accessed, false if the vertical scrollbar vars shall be accessed.\r\n                 * @returns {{wh: string, WH: string, lt: string, _wh: string, _lt: string, t: *, h: *, c: {}, s: *}}\r\n                 */\r\n                function getScrollbarVars(isHorizontal) {\r\n                    return {\r\n                        _width_height: isHorizontal ? _strWidth : _strHeight,\r\n                        _Width_Height: isHorizontal ? 'Width' : 'Height',\r\n                        _left_top: isHorizontal ? _strLeft : _strTop,\r\n                        _Left_Top: isHorizontal ? 'Left' : 'Top',\r\n                        _x_y: isHorizontal ? _strX : _strY,\r\n                        _X_Y: isHorizontal ? 'X' : 'Y',\r\n                        _w_h: isHorizontal ? 'w' : 'h',\r\n                        _l_t: isHorizontal ? 'l' : 't',\r\n                        _track: isHorizontal ? _scrollbarHorizontalTrackElement : _scrollbarVerticalTrackElement,\r\n                        _handle: isHorizontal ? _scrollbarHorizontalHandleElement : _scrollbarVerticalHandleElement,\r\n                        _scrollbar: isHorizontal ? _scrollbarHorizontalElement : _scrollbarVerticalElement,\r\n                        _info: isHorizontal ? _scrollHorizontalInfo : _scrollVerticalInfo\r\n                    };\r\n                }\r\n\r\n\r\n                //==== Scrollbar Corner ====//\r\n\r\n                /**\r\n                 * Builds or destroys the scrollbar corner DOM element.\r\n                 * @param destroy Indicates whether the DOM shall be build or destroyed.\r\n                 */\r\n                function setupScrollbarCornerDOM(destroy) {\r\n                    _scrollbarCornerElement = _scrollbarCornerElement || selectOrGenerateDivByClass(_classNameScrollbarCorner, true);\r\n\r\n                    if (!destroy) {\r\n                        if (!_domExists) {\r\n                            _hostElement.append(_scrollbarCornerElement);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (_domExists && _initialized) {\r\n                            removeClass(_scrollbarCornerElement.removeAttr(LEXICON.s), _classNamesDynamicDestroy);\r\n                        }\r\n                        else {\r\n                            remove(_scrollbarCornerElement);\r\n                        }\r\n                    }\r\n                }\r\n\r\n                /**\r\n                 * Initializes all scrollbar corner interactivity events.\r\n                 */\r\n                function setupScrollbarCornerEvents() {\r\n                    var insideIFrame = _windowElementNative.top !== _windowElementNative;\r\n                    var mouseDownPosition = {};\r\n                    var mouseDownSize = {};\r\n                    var mouseDownInvertedScale = {};\r\n                    var reconnectMutationObserver;\r\n\r\n                    function documentDragMove(event) {\r\n                        if (onMouseTouchDownContinue(event)) {\r\n                            var pageOffset = getCoordinates(event);\r\n                            var hostElementCSS = {};\r\n                            if (_resizeHorizontal || _resizeBoth)\r\n                                hostElementCSS[_strWidth] = (mouseDownSize.w + (pageOffset.x - mouseDownPosition.x) * mouseDownInvertedScale.x);\r\n                            if (_resizeVertical || _resizeBoth)\r\n                                hostElementCSS[_strHeight] = (mouseDownSize.h + (pageOffset.y - mouseDownPosition.y) * mouseDownInvertedScale.y);\r\n                            _hostElement.css(hostElementCSS);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                        else {\r\n                            documentMouseTouchUp(event);\r\n                        }\r\n                    }\r\n                    function documentMouseTouchUp(event) {\r\n                        var eventIsTrusted = event !== undefined;\r\n\r\n                        setupResponsiveEventListener(_documentElement,\r\n                            [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent],\r\n                            [documentOnSelectStart, documentDragMove, documentMouseTouchUp],\r\n                            true);\r\n\r\n                        removeClass(_bodyElement, _classNameDragging);\r\n                        if (_scrollbarCornerElement.releaseCapture)\r\n                            _scrollbarCornerElement.releaseCapture();\r\n\r\n                        if (eventIsTrusted) {\r\n                            if (reconnectMutationObserver)\r\n                                connectMutationObservers();\r\n                            _base.update(_strAuto);\r\n                        }\r\n                        reconnectMutationObserver = false;\r\n                    }\r\n                    function onMouseTouchDownContinue(event) {\r\n                        var originalEvent = event.originalEvent || event;\r\n                        var isTouchEvent = originalEvent.touches !== undefined;\r\n                        return _sleeping || _destroyed ? false : COMPATIBILITY.mBtn(event) === 1 || isTouchEvent;\r\n                    }\r\n                    function getCoordinates(event) {\r\n                        return _msieVersion && insideIFrame ? { x: event.screenX, y: event.screenY } : COMPATIBILITY.page(event);\r\n                    }\r\n\r\n                    addDestroyEventListener(_scrollbarCornerElement, _strMouseTouchDownEvent, function (event) {\r\n                        if (onMouseTouchDownContinue(event) && !_resizeNone) {\r\n                            if (_mutationObserversConnected) {\r\n                                reconnectMutationObserver = true;\r\n                                disconnectMutationObservers();\r\n                            }\r\n\r\n                            mouseDownPosition = getCoordinates(event);\r\n\r\n                            mouseDownSize.w = _hostElementNative[LEXICON.oW] - (!_isBorderBox ? _paddingX : 0);\r\n                            mouseDownSize.h = _hostElementNative[LEXICON.oH] - (!_isBorderBox ? _paddingY : 0);\r\n                            mouseDownInvertedScale = getHostElementInvertedScale();\r\n\r\n                            setupResponsiveEventListener(_documentElement,\r\n                                [_strSelectStartEvent, _strMouseTouchMoveEvent, _strMouseTouchUpEvent],\r\n                                [documentOnSelectStart, documentDragMove, documentMouseTouchUp]);\r\n\r\n                            addClass(_bodyElement, _classNameDragging);\r\n                            if (_scrollbarCornerElement.setCapture)\r\n                                _scrollbarCornerElement.setCapture();\r\n\r\n                            COMPATIBILITY.prvD(event);\r\n                            COMPATIBILITY.stpP(event);\r\n                        }\r\n                    });\r\n                }\r\n\r\n\r\n                //==== Utils ====//\r\n\r\n                /**\r\n                 * Calls the callback with the given name. The Context of this callback is always _base (this).\r\n                 * @param name The name of the target which shall be called.\r\n                 * @param args The args with which the callback shall be called.\r\n                 * @param dependent Boolean which decides whether the callback shall be fired, undefined is like a \"true\" value.\r\n                 */\r\n                function dispatchCallback(name, args, dependent) {\r\n                    if (dependent === false)\r\n                        return;\r\n                    if (_initialized) {\r\n                        var callback = _currentPreparedOptions.callbacks[name];\r\n                        var extensionOnName = name;\r\n                        var ext;\r\n\r\n                        if (extensionOnName.substr(0, 2) === 'on')\r\n                            extensionOnName = extensionOnName.substr(2, 1).toLowerCase() + extensionOnName.substr(3);\r\n\r\n                        if (type(callback) == TYPES.f)\r\n                            callback.call(_base, args);\r\n\r\n                        each(_extensions, function () {\r\n                            ext = this;\r\n                            if (type(ext.on) == TYPES.f)\r\n                                ext.on(extensionOnName, args);\r\n                        });\r\n                    }\r\n                    else if (!_destroyed)\r\n                        _callbacksInitQeueue.push({ n: name, a: args });\r\n                }\r\n\r\n                /**\r\n                 * Sets the \"top, right, bottom, left\" properties, with a given prefix, of the given css object.\r\n                 * @param targetCSSObject The css object to which the values shall be applied.\r\n                 * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n                 * @param values A array of values which shall be applied to the \"top, right, bottom, left\" -properties. The array order is [top, right, bottom, left].\r\n                 * If this argument is undefined the value '' (empty string) will be applied to all properties.\r\n                 */\r\n                function setTopRightBottomLeft(targetCSSObject, prefix, values) {\r\n                    prefix = prefix || _strEmpty;\r\n                    values = values || [_strEmpty, _strEmpty, _strEmpty, _strEmpty];\r\n\r\n                    targetCSSObject[prefix + _strTop] = values[0];\r\n                    targetCSSObject[prefix + _strRight] = values[1];\r\n                    targetCSSObject[prefix + _strBottom] = values[2];\r\n                    targetCSSObject[prefix + _strLeft] = values[3];\r\n                }\r\n\r\n                /**\r\n                 * Gets the \"top, right, bottom, left\" CSS properties of the CSS property with the given prefix from the host element.\r\n                 * @param prefix The prefix of the \"top, right, bottom, left\" css properties. (example: 'padding-' is a valid prefix)\r\n                 * @param suffix The suffix of the \"top, right, bottom, left\" css properties. (example: 'border-' is a valid prefix with '-width' is a valid suffix)\r\n                 * @param zeroX True if the x axis shall be 0.\r\n                 * @param zeroY True if the y axis shall be 0.\r\n                 * @returns {{}} The object which contains the numbers of the read CSS properties.\r\n                 */\r\n                function getTopRightBottomLeftHost(prefix, suffix, zeroX, zeroY) {\r\n                    suffix = suffix || _strEmpty;\r\n                    prefix = prefix || _strEmpty;\r\n                    return {\r\n                        t: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strTop + suffix)),\r\n                        r: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strRight + suffix)),\r\n                        b: zeroY ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strBottom + suffix)),\r\n                        l: zeroX ? 0 : parseToZeroOrNumber(_hostElement.css(prefix + _strLeft + suffix))\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Returns the computed CSS transition string from the given element.\r\n                 * @param element The element from which the transition string shall be returned.\r\n                 * @returns {string} The CSS transition string from the given element.\r\n                 */\r\n                function getCSSTransitionString(element) {\r\n                    var transitionStr = VENDORS._cssProperty('transition');\r\n                    var assembledValue = element.css(transitionStr);\r\n                    if (assembledValue)\r\n                        return assembledValue;\r\n                    var regExpString = '\\\\s*(' + '([^,(]+(\\\\(.+?\\\\))?)+' + ')[\\\\s,]*';\r\n                    var regExpMain = new RegExp(regExpString);\r\n                    var regExpValidate = new RegExp('^(' + regExpString + ')+$');\r\n                    var properties = 'property duration timing-function delay'.split(' ');\r\n                    var result = [];\r\n                    var strResult;\r\n                    var valueArray;\r\n                    var i = 0;\r\n                    var j;\r\n                    var splitCssStyleByComma = function (str) {\r\n                        strResult = [];\r\n                        if (!str.match(regExpValidate))\r\n                            return str;\r\n                        while (str.match(regExpMain)) {\r\n                            strResult.push(RegExp.$1);\r\n                            str = str.replace(regExpMain, _strEmpty);\r\n                        }\r\n\r\n                        return strResult;\r\n                    };\r\n                    for (; i < properties[LEXICON.l]; i++) {\r\n                        valueArray = splitCssStyleByComma(element.css(transitionStr + '-' + properties[i]));\r\n                        for (j = 0; j < valueArray[LEXICON.l]; j++)\r\n                            result[j] = (result[j] ? result[j] + _strSpace : _strEmpty) + valueArray[j];\r\n                    }\r\n                    return result.join(', ');\r\n                }\r\n\r\n                /**\r\n                 * Generates a Regular Expression which matches with a string which starts with 'os-host'.\r\n                 * @param {boolean} withCurrClassNameOption The Regular Expression also matches if the string is the current ClassName option (multiple values splitted by space possible).\r\n                 * @param {boolean} withOldClassNameOption The Regular Expression also matches if the string is the old ClassName option (multiple values splitted by space possible).\r\n                 */\r\n                function createHostClassNameRegExp(withCurrClassNameOption, withOldClassNameOption) {\r\n                    var i;\r\n                    var split;\r\n                    var appendix;\r\n                    var appendClasses = function (classes, condition) {\r\n                        appendix = '';\r\n                        if (condition && typeof classes == TYPES.s) {\r\n                            split = classes.split(_strSpace);\r\n                            for (i = 0; i < split[LEXICON.l]; i++)\r\n                                appendix += '|' + split[i] + '$';\r\n                            // split[i].replace(/[.*+?^${}()|[\\]\\\\]/g, '\\\\$&') for escaping regex characters\r\n                        }\r\n                        return appendix;\r\n                    };\r\n\r\n                    return new RegExp(\r\n                        '(^' + _classNameHostElement + '([-_].+|)$)' +\r\n                        appendClasses(_classNameCache, withCurrClassNameOption) +\r\n                        appendClasses(_oldClassName, withOldClassNameOption), 'g');\r\n                }\r\n\r\n                /**\r\n                 * Calculates the host-elements inverted scale. (invertedScale = 1 / scale)\r\n                 * @returns {{x: number, y: number}} The scale of the host-element.\r\n                 */\r\n                function getHostElementInvertedScale() {\r\n                    var rect = _paddingElementNative[LEXICON.bCR]();\r\n                    return {\r\n                        x: _supportTransform ? 1 / (MATH.round(rect.width) / _paddingElementNative[LEXICON.oW]) || 1 : 1,\r\n                        y: _supportTransform ? 1 / (MATH.round(rect.height) / _paddingElementNative[LEXICON.oH]) || 1 : 1\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Checks whether the given object is a HTMLElement.\r\n                 * @param o The object which shall be checked.\r\n                 * @returns {boolean} True the given object is a HTMLElement, false otherwise.\r\n                 */\r\n                function isHTMLElement(o) {\r\n                    var strOwnerDocument = 'ownerDocument';\r\n                    var strHTMLElement = 'HTMLElement';\r\n                    var wnd = o && o[strOwnerDocument] ? (o[strOwnerDocument].parentWindow || window) : window;\r\n                    return (\r\n                        typeof wnd[strHTMLElement] == TYPES.o ? o instanceof wnd[strHTMLElement] : //DOM2\r\n                            o && typeof o == TYPES.o && o !== null && o.nodeType === 1 && typeof o.nodeName == TYPES.s\r\n                    );\r\n                }\r\n\r\n                /**\r\n                 * Compares 2 arrays and returns the differences between them as a array.\r\n                 * @param a1 The first array which shall be compared.\r\n                 * @param a2 The second array which shall be compared.\r\n                 * @returns {Array} The differences between the two arrays.\r\n                 */\r\n                function getArrayDifferences(a1, a2) {\r\n                    var a = [];\r\n                    var diff = [];\r\n                    var i;\r\n                    var k;\r\n                    for (i = 0; i < a1.length; i++)\r\n                        a[a1[i]] = true;\r\n                    for (i = 0; i < a2.length; i++) {\r\n                        if (a[a2[i]])\r\n                            delete a[a2[i]];\r\n                        else\r\n                            a[a2[i]] = true;\r\n                    }\r\n                    for (k in a)\r\n                        diff.push(k);\r\n                    return diff;\r\n                }\r\n\r\n                /**\r\n                 * Returns Zero or the number to which the value can be parsed.\r\n                 * @param value The value which shall be parsed.\r\n                 * @param toFloat Indicates whether the number shall be parsed to a float.\r\n                 */\r\n                function parseToZeroOrNumber(value, toFloat) {\r\n                    var num = toFloat ? parseFloat(value) : parseInt(value, 10);\r\n                    return isNaN(num) ? 0 : num;\r\n                }\r\n\r\n                /**\r\n                 * Gets several information of the textarea and returns them as a object or undefined if the browser doesn't support it.\r\n                 * @returns {{cursorRow: Number, cursorCol, rows: Number, cols: number, wRow: number, pos: number, max : number}} or undefined if not supported.\r\n                 */\r\n                function getTextareaInfo() {\r\n                    //read needed values\r\n                    var textareaCursorPosition = _targetElementNative.selectionStart;\r\n                    if (textareaCursorPosition === undefined)\r\n                        return;\r\n\r\n                    var textareaValue = _targetElement.val();\r\n                    var textareaLength = textareaValue[LEXICON.l];\r\n                    var textareaRowSplit = textareaValue.split('\\n');\r\n                    var textareaLastRow = textareaRowSplit[LEXICON.l];\r\n                    var textareaCurrentCursorRowSplit = textareaValue.substr(0, textareaCursorPosition).split('\\n');\r\n                    var widestRow = 0;\r\n                    var textareaLastCol = 0;\r\n                    var cursorRow = textareaCurrentCursorRowSplit[LEXICON.l];\r\n                    var cursorCol = textareaCurrentCursorRowSplit[textareaCurrentCursorRowSplit[LEXICON.l] - 1][LEXICON.l];\r\n                    var rowCols;\r\n                    var i;\r\n\r\n                    //get widest Row and the last column of the textarea\r\n                    for (i = 0; i < textareaRowSplit[LEXICON.l]; i++) {\r\n                        rowCols = textareaRowSplit[i][LEXICON.l];\r\n                        if (rowCols > textareaLastCol) {\r\n                            widestRow = i + 1;\r\n                            textareaLastCol = rowCols;\r\n                        }\r\n                    }\r\n\r\n                    return {\r\n                        _cursorRow: cursorRow, //cursorRow\r\n                        _cursorColumn: cursorCol, //cursorCol\r\n                        _rows: textareaLastRow, //rows\r\n                        _columns: textareaLastCol, //cols\r\n                        _widestRow: widestRow, //wRow\r\n                        _cursorPosition: textareaCursorPosition, //pos\r\n                        _cursorMax: textareaLength //max\r\n                    };\r\n                }\r\n\r\n                /**\r\n                 * Determines whether native overlay scrollbars are active.\r\n                 * @returns {boolean} True if native overlay scrollbars are active, false otherwise.\r\n                 */\r\n                function nativeOverlayScrollbarsAreActive() {\r\n                    return (_ignoreOverlayScrollbarHidingCache && (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y));\r\n                }\r\n\r\n                /**\r\n                 * Gets the element which is used to measure the content size.\r\n                 * @returns {*} TextareaCover if target element is textarea else the ContentElement.\r\n                 */\r\n                function getContentMeasureElement() {\r\n                    return _isTextarea ? _textareaCoverElement[0] : _contentElementNative;\r\n                }\r\n\r\n                /**\r\n                 * Generates a string which represents a HTML div with the given classes or attributes.\r\n                 * @param classesOrAttrs The class of the div as string or a object which represents the attributes of the div. (The class attribute can also be written as \"className\".)\r\n                 * @param content The content of the div as string.\r\n                 * @returns {string} The concated string which represents a HTML div and its content.\r\n                 */\r\n                function generateDiv(classesOrAttrs, content) {\r\n                    return '<div ' + (classesOrAttrs ? type(classesOrAttrs) == TYPES.s ?\r\n                        'class=\"' + classesOrAttrs + '\"' :\r\n                        (function () {\r\n                            var key;\r\n                            var attrs = _strEmpty;\r\n                            if (FRAMEWORK.isPlainObject(classesOrAttrs)) {\r\n                                for (key in classesOrAttrs)\r\n                                    attrs += (key === 'c' ? 'class' : key) + '=\"' + classesOrAttrs[key] + '\" ';\r\n                            }\r\n                            return attrs;\r\n                        })() :\r\n                        _strEmpty) +\r\n                        '>' +\r\n                        (content || _strEmpty) +\r\n                        '</div>';\r\n                }\r\n\r\n                /**\r\n                 * Selects or generates a div with the given class attribute.\r\n                 * @param className The class names (divided by spaces) of the div which shall be selected or generated.\r\n                 * @param selectParentOrOnlyChildren The parent element from which of the element shall be selected. (if undefined or boolean its hostElement)\r\n                 * If its a boolean it decides whether only the children of the host element shall be selected.\r\n                 * @returns {*} The generated or selected element.\r\n                 */\r\n                function selectOrGenerateDivByClass(className, selectParentOrOnlyChildren) {\r\n                    var onlyChildren = type(selectParentOrOnlyChildren) == TYPES.b;\r\n                    var selectParent = onlyChildren ? _hostElement : (selectParentOrOnlyChildren || _hostElement);\r\n\r\n                    return (_domExists && !selectParent[LEXICON.l])\r\n                        ? null\r\n                        : _domExists\r\n                            ? selectParent[onlyChildren ? 'children' : 'find'](_strDot + className.replace(/\\s/g, _strDot)).eq(0)\r\n                            : FRAMEWORK(generateDiv(className))\r\n                }\r\n\r\n                /**\r\n                 * Gets the value of the given property from the given object.\r\n                 * @param obj The object from which the property value shall be got.\r\n                 * @param path The property of which the value shall be got.\r\n                 * @returns {*} Returns the value of the searched property or undefined of the property wasn't found.\r\n                 */\r\n                function getObjectPropVal(obj, path) {\r\n                    var splits = path.split(_strDot);\r\n                    var i = 0;\r\n                    var val;\r\n                    for (; i < splits.length; i++) {\r\n                        if (!obj[LEXICON.hOP](splits[i]))\r\n                            return;\r\n                        val = obj[splits[i]];\r\n                        if (i < splits.length && type(val) == TYPES.o)\r\n                            obj = val;\r\n                    }\r\n                    return val;\r\n                }\r\n\r\n                /**\r\n                 * Sets the value of the given property from the given object.\r\n                 * @param obj The object from which the property value shall be set.\r\n                 * @param path The property of which the value shall be set.\r\n                 * @param val The value of the property which shall be set.\r\n                 */\r\n                function setObjectPropVal(obj, path, val) {\r\n                    var splits = path.split(_strDot);\r\n                    var splitsLength = splits.length;\r\n                    var i = 0;\r\n                    var extendObj = {};\r\n                    var extendObjRoot = extendObj;\r\n                    for (; i < splitsLength; i++)\r\n                        extendObj = extendObj[splits[i]] = i + 1 < splitsLength ? {} : val;\r\n                    FRAMEWORK.extend(obj, extendObjRoot, true);\r\n                }\r\n\r\n                /**\t\r\n                 * Runs a action for each selector inside the updateOnLoad option.\t\r\n                 * @param {Function} action The action for each updateOnLoad selector, the arguments the function takes is the index and the value (the selector).\t\r\n                 */\r\n                function eachUpdateOnLoad(action) {\r\n                    var updateOnLoad = _currentPreparedOptions.updateOnLoad;\r\n                    updateOnLoad = type(updateOnLoad) == TYPES.s ? updateOnLoad.split(_strSpace) : updateOnLoad;\r\n\r\n                    if (COMPATIBILITY.isA(updateOnLoad) && !_destroyed) {\r\n                        each(updateOnLoad, action);\r\n                    }\r\n                }\r\n\r\n\r\n                //==== Utils Cache ====//\r\n\r\n                /**\r\n                 * Compares two values or objects and returns true if they aren't equal.\r\n                 * @param current The first value or object which shall be compared.\r\n                 * @param cache The second value or object which shall be compared.\r\n                 * @param force If true the returned value is always true.\r\n                 * @returns {boolean} True if both values or objects aren't equal or force is true, false otherwise.\r\n                 */\r\n                function checkCache(current, cache, force) {\r\n                    if (force)\r\n                        return force;\r\n                    if (type(current) == TYPES.o && type(cache) == TYPES.o) {\r\n                        for (var prop in current) {\r\n                            if (prop !== 'c') {\r\n                                if (current[LEXICON.hOP](prop) && cache[LEXICON.hOP](prop)) {\r\n                                    if (checkCache(current[prop], cache[prop]))\r\n                                        return true;\r\n                                }\r\n                                else {\r\n                                    return true;\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    else {\r\n                        return current !== cache;\r\n                    }\r\n                    return false;\r\n                }\r\n\r\n\r\n                //==== Shortcuts ====//\r\n\r\n                /**\r\n                 * jQuery extend method shortcut with a appended \"true\" as first argument.\r\n                 */\r\n                function extendDeep() {\r\n                    return FRAMEWORK.extend.apply(this, [true].concat([].slice.call(arguments)));\r\n                }\r\n\r\n                /**\r\n                 * jQuery addClass method shortcut.\r\n                 */\r\n                function addClass(el, classes) {\r\n                    return _frameworkProto.addClass.call(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * jQuery removeClass method shortcut.\r\n                 */\r\n                function removeClass(el, classes) {\r\n                    return _frameworkProto.removeClass.call(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * Adds or removes the given classes dependent on the boolean value. True for add, false for remove.\r\n                 */\r\n                function addRemoveClass(el, classes, doAdd) {\r\n                    return doAdd ? addClass(el, classes) : removeClass(el, classes);\r\n                }\r\n\r\n                /**\r\n                 * jQuery remove method shortcut.\r\n                 */\r\n                function remove(el) {\r\n                    return _frameworkProto.remove.call(el);\r\n                }\r\n\r\n                /**\r\n                 * Finds the first child element with the given selector of the given element.\r\n                 * @param el The root element from which the selector shall be valid.\r\n                 * @param selector The selector of the searched element.\r\n                 * @returns {*} The first element which is a child of the given element and matches the givens selector.\r\n                 */\r\n                function findFirst(el, selector) {\r\n                    return _frameworkProto.find.call(el, selector).eq(0);\r\n                }\r\n\r\n\r\n                //==== API ====//\r\n\r\n                /**\r\n                 * Puts the instance to sleep. It wont respond to any changes in the DOM and won't update. Scrollbar Interactivity is also disabled as well as the resize handle.\r\n                 * This behavior can be reset by calling the update method.\r\n                 */\r\n                _base.sleep = function () {\r\n                    _sleeping = true;\r\n                };\r\n\r\n                /**\r\n                 * Updates the plugin and DOM to the current options.\r\n                 * This method should only be called if a update is 100% required.\r\n                 * @param force True if every property shall be updated and the cache shall be ignored.\r\n                 * !INTERNAL USAGE! : force can be a string \"auto\", \"sync\" or \"zoom\" too\r\n                 * if \"auto\" then before a real update the content size and host element attributes gets checked, and if they changed only then the update method will be called.\r\n                 * if \"sync\" then the async update process (MutationObserver or UpdateLoop) gets synchronized and a corresponding update takes place if one was needed due to pending changes.\r\n                 * if \"zoom\" then a update takes place where it's assumed that content and host size changed\r\n                 * @returns {boolean|undefined} \r\n                 * If force is \"sync\" then a boolean is returned which indicates whether a update was needed due to pending changes.\r\n                 * If force is \"auto\" then a boolean is returned whether a update was needed due to attribute or size changes.\r\n                 * undefined otherwise.\r\n                 */\r\n                _base.update = function (force) {\r\n                    if (_destroyed)\r\n                        return;\r\n\r\n                    var attrsChanged;\r\n                    var contentSizeC;\r\n                    var isString = type(force) == TYPES.s;\r\n                    var doUpdateAuto;\r\n                    var mutHost;\r\n                    var mutContent;\r\n\r\n                    if (isString) {\r\n                        if (force === _strAuto) {\r\n                            attrsChanged = meaningfulAttrsChanged();\r\n                            contentSizeC = updateAutoContentSizeChanged();\r\n                            doUpdateAuto = attrsChanged || contentSizeC;\r\n                            if (doUpdateAuto) {\r\n                                update({\r\n                                    _contentSizeChanged: contentSizeC,\r\n                                    _changedOptions: _initialized ? undefined : _currentPreparedOptions\r\n                                });\r\n                            }\r\n                        }\r\n                        else if (force === _strSync) {\r\n                            if (_mutationObserversConnected) {\r\n                                mutHost = _mutationObserverHostCallback(_mutationObserverHost.takeRecords());\r\n                                mutContent = _mutationObserverContentCallback(_mutationObserverContent.takeRecords());\r\n                            }\r\n                            else {\r\n                                mutHost = _base.update(_strAuto);\r\n                            }\r\n                        }\r\n                        else if (force === 'zoom') {\r\n                            update({\r\n                                _hostSizeChanged: true,\r\n                                _contentSizeChanged: true\r\n                            });\r\n                        }\r\n                    }\r\n                    else {\r\n                        force = _sleeping || force;\r\n                        _sleeping = false;\r\n                        if (!_base.update(_strSync) || force)\r\n                            update({ _force: force });\r\n                    }\r\n\r\n                    updateElementsOnLoad();\r\n\r\n                    return doUpdateAuto || mutHost || mutContent;\r\n                };\r\n\r\n                /**\r\n                 Gets or sets the current options. The update method will be called automatically if new options were set.\r\n                 * @param newOptions If new options are given, then the new options will be set, if new options aren't given (undefined or a not a plain object) then the current options will be returned.\r\n                 * @param value If new options is a property path string, then this value will be used to set the option to which the property path string leads.\r\n                 * @returns {*}\r\n                 */\r\n                _base.options = function (newOptions, value) {\r\n                    var option = {};\r\n                    var changedOps;\r\n\r\n                    //return current options if newOptions are undefined or empty\r\n                    if (FRAMEWORK.isEmptyObject(newOptions) || !FRAMEWORK.isPlainObject(newOptions)) {\r\n                        if (type(newOptions) == TYPES.s) {\r\n                            if (arguments.length > 1) {\r\n                                setObjectPropVal(option, newOptions, value);\r\n                                changedOps = setOptions(option);\r\n                            }\r\n                            else\r\n                                return getObjectPropVal(_currentOptions, newOptions);\r\n                        }\r\n                        else\r\n                            return _currentOptions;\r\n                    }\r\n                    else {\r\n                        changedOps = setOptions(newOptions);\r\n                    }\r\n\r\n                    if (!FRAMEWORK.isEmptyObject(changedOps)) {\r\n                        update({ _changedOptions: changedOps });\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Restore the DOM, disconnects all observers, remove all resize observers and put the instance to sleep.\r\n                 */\r\n                _base.destroy = function () {\r\n                    if (_destroyed)\r\n                        return;\r\n\r\n                    //remove this instance from auto update loop\r\n                    autoUpdateLoop.remove(_base);\r\n\r\n                    //disconnect all mutation observers\r\n                    disconnectMutationObservers();\r\n\r\n                    //remove all resize observers\r\n                    setupResizeObserver(_sizeObserverElement);\r\n                    setupResizeObserver(_sizeAutoObserverElement);\r\n\r\n                    //remove all extensions\r\n                    for (var extName in _extensions)\r\n                        _base.removeExt(extName);\r\n\r\n                    //remove all 'destroy' events\r\n                    while (_destroyEvents[LEXICON.l] > 0)\r\n                        _destroyEvents.pop()();\r\n\r\n                    //remove all events from host element\r\n                    setupHostMouseTouchEvents(true);\r\n\r\n                    //remove all helper / detection elements\r\n                    if (_contentGlueElement)\r\n                        remove(_contentGlueElement);\r\n                    if (_contentArrangeElement)\r\n                        remove(_contentArrangeElement);\r\n                    if (_sizeAutoObserverAdded)\r\n                        remove(_sizeAutoObserverElement);\r\n\r\n                    //remove all generated DOM\r\n                    setupScrollbarsDOM(true);\r\n                    setupScrollbarCornerDOM(true);\r\n                    setupStructureDOM(true);\r\n\r\n                    //remove all generated image load events\r\n                    for (var i = 0; i < _updateOnLoadElms[LEXICON.l]; i++)\r\n                        FRAMEWORK(_updateOnLoadElms[i]).off(_updateOnLoadEventName, updateOnLoadCallback);\r\n                    _updateOnLoadElms = undefined;\r\n\r\n                    _destroyed = true;\r\n                    _sleeping = true;\r\n\r\n                    //remove this instance from the instances list\r\n                    INSTANCES(pluginTargetElement, 0);\r\n                    dispatchCallback('onDestroyed');\r\n\r\n                    //remove all properties and methods\r\n                    //for (var property in _base)\r\n                    //    delete _base[property];\r\n                    //_base = undefined;\r\n                };\r\n\r\n                /**\r\n                 * Scrolls to a given position or element.\r\n                 * @param coordinates\r\n                 * 1. Can be \"coordinates\" which looks like:\r\n                 *    { x : ?, y : ? } OR          Object with x and y properties\r\n                 *    { left : ?, top : ? } OR     Object with left and top properties\r\n                 *    { l : ?, t : ? } OR          Object with l and t properties\r\n                 *    [ ?, ? ] OR                  Array where the first two element are the coordinates (first is x, second is y)\r\n                 *    ?                            A single value which stays for both axis\r\n                 *    A value can be a number, a string or a calculation.\r\n                 *\r\n                 *    Operators:\r\n                 *    [NONE]  The current scroll will be overwritten by the value.\r\n                 *    '+='    The value will be added to the current scroll offset\r\n                 *    '-='    The value will be subtracted from the current scroll offset\r\n                 *    '*='    The current scroll wil be multiplicated by the value.\r\n                 *    '/='    The current scroll wil be divided by the value.\r\n                 *\r\n                 *    Units:\r\n                 *    [NONE]  The value is the final scroll amount.                   final = (value * 1)\r\n                 *    'px'    Same as none\r\n                 *    '%'     The value is dependent on the current scroll value.     final = ((currentScrollValue / 100) * value)\r\n                 *    'vw'    The value is multiplicated by the viewport width.       final = (value * viewportWidth)\r\n                 *    'vh'    The value is multiplicated by the viewport height.      final = (value * viewportHeight)\r\n                 *\r\n                 *    example final values:\r\n                 *    200, '200px', '50%', '1vw', '1vh', '+=200', '/=1vw', '*=2px', '-=5vh', '+=33%', '+= 50% - 2px', '-= 1vw - 50%'\r\n                 *\r\n                 * 2. Can be a HTML or jQuery element:\r\n                 *    The final scroll offset is the offset (without margin) of the given HTML / jQuery element.\r\n                 *\r\n                 * 3. Can be a object with a HTML or jQuery element with additional settings:\r\n                 *    {\r\n                 *      el : [HTMLElement, jQuery element],             MUST be specified, else this object isn't valid.\r\n                 *      scroll : [string, array, object],               Default value is 'always'.\r\n                 *      block : [string, array, object],                Default value is 'begin'.\r\n                 *      margin : [number, boolean, array, object]       Default value is false.\r\n                 *    }\r\n                 *\r\n                 *    Possible scroll settings are:\r\n                 *    'always'      Scrolls always.\r\n                 *    'ifneeded'    Scrolls only if the element isnt fully in view.\r\n                 *    'never'       Scrolls never.\r\n                 *\r\n                 *    Possible block settings are:\r\n                 *    'begin'   Both axis shall be docked to the \"begin\" edge. - The element will be docked to the top and left edge of the viewport.\r\n                 *    'end'     Both axis shall be docked to the \"end\" edge. - The element will be docked to the bottom and right edge of the viewport. (If direction is RTL to the bottom and left edge.)\r\n                 *    'center'  Both axis shall be docked to \"center\". - The element will be centered in the viewport.\r\n                 *    'nearest' The element will be docked to the nearest edge(s).\r\n                 *\r\n                 *    Possible margin settings are: -- The actual margin of the element wont be affect, this option affects only the final scroll offset.\r\n                 *    [BOOLEAN]                                         If true the css margin of the element will be used, if false no margin will be used.\r\n                 *    [NUMBER]                                          The margin will be used for all edges.\r\n                 *\r\n                 * @param duration The duration of the scroll animation, OR a jQuery animation configuration object.\r\n                 * @param easing The animation easing.\r\n                 * @param complete The animation complete callback.\r\n                 * @returns {{\r\n                 *   position: {x: number, y: number},\r\n                 *   ratio: {x: number, y: number},\r\n                 *   max: {x: number, y: number},\r\n                 *   handleOffset: {x: number, y: number},\r\n                 *   handleLength: {x: number, y: number},\r\n                 *   handleLengthRatio: {x: number, y: number}, t\r\n                 *   rackLength: {x: number, y: number},\r\n                 *   isRTL: boolean,\r\n                 *   isRTLNormalized: boolean\r\n                 *  }}\r\n                 */\r\n                _base.scroll = function (coordinates, duration, easing, complete) {\r\n                    if (arguments.length === 0 || coordinates === undefined) {\r\n                        var infoX = _scrollHorizontalInfo;\r\n                        var infoY = _scrollVerticalInfo;\r\n                        var normalizeInvert = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.i;\r\n                        var normalizeNegate = _normalizeRTLCache && _isRTL && _rtlScrollBehavior.n;\r\n                        var scrollX = infoX._currentScroll;\r\n                        var scrollXRatio = infoX._currentScrollRatio;\r\n                        var maxScrollX = infoX._maxScroll;\r\n                        scrollXRatio = normalizeInvert ? 1 - scrollXRatio : scrollXRatio;\r\n                        scrollX = normalizeInvert ? maxScrollX - scrollX : scrollX;\r\n                        scrollX *= normalizeNegate ? -1 : 1;\r\n                        maxScrollX *= normalizeNegate ? -1 : 1;\r\n\r\n                        return {\r\n                            position: {\r\n                                x: scrollX,\r\n                                y: infoY._currentScroll\r\n                            },\r\n                            ratio: {\r\n                                x: scrollXRatio,\r\n                                y: infoY._currentScrollRatio\r\n                            },\r\n                            max: {\r\n                                x: maxScrollX,\r\n                                y: infoY._maxScroll\r\n                            },\r\n                            handleOffset: {\r\n                                x: infoX._handleOffset,\r\n                                y: infoY._handleOffset\r\n                            },\r\n                            handleLength: {\r\n                                x: infoX._handleLength,\r\n                                y: infoY._handleLength\r\n                            },\r\n                            handleLengthRatio: {\r\n                                x: infoX._handleLengthRatio,\r\n                                y: infoY._handleLengthRatio\r\n                            },\r\n                            trackLength: {\r\n                                x: infoX._trackLength,\r\n                                y: infoY._trackLength\r\n                            },\r\n                            snappedHandleOffset: {\r\n                                x: infoX._snappedHandleOffset,\r\n                                y: infoY._snappedHandleOffset\r\n                            },\r\n                            isRTL: _isRTL,\r\n                            isRTLNormalized: _normalizeRTLCache\r\n                        };\r\n                    }\r\n\r\n                    _base.update(_strSync);\r\n\r\n                    var normalizeRTL = _normalizeRTLCache;\r\n                    var coordinatesXAxisProps = [_strX, _strLeft, 'l'];\r\n                    var coordinatesYAxisProps = [_strY, _strTop, 't'];\r\n                    var coordinatesOperators = ['+=', '-=', '*=', '/='];\r\n                    var durationIsObject = type(duration) == TYPES.o;\r\n                    var completeCallback = durationIsObject ? duration.complete : complete;\r\n                    var i;\r\n                    var finalScroll = {};\r\n                    var specialEasing = {};\r\n                    var doScrollLeft;\r\n                    var doScrollTop;\r\n                    var animationOptions;\r\n                    var strEnd = 'end';\r\n                    var strBegin = 'begin';\r\n                    var strCenter = 'center';\r\n                    var strNearest = 'nearest';\r\n                    var strAlways = 'always';\r\n                    var strNever = 'never';\r\n                    var strIfNeeded = 'ifneeded';\r\n                    var strLength = LEXICON.l;\r\n                    var settingsAxis;\r\n                    var settingsScroll;\r\n                    var settingsBlock;\r\n                    var settingsMargin;\r\n                    var finalElement;\r\n                    var elementObjSettingsAxisValues = [_strX, _strY, 'xy', 'yx'];\r\n                    var elementObjSettingsBlockValues = [strBegin, strEnd, strCenter, strNearest];\r\n                    var elementObjSettingsScrollValues = [strAlways, strNever, strIfNeeded];\r\n                    var coordinatesIsElementObj = coordinates[LEXICON.hOP]('el');\r\n                    var possibleElement = coordinatesIsElementObj ? coordinates.el : coordinates;\r\n                    var possibleElementIsJQuery = possibleElement instanceof FRAMEWORK || JQUERY ? possibleElement instanceof JQUERY : false;\r\n                    var possibleElementIsHTMLElement = possibleElementIsJQuery ? false : isHTMLElement(possibleElement);\r\n                    var updateScrollbarInfos = function () {\r\n                        if (doScrollLeft)\r\n                            refreshScrollbarHandleOffset(true);\r\n                        if (doScrollTop)\r\n                            refreshScrollbarHandleOffset(false);\r\n                    };\r\n                    var proxyCompleteCallback = type(completeCallback) != TYPES.f ? undefined : function () {\r\n                        updateScrollbarInfos();\r\n                        completeCallback();\r\n                    };\r\n                    function checkSettingsStringValue(currValue, allowedValues) {\r\n                        for (i = 0; i < allowedValues[strLength]; i++) {\r\n                            if (currValue === allowedValues[i])\r\n                                return true;\r\n                        }\r\n                        return false;\r\n                    }\r\n                    function getRawScroll(isX, coordinates) {\r\n                        var coordinateProps = isX ? coordinatesXAxisProps : coordinatesYAxisProps;\r\n                        coordinates = type(coordinates) == TYPES.s || type(coordinates) == TYPES.n ? [coordinates, coordinates] : coordinates;\r\n\r\n                        if (COMPATIBILITY.isA(coordinates))\r\n                            return isX ? coordinates[0] : coordinates[1];\r\n                        else if (type(coordinates) == TYPES.o) {\r\n                            //decides RTL normalization \"hack\" with .n\r\n                            //normalizeRTL = type(coordinates.n) == TYPES.b ? coordinates.n : normalizeRTL; \r\n                            for (i = 0; i < coordinateProps[strLength]; i++)\r\n                                if (coordinateProps[i] in coordinates)\r\n                                    return coordinates[coordinateProps[i]];\r\n                        }\r\n                    }\r\n                    function getFinalScroll(isX, rawScroll) {\r\n                        var isString = type(rawScroll) == TYPES.s;\r\n                        var operator;\r\n                        var amount;\r\n                        var scrollInfo = isX ? _scrollHorizontalInfo : _scrollVerticalInfo;\r\n                        var currScroll = scrollInfo._currentScroll;\r\n                        var maxScroll = scrollInfo._maxScroll;\r\n                        var mult = ' * ';\r\n                        var finalValue;\r\n                        var isRTLisX = _isRTL && isX;\r\n                        var normalizeShortcuts = isRTLisX && _rtlScrollBehavior.n && !normalizeRTL;\r\n                        var strReplace = 'replace';\r\n                        var evalFunc = eval;\r\n                        var possibleOperator;\r\n                        if (isString) {\r\n                            //check operator\r\n                            if (rawScroll[strLength] > 2) {\r\n                                possibleOperator = rawScroll.substr(0, 2);\r\n                                if (inArray(possibleOperator, coordinatesOperators) > -1)\r\n                                    operator = possibleOperator;\r\n                            }\r\n\r\n                            //calculate units and shortcuts\r\n                            rawScroll = operator ? rawScroll.substr(2) : rawScroll;\r\n                            rawScroll = rawScroll\r\n                            [strReplace](/min/g, 0) //'min' = 0%\r\n                            [strReplace](/</g, 0)   //'<'   = 0%\r\n                            [strReplace](/max/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent)    //'max' = 100%\r\n                            [strReplace](/>/g, (normalizeShortcuts ? '-' : _strEmpty) + _strHundredPercent)      //'>'   = 100%\r\n                            [strReplace](/px/g, _strEmpty)\r\n                            [strReplace](/%/g, mult + (maxScroll * (isRTLisX && _rtlScrollBehavior.n ? -1 : 1) / 100.0))\r\n                            [strReplace](/vw/g, mult + _viewportSize.w)\r\n                            [strReplace](/vh/g, mult + _viewportSize.h);\r\n                            amount = parseToZeroOrNumber(isNaN(rawScroll) ? parseToZeroOrNumber(evalFunc(rawScroll), true).toFixed() : rawScroll);\r\n                        }\r\n                        else {\r\n                            amount = rawScroll;\r\n                        }\r\n\r\n                        if (amount !== undefined && !isNaN(amount) && type(amount) == TYPES.n) {\r\n                            var normalizeIsRTLisX = normalizeRTL && isRTLisX;\r\n                            var operatorCurrScroll = currScroll * (normalizeIsRTLisX && _rtlScrollBehavior.n ? -1 : 1);\r\n                            var invert = normalizeIsRTLisX && _rtlScrollBehavior.i;\r\n                            var negate = normalizeIsRTLisX && _rtlScrollBehavior.n;\r\n                            operatorCurrScroll = invert ? (maxScroll - operatorCurrScroll) : operatorCurrScroll;\r\n                            switch (operator) {\r\n                                case '+=':\r\n                                    finalValue = operatorCurrScroll + amount;\r\n                                    break;\r\n                                case '-=':\r\n                                    finalValue = operatorCurrScroll - amount;\r\n                                    break;\r\n                                case '*=':\r\n                                    finalValue = operatorCurrScroll * amount;\r\n                                    break;\r\n                                case '/=':\r\n                                    finalValue = operatorCurrScroll / amount;\r\n                                    break;\r\n                                default:\r\n                                    finalValue = amount;\r\n                                    break;\r\n                            }\r\n                            finalValue = invert ? maxScroll - finalValue : finalValue;\r\n                            finalValue *= negate ? -1 : 1;\r\n                            finalValue = isRTLisX && _rtlScrollBehavior.n ? MATH.min(0, MATH.max(maxScroll, finalValue)) : MATH.max(0, MATH.min(maxScroll, finalValue));\r\n                        }\r\n                        return finalValue === currScroll ? undefined : finalValue;\r\n                    }\r\n                    function getPerAxisValue(value, valueInternalType, defaultValue, allowedValues) {\r\n                        var resultDefault = [defaultValue, defaultValue];\r\n                        var valueType = type(value);\r\n                        var valueArrLength;\r\n                        var valueArrItem;\r\n\r\n                        //value can be [ string, or array of two strings ]\r\n                        if (valueType == valueInternalType) {\r\n                            value = [value, value];\r\n                        }\r\n                        else if (valueType == TYPES.a) {\r\n                            valueArrLength = value[strLength];\r\n                            if (valueArrLength > 2 || valueArrLength < 1)\r\n                                value = resultDefault;\r\n                            else {\r\n                                if (valueArrLength === 1)\r\n                                    value[1] = defaultValue;\r\n                                for (i = 0; i < valueArrLength; i++) {\r\n                                    valueArrItem = value[i];\r\n                                    if (type(valueArrItem) != valueInternalType || !checkSettingsStringValue(valueArrItem, allowedValues)) {\r\n                                        value = resultDefault;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                        else if (valueType == TYPES.o)\r\n                            value = [value[_strX] || defaultValue, value[_strY] || defaultValue];\r\n                        else\r\n                            value = resultDefault;\r\n                        return { x: value[0], y: value[1] };\r\n                    }\r\n                    function generateMargin(marginTopRightBottomLeftArray) {\r\n                        var result = [];\r\n                        var currValue;\r\n                        var currValueType;\r\n                        var valueDirections = [_strTop, _strRight, _strBottom, _strLeft];\r\n                        for (i = 0; i < marginTopRightBottomLeftArray[strLength]; i++) {\r\n                            if (i === valueDirections[strLength])\r\n                                break;\r\n                            currValue = marginTopRightBottomLeftArray[i];\r\n                            currValueType = type(currValue);\r\n                            if (currValueType == TYPES.b)\r\n                                result.push(currValue ? parseToZeroOrNumber(finalElement.css(_strMarginMinus + valueDirections[i])) : 0);\r\n                            else\r\n                                result.push(currValueType == TYPES.n ? currValue : 0);\r\n                        }\r\n                        return result;\r\n                    }\r\n\r\n                    if (possibleElementIsJQuery || possibleElementIsHTMLElement) {\r\n                        //get settings\r\n                        var margin = coordinatesIsElementObj ? coordinates.margin : 0;\r\n                        var axis = coordinatesIsElementObj ? coordinates.axis : 0;\r\n                        var scroll = coordinatesIsElementObj ? coordinates.scroll : 0;\r\n                        var block = coordinatesIsElementObj ? coordinates.block : 0;\r\n                        var marginDefault = [0, 0, 0, 0];\r\n                        var marginType = type(margin);\r\n                        var marginLength;\r\n                        finalElement = possibleElementIsJQuery ? possibleElement : FRAMEWORK(possibleElement);\r\n\r\n                        if (finalElement[strLength] > 0) {\r\n                            //margin can be [ boolean, number, array of 2, array of 4, object ]\r\n                            if (marginType == TYPES.n || marginType == TYPES.b)\r\n                                margin = generateMargin([margin, margin, margin, margin]);\r\n                            else if (marginType == TYPES.a) {\r\n                                marginLength = margin[strLength];\r\n                                if (marginLength === 2)\r\n                                    margin = generateMargin([margin[0], margin[1], margin[0], margin[1]]);\r\n                                else if (marginLength >= 4)\r\n                                    margin = generateMargin(margin);\r\n                                else\r\n                                    margin = marginDefault;\r\n                            }\r\n                            else if (marginType == TYPES.o)\r\n                                margin = generateMargin([margin[_strTop], margin[_strRight], margin[_strBottom], margin[_strLeft]]);\r\n                            else\r\n                                margin = marginDefault;\r\n\r\n                            //block = type(block) === TYPES.b ? block ? [ strNearest, strBegin ] : [ strNearest, strEnd ] : block;\r\n                            settingsAxis = checkSettingsStringValue(axis, elementObjSettingsAxisValues) ? axis : 'xy';\r\n                            settingsScroll = getPerAxisValue(scroll, TYPES.s, strAlways, elementObjSettingsScrollValues);\r\n                            settingsBlock = getPerAxisValue(block, TYPES.s, strBegin, elementObjSettingsBlockValues);\r\n                            settingsMargin = margin;\r\n\r\n                            var viewportScroll = {\r\n                                l: _scrollHorizontalInfo._currentScroll,\r\n                                t: _scrollVerticalInfo._currentScroll\r\n                            };\r\n                            // use padding element instead of viewport element because padding element has never padding, margin or position applied.\r\n                            var viewportOffset = _paddingElement.offset();\r\n\r\n                            //get coordinates\r\n                            var elementOffset = finalElement.offset();\r\n                            var doNotScroll = {\r\n                                x: settingsScroll.x == strNever || settingsAxis == _strY,\r\n                                y: settingsScroll.y == strNever || settingsAxis == _strX\r\n                            };\r\n                            elementOffset[_strTop] -= settingsMargin[0];\r\n                            elementOffset[_strLeft] -= settingsMargin[3];\r\n                            var elementScrollCoordinates = {\r\n                                x: MATH.round(elementOffset[_strLeft] - viewportOffset[_strLeft] + viewportScroll.l),\r\n                                y: MATH.round(elementOffset[_strTop] - viewportOffset[_strTop] + viewportScroll.t)\r\n                            };\r\n                            if (_isRTL) {\r\n                                if (!_rtlScrollBehavior.n && !_rtlScrollBehavior.i)\r\n                                    elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + viewportScroll.l);\r\n                                if (_rtlScrollBehavior.n && normalizeRTL)\r\n                                    elementScrollCoordinates.x *= -1;\r\n                                if (_rtlScrollBehavior.i && normalizeRTL)\r\n                                    elementScrollCoordinates.x = MATH.round(viewportOffset[_strLeft] - elementOffset[_strLeft] + (_scrollHorizontalInfo._maxScroll - viewportScroll.l));\r\n                            }\r\n\r\n                            //measuring is required\r\n                            if (settingsBlock.x != strBegin || settingsBlock.y != strBegin || settingsScroll.x == strIfNeeded || settingsScroll.y == strIfNeeded || _isRTL) {\r\n                                var measuringElm = finalElement[0];\r\n                                var rawElementSize = _supportTransform ? measuringElm[LEXICON.bCR]() : {\r\n                                    width: measuringElm[LEXICON.oW],\r\n                                    height: measuringElm[LEXICON.oH]\r\n                                };\r\n                                var elementSize = {\r\n                                    w: rawElementSize[_strWidth] + settingsMargin[3] + settingsMargin[1],\r\n                                    h: rawElementSize[_strHeight] + settingsMargin[0] + settingsMargin[2]\r\n                                };\r\n                                var finalizeBlock = function (isX) {\r\n                                    var vars = getScrollbarVars(isX);\r\n                                    var wh = vars._w_h;\r\n                                    var lt = vars._left_top;\r\n                                    var xy = vars._x_y;\r\n                                    var blockIsEnd = settingsBlock[xy] == (isX ? _isRTL ? strBegin : strEnd : strEnd);\r\n                                    var blockIsCenter = settingsBlock[xy] == strCenter;\r\n                                    var blockIsNearest = settingsBlock[xy] == strNearest;\r\n                                    var scrollNever = settingsScroll[xy] == strNever;\r\n                                    var scrollIfNeeded = settingsScroll[xy] == strIfNeeded;\r\n                                    var vpSize = _viewportSize[wh];\r\n                                    var vpOffset = viewportOffset[lt];\r\n                                    var elSize = elementSize[wh];\r\n                                    var elOffset = elementOffset[lt];\r\n                                    var divide = blockIsCenter ? 2 : 1;\r\n                                    var elementCenterOffset = elOffset + (elSize / 2);\r\n                                    var viewportCenterOffset = vpOffset + (vpSize / 2);\r\n                                    var isInView =\r\n                                        elSize <= vpSize\r\n                                        && elOffset >= vpOffset\r\n                                        && elOffset + elSize <= vpOffset + vpSize;\r\n\r\n                                    if (scrollNever)\r\n                                        doNotScroll[xy] = true;\r\n                                    else if (!doNotScroll[xy]) {\r\n                                        if (blockIsNearest || scrollIfNeeded) {\r\n                                            doNotScroll[xy] = scrollIfNeeded ? isInView : false;\r\n                                            blockIsEnd = elSize < vpSize ? elementCenterOffset > viewportCenterOffset : elementCenterOffset < viewportCenterOffset;\r\n                                        }\r\n                                        elementScrollCoordinates[xy] -= blockIsEnd || blockIsCenter ? ((vpSize / divide) - (elSize / divide)) * (isX && _isRTL && normalizeRTL ? -1 : 1) : 0;\r\n                                    }\r\n                                };\r\n                                finalizeBlock(true);\r\n                                finalizeBlock(false);\r\n                            }\r\n\r\n                            if (doNotScroll.y)\r\n                                delete elementScrollCoordinates.y;\r\n                            if (doNotScroll.x)\r\n                                delete elementScrollCoordinates.x;\r\n\r\n                            coordinates = elementScrollCoordinates;\r\n                        }\r\n                    }\r\n\r\n                    finalScroll[_strScrollLeft] = getFinalScroll(true, getRawScroll(true, coordinates));\r\n                    finalScroll[_strScrollTop] = getFinalScroll(false, getRawScroll(false, coordinates));\r\n                    doScrollLeft = finalScroll[_strScrollLeft] !== undefined;\r\n                    doScrollTop = finalScroll[_strScrollTop] !== undefined;\r\n\r\n                    if ((doScrollLeft || doScrollTop) && (duration > 0 || durationIsObject)) {\r\n                        if (durationIsObject) {\r\n                            duration.complete = proxyCompleteCallback;\r\n                            _viewportElement.animate(finalScroll, duration);\r\n                        }\r\n                        else {\r\n                            animationOptions = {\r\n                                duration: duration,\r\n                                complete: proxyCompleteCallback\r\n                            };\r\n                            if (COMPATIBILITY.isA(easing) || FRAMEWORK.isPlainObject(easing)) {\r\n                                specialEasing[_strScrollLeft] = easing[0] || easing.x;\r\n                                specialEasing[_strScrollTop] = easing[1] || easing.y;\r\n                                animationOptions.specialEasing = specialEasing;\r\n                            }\r\n                            else {\r\n                                animationOptions.easing = easing;\r\n                            }\r\n                            _viewportElement.animate(finalScroll, animationOptions);\r\n                        }\r\n                    }\r\n                    else {\r\n                        if (doScrollLeft)\r\n                            _viewportElement[_strScrollLeft](finalScroll[_strScrollLeft]);\r\n                        if (doScrollTop)\r\n                            _viewportElement[_strScrollTop](finalScroll[_strScrollTop]);\r\n                        updateScrollbarInfos();\r\n                    }\r\n                };\r\n\r\n                /**\r\n                 * Stops all scroll animations.\r\n                 * @returns {*} The current OverlayScrollbars instance (for chaining).\r\n                 */\r\n                _base.scrollStop = function (param1, param2, param3) {\r\n                    _viewportElement.stop(param1, param2, param3);\r\n                    return _base;\r\n                };\r\n\r\n                /**\r\n                 * Returns all relevant elements.\r\n                 * @param elementName The name of the element which shall be returned.\r\n                 * @returns {{target: *, host: *, padding: *, viewport: *, content: *, scrollbarHorizontal: {scrollbar: *, track: *, handle: *}, scrollbarVertical: {scrollbar: *, track: *, handle: *}, scrollbarCorner: *} | *}\r\n                 */\r\n                _base.getElements = function (elementName) {\r\n                    var obj = {\r\n                        target: _targetElementNative,\r\n                        host: _hostElementNative,\r\n                        padding: _paddingElementNative,\r\n                        viewport: _viewportElementNative,\r\n                        content: _contentElementNative,\r\n                        scrollbarHorizontal: {\r\n                            scrollbar: _scrollbarHorizontalElement[0],\r\n                            track: _scrollbarHorizontalTrackElement[0],\r\n                            handle: _scrollbarHorizontalHandleElement[0]\r\n                        },\r\n                        scrollbarVertical: {\r\n                            scrollbar: _scrollbarVerticalElement[0],\r\n                            track: _scrollbarVerticalTrackElement[0],\r\n                            handle: _scrollbarVerticalHandleElement[0]\r\n                        },\r\n                        scrollbarCorner: _scrollbarCornerElement[0]\r\n                    };\r\n                    return type(elementName) == TYPES.s ? getObjectPropVal(obj, elementName) : obj;\r\n                };\r\n\r\n                /**\r\n                 * Returns a object which describes the current state of this instance.\r\n                 * @param stateProperty A specific property from the state object which shall be returned.\r\n                 * @returns {{widthAuto, heightAuto, overflowAmount, hideOverflow, hasOverflow, contentScrollSize, viewportSize, hostSize, autoUpdate} | *}\r\n                 */\r\n                _base.getState = function (stateProperty) {\r\n                    function prepare(obj) {\r\n                        if (!FRAMEWORK.isPlainObject(obj))\r\n                            return obj;\r\n                        var extended = extendDeep({}, obj);\r\n                        var changePropertyName = function (from, to) {\r\n                            if (extended[LEXICON.hOP](from)) {\r\n                                extended[to] = extended[from];\r\n                                delete extended[from];\r\n                            }\r\n                        };\r\n                        changePropertyName('w', _strWidth); //change w to width\r\n                        changePropertyName('h', _strHeight); //change h to height\r\n                        delete extended.c; //delete c (the 'changed' prop)\r\n                        return extended;\r\n                    };\r\n                    var obj = {\r\n                        destroyed: !!prepare(_destroyed),\r\n                        sleeping: !!prepare(_sleeping),\r\n                        autoUpdate: prepare(!_mutationObserversConnected),\r\n                        widthAuto: prepare(_widthAutoCache),\r\n                        heightAuto: prepare(_heightAutoCache),\r\n                        padding: prepare(_cssPaddingCache),\r\n                        overflowAmount: prepare(_overflowAmountCache),\r\n                        hideOverflow: prepare(_hideOverflowCache),\r\n                        hasOverflow: prepare(_hasOverflowCache),\r\n                        contentScrollSize: prepare(_contentScrollSizeCache),\r\n                        viewportSize: prepare(_viewportSize),\r\n                        hostSize: prepare(_hostSizeCache),\r\n                        documentMixed: prepare(_documentMixed)\r\n                    };\r\n                    return type(stateProperty) == TYPES.s ? getObjectPropVal(obj, stateProperty) : obj;\r\n                };\r\n\r\n                /**\r\n                 * Gets all or specific extension instance.\r\n                 * @param extName The name of the extension from which the instance shall be got.\r\n                 * @returns {{}} The instance of the extension with the given name or undefined if the instance couldn't be found.\r\n                 */\r\n                _base.ext = function (extName) {\r\n                    var result;\r\n                    var privateMethods = _extensionsPrivateMethods.split(' ');\r\n                    var i = 0;\r\n                    if (type(extName) == TYPES.s) {\r\n                        if (_extensions[LEXICON.hOP](extName)) {\r\n                            result = extendDeep({}, _extensions[extName]);\r\n                            for (; i < privateMethods.length; i++)\r\n                                delete result[privateMethods[i]];\r\n                        }\r\n                    }\r\n                    else {\r\n                        result = {};\r\n                        for (i in _extensions)\r\n                            result[i] = extendDeep({}, _base.ext(i));\r\n                    }\r\n                    return result;\r\n                };\r\n\r\n                /**\r\n                 * Adds a extension to this instance.\r\n                 * @param extName The name of the extension which shall be added.\r\n                 * @param extensionOptions The extension options which shall be used.\r\n                 * @returns {{}} The instance of the added extension or undefined if the extension couldn't be added properly.\r\n                 */\r\n                _base.addExt = function (extName, extensionOptions) {\r\n                    var registeredExtensionObj = _plugin.extension(extName);\r\n                    var instance;\r\n                    var instanceAdded;\r\n                    var instanceContract;\r\n                    var contractResult;\r\n                    var contractFulfilled = true;\r\n                    if (registeredExtensionObj) {\r\n                        if (!_extensions[LEXICON.hOP](extName)) {\r\n                            instance = registeredExtensionObj.extensionFactory.call(_base,\r\n                                extendDeep({}, registeredExtensionObj.defaultOptions),\r\n                                FRAMEWORK,\r\n                                COMPATIBILITY);\r\n\r\n                            if (instance) {\r\n                                instanceContract = instance.contract;\r\n                                if (type(instanceContract) == TYPES.f) {\r\n                                    contractResult = instanceContract(window);\r\n                                    contractFulfilled = type(contractResult) == TYPES.b ? contractResult : contractFulfilled;\r\n                                }\r\n                                if (contractFulfilled) {\r\n                                    _extensions[extName] = instance;\r\n                                    instanceAdded = instance.added;\r\n                                    if (type(instanceAdded) == TYPES.f)\r\n                                        instanceAdded(extensionOptions);\r\n\r\n                                    return _base.ext(extName);\r\n                                }\r\n                            }\r\n                        }\r\n                        else\r\n                            return _base.ext(extName);\r\n                    }\r\n                    else\r\n                        console.warn(\"A extension with the name \\\"\" + extName + \"\\\" isn't registered.\");\r\n                };\r\n\r\n                /**\r\n                 * Removes a extension from this instance.\r\n                 * @param extName The name of the extension which shall be removed.\r\n                 * @returns {boolean} True if the extension was removed, false otherwise e.g. if the extension wasn't added before.\r\n                 */\r\n                _base.removeExt = function (extName) {\r\n                    var instance = _extensions[extName];\r\n                    var instanceRemoved;\r\n                    if (instance) {\r\n                        delete _extensions[extName];\r\n\r\n                        instanceRemoved = instance.removed;\r\n                        if (type(instanceRemoved) == TYPES.f)\r\n                            instanceRemoved();\r\n\r\n                        return true;\r\n                    }\r\n                    return false;\r\n                };\r\n\r\n                /**\r\n                 * Constructs the plugin.\r\n                 * @param targetElement The element to which the plugin shall be applied.\r\n                 * @param options The initial options of the plugin.\r\n                 * @param extensions The extension(s) which shall be added right after the initialization.\r\n                 * @returns {boolean} True if the plugin was successfully initialized, false otherwise.\r\n                 */\r\n                function construct(targetElement, options, extensions) {\r\n                    _defaultOptions = globals.defaultOptions;\r\n                    _nativeScrollbarStyling = globals.nativeScrollbarStyling;\r\n                    _nativeScrollbarSize = extendDeep({}, globals.nativeScrollbarSize);\r\n                    _nativeScrollbarIsOverlaid = extendDeep({}, globals.nativeScrollbarIsOverlaid);\r\n                    _overlayScrollbarDummySize = extendDeep({}, globals.overlayScrollbarDummySize);\r\n                    _rtlScrollBehavior = extendDeep({}, globals.rtlScrollBehavior);\r\n\r\n                    //parse & set options but don't update\r\n                    setOptions(extendDeep({}, _defaultOptions, options));\r\n\r\n                    _cssCalc = globals.cssCalc;\r\n                    _msieVersion = globals.msie;\r\n                    _autoUpdateRecommended = globals.autoUpdateRecommended;\r\n                    _supportTransition = globals.supportTransition;\r\n                    _supportTransform = globals.supportTransform;\r\n                    _supportPassiveEvents = globals.supportPassiveEvents;\r\n                    _supportResizeObserver = globals.supportResizeObserver;\r\n                    _supportMutationObserver = globals.supportMutationObserver;\r\n                    _restrictedMeasuring = globals.restrictedMeasuring;\r\n                    _documentElement = FRAMEWORK(targetElement.ownerDocument);\r\n                    _documentElementNative = _documentElement[0];\r\n                    _windowElement = FRAMEWORK(_documentElementNative.defaultView || _documentElementNative.parentWindow);\r\n                    _windowElementNative = _windowElement[0];\r\n                    _htmlElement = findFirst(_documentElement, 'html');\r\n                    _bodyElement = findFirst(_htmlElement, 'body');\r\n                    _targetElement = FRAMEWORK(targetElement);\r\n                    _targetElementNative = _targetElement[0];\r\n                    _isTextarea = _targetElement.is('textarea');\r\n                    _isBody = _targetElement.is('body');\r\n                    _documentMixed = _documentElementNative !== document;\r\n\r\n                    /* On a div Element The if checks only whether:\r\n                     * - the targetElement has the class \"os-host\"\r\n                     * - the targetElement has a a child with the class \"os-padding\"\r\n                     * \r\n                     * If that's the case, its assumed the DOM has already the following structure:\r\n                     * (The \".os-host\" element is the targetElement)\r\n                     *\r\n                     *  <div class=\"os-host\">\r\n                     *      <div class=\"os-resize-observer-host\"></div>\r\n                     *      <div class=\"os-padding\">\r\n                     *          <div class=\"os-viewport\">\r\n                     *              <div class=\"os-content\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar-corner\"></div>\r\n                     *  </div>\r\n                     *\r\n                     * =====================================================================================\r\n                     * \r\n                     * On a Textarea Element The if checks only whether:\r\n                     * - the targetElement has the class \"os-textarea\" \r\n                     * - the targetElement is inside a element with the class \"os-content\" \r\n                     * \r\n                     * If that's the case, its assumed the DOM has already the following structure:\r\n                     * (The \".os-textarea\" (textarea) element is the targetElement)\r\n                     *\r\n                     *  <div class=\"os-host-textarea\">\r\n                     *      <div class=\"os-resize-observer-host\"></div>\r\n                     *      <div class=\"os-padding os-text-inherit\">\r\n                     *          <div class=\"os-viewport os-text-inherit\">\r\n                     *              <div class=\"os-content os-text-inherit\">\r\n                     *                  <div class=\"os-textarea-cover\"></div>\r\n                     *                  <textarea class=\"os-textarea os-text-inherit\"></textarea>\r\n                     *              </div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-horizontal \">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar os-scrollbar-vertical\">\r\n                     *          <div class=\"os-scrollbar-track\">\r\n                     *              <div class=\"os-scrollbar-handle\"></div>\r\n                     *          </div>\r\n                     *      </div>\r\n                     *      <div class=\"os-scrollbar-corner\"></div>\r\n                     *  </div>\r\n                     */\r\n                    _domExists = _isTextarea\r\n                        ? _targetElement.hasClass(_classNameTextareaElement) && _targetElement.parent().hasClass(_classNameContentElement)\r\n                        : _targetElement.hasClass(_classNameHostElement) && _targetElement.children(_strDot + _classNamePaddingElement)[LEXICON.l];\r\n\r\n                    var initBodyScroll;\r\n                    var bodyMouseTouchDownListener;\r\n\r\n                    //check if the plugin hasn't to be initialized\r\n                    if (_nativeScrollbarIsOverlaid.x && _nativeScrollbarIsOverlaid.y && !_currentPreparedOptions.nativeScrollbarsOverlaid.initialize) {\r\n                        dispatchCallback('onInitializationWithdrawn');\r\n                        if (_domExists) {\r\n                            setupStructureDOM(true);\r\n                            setupScrollbarsDOM(true);\r\n                            setupScrollbarCornerDOM(true);\r\n                        }\r\n\r\n                        _destroyed = true;\r\n                        _sleeping = true;\r\n\r\n                        return _base;\r\n                    }\r\n\r\n                    if (_isBody) {\r\n                        initBodyScroll = {};\r\n                        initBodyScroll.l = MATH.max(_targetElement[_strScrollLeft](), _htmlElement[_strScrollLeft](), _windowElement[_strScrollLeft]());\r\n                        initBodyScroll.t = MATH.max(_targetElement[_strScrollTop](), _htmlElement[_strScrollTop](), _windowElement[_strScrollTop]());\r\n\r\n                        bodyMouseTouchDownListener = function () {\r\n                            _viewportElement.removeAttr(LEXICON.ti);\r\n                            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, true, true);\r\n                        }\r\n                    }\r\n\r\n                    //build OverlayScrollbars DOM\r\n                    setupStructureDOM();\r\n                    setupScrollbarsDOM();\r\n                    setupScrollbarCornerDOM();\r\n\r\n                    //create OverlayScrollbars events\r\n                    setupStructureEvents();\r\n                    setupScrollbarEvents(true);\r\n                    setupScrollbarEvents(false);\r\n                    setupScrollbarCornerEvents();\r\n\r\n                    //create mutation observers\r\n                    createMutationObservers();\r\n\r\n                    //build resize observer for the host element\r\n                    setupResizeObserver(_sizeObserverElement, hostOnResized);\r\n\r\n                    if (_isBody) {\r\n                        //apply the body scroll to handle it right in the update method\r\n                        _viewportElement[_strScrollLeft](initBodyScroll.l)[_strScrollTop](initBodyScroll.t);\r\n\r\n                        //set the focus on the viewport element so you dont have to click on the page to use keyboard keys (up / down / space) for scrolling\r\n                        if (document.activeElement == targetElement && _viewportElementNative.focus) {\r\n                            //set a tabindex to make the viewportElement focusable\r\n                            _viewportElement.attr(LEXICON.ti, '-1');\r\n                            _viewportElementNative.focus();\r\n\r\n                            /* the tabindex has to be removed due to;\r\n                             * If you set the tabindex attribute on an <div>, then its child content cannot be scrolled with the arrow keys unless you set tabindex on the content, too\r\n                             * https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/tabindex\r\n                             */\r\n                            setupResponsiveEventListener(_viewportElement, _strMouseTouchDownEvent, bodyMouseTouchDownListener, false, true);\r\n                        }\r\n                    }\r\n\r\n                    //update for the first time & initialize cache\r\n                    _base.update(_strAuto);\r\n\r\n                    //the plugin is initialized now!\r\n                    _initialized = true;\r\n                    dispatchCallback('onInitialized');\r\n\r\n                    //call all callbacks which would fire before the initialized was complete\r\n                    each(_callbacksInitQeueue, function (index, value) { dispatchCallback(value.n, value.a); });\r\n                    _callbacksInitQeueue = [];\r\n\r\n                    //add extensions\r\n                    if (type(extensions) == TYPES.s)\r\n                        extensions = [extensions];\r\n                    if (COMPATIBILITY.isA(extensions))\r\n                        each(extensions, function (index, value) { _base.addExt(value); });\r\n                    else if (FRAMEWORK.isPlainObject(extensions))\r\n                        each(extensions, function (key, value) { _base.addExt(key, value); });\r\n\r\n                    //add the transition class for transitions AFTER the first update & AFTER the applied extensions (for preventing unwanted transitions)\r\n                    setTimeout(function () {\r\n                        if (_supportTransition && !_destroyed)\r\n                            addClass(_hostElement, _classNameHostTransition);\r\n                    }, 333);\r\n\r\n                    return _base;\r\n                }\r\n\r\n                if (_plugin.valid(construct(pluginTargetElement, options, extensions))) {\r\n                    INSTANCES(pluginTargetElement, _base);\r\n                }\r\n\r\n                return _base;\r\n            }\r\n\r\n            /**\r\n             * Initializes a new OverlayScrollbarsInstance object or changes options if already initialized or returns the current instance.\r\n             * @param pluginTargetElements The elements to which the Plugin shall be initialized.\r\n             * @param options The custom options with which the plugin shall be initialized.\r\n             * @param extensions The extension(s) which shall be added right after initialization.\r\n             * @returns {*}\r\n             */\r\n            _plugin = window[PLUGINNAME] = function (pluginTargetElements, options, extensions) {\r\n                if (arguments[LEXICON.l] === 0)\r\n                    return this;\r\n\r\n                var arr = [];\r\n                var optsIsPlainObj = FRAMEWORK.isPlainObject(options);\r\n                var inst;\r\n                var result;\r\n\r\n                //pluginTargetElements is null or undefined\r\n                if (!pluginTargetElements)\r\n                    return optsIsPlainObj || !options ? result : arr;\r\n\r\n                /*\r\n                   pluginTargetElements will be converted to:\r\n                   1. A jQueryElement Array\r\n                   2. A HTMLElement Array\r\n                   3. A Array with a single HTML Element\r\n                   so pluginTargetElements is always a array.\r\n                */\r\n                pluginTargetElements = pluginTargetElements[LEXICON.l] != undefined ? pluginTargetElements : [pluginTargetElements[0] || pluginTargetElements];\r\n                initOverlayScrollbarsStatics();\r\n\r\n                if (pluginTargetElements[LEXICON.l] > 0) {\r\n                    if (optsIsPlainObj) {\r\n                        FRAMEWORK.each(pluginTargetElements, function (i, v) {\r\n                            inst = v;\r\n                            if (inst !== undefined)\r\n                                arr.push(OverlayScrollbarsInstance(inst, options, extensions, _pluginsGlobals, _pluginsAutoUpdateLoop));\r\n                        });\r\n                    }\r\n                    else {\r\n                        FRAMEWORK.each(pluginTargetElements, function (i, v) {\r\n                            inst = INSTANCES(v);\r\n                            if ((options === '!' && _plugin.valid(inst)) || (COMPATIBILITY.type(options) == TYPES.f && options(v, inst)))\r\n                                arr.push(inst);\r\n                            else if (options === undefined)\r\n                                arr.push(inst);\r\n                        });\r\n                    }\r\n                    result = arr[LEXICON.l] === 1 ? arr[0] : arr;\r\n                }\r\n                return result;\r\n            };\r\n\r\n            /**\r\n             * Returns a object which contains global information about the plugin and each instance of it.\r\n             * The returned object is just a copy, that means that changes to the returned object won't have any effect to the original object.\r\n             */\r\n            _plugin.globals = function () {\r\n                initOverlayScrollbarsStatics();\r\n                var globals = FRAMEWORK.extend(true, {}, _pluginsGlobals);\r\n                delete globals['msie'];\r\n                return globals;\r\n            };\r\n\r\n            /**\r\n             * Gets or Sets the default options for each new plugin initialization.\r\n             * @param newDefaultOptions The object with which the default options shall be extended.\r\n             */\r\n            _plugin.defaultOptions = function (newDefaultOptions) {\r\n                initOverlayScrollbarsStatics();\r\n                var currDefaultOptions = _pluginsGlobals.defaultOptions;\r\n                if (newDefaultOptions === undefined)\r\n                    return FRAMEWORK.extend(true, {}, currDefaultOptions);\r\n\r\n                //set the new default options\r\n                _pluginsGlobals.defaultOptions = FRAMEWORK.extend(true, {}, currDefaultOptions, _pluginsOptions._validate(newDefaultOptions, _pluginsOptions._template, true, currDefaultOptions)._default);\r\n            };\r\n\r\n            /**\r\n             * Checks whether the passed instance is a non-destroyed OverlayScrollbars instance.\r\n             * @param osInstance The potential OverlayScrollbars instance which shall be checked.\r\n             * @returns {boolean} True if the passed value is a non-destroyed OverlayScrollbars instance, false otherwise.\r\n             */\r\n            _plugin.valid = function (osInstance) {\r\n                return osInstance instanceof _plugin && !osInstance.getState().destroyed;\r\n            };\r\n\r\n            /**\r\n             * Registers, Unregisters or returns a extension.\r\n             * Register: Pass the name and the extension. (defaultOptions is optional)\r\n             * Unregister: Pass the name and anything except a function as extension parameter.\r\n             * Get extension: Pass the name of the extension which shall be got.\r\n             * Get all extensions: Pass no arguments.\r\n             * @param extensionName The name of the extension which shall be registered, unregistered or returned.\r\n             * @param extension A function which generates the instance of the extension or anything other to remove a already registered extension.\r\n             * @param defaultOptions The default options which shall be used for the registered extension.\r\n             */\r\n            _plugin.extension = function (extensionName, extension, defaultOptions) {\r\n                var extNameTypeString = COMPATIBILITY.type(extensionName) == TYPES.s;\r\n                var argLen = arguments[LEXICON.l];\r\n                var i = 0;\r\n                if (argLen < 1 || !extNameTypeString) {\r\n                    //return a copy of all extension objects\r\n                    return FRAMEWORK.extend(true, { length: _pluginsExtensions[LEXICON.l] }, _pluginsExtensions);\r\n                }\r\n                else if (extNameTypeString) {\r\n                    if (COMPATIBILITY.type(extension) == TYPES.f) {\r\n                        //register extension\r\n                        _pluginsExtensions.push({\r\n                            name: extensionName,\r\n                            extensionFactory: extension,\r\n                            defaultOptions: defaultOptions\r\n                        });\r\n                    }\r\n                    else {\r\n                        for (; i < _pluginsExtensions[LEXICON.l]; i++) {\r\n                            if (_pluginsExtensions[i].name === extensionName) {\r\n                                if (argLen > 1)\r\n                                    _pluginsExtensions.splice(i, 1); //remove extension\r\n                                else\r\n                                    return FRAMEWORK.extend(true, {}, _pluginsExtensions[i]); //return extension with the given name\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            };\r\n\r\n            return _plugin;\r\n        })();\r\n\r\n        if (JQUERY && JQUERY.fn) {\r\n            /**\r\n             * The jQuery initialization interface.\r\n             * @param options The initial options for the construction of the plugin. To initialize the plugin, this option has to be a object! If it isn't a object, the instance(s) are returned and the plugin wont be initialized.\r\n             * @param extensions The extension(s) which shall be added right after initialization.\r\n             * @returns {*} After initialization it returns the jQuery element array, else it returns the instance(s) of the elements which are selected.\r\n             */\r\n            JQUERY.fn.overlayScrollbars = function (options, extensions) {\r\n                var _elements = this;\r\n                if (JQUERY.isPlainObject(options)) {\r\n                    JQUERY.each(_elements, function () { PLUGIN(this, options, extensions); });\r\n                    return _elements;\r\n                }\r\n                else\r\n                    return PLUGIN(_elements, options);\r\n            };\r\n        }\r\n        return PLUGIN;\r\n    }\r\n));","import \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.string.split.js\";\nimport \"core-js/modules/es.string.match.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.symbol.js\";\nimport \"core-js/modules/es.object.assign.js\";\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport OverlayScrollbars from 'overlayscrollbars';\n\n/**\n * Using overlayscrollbars-react component results use the esm modules\n * which doesn't go through babel leading to IE 11 uncompatibility\n * A PR is submitted that may fix this:\n * https://github.com/KingSora/OverlayScrollbars/pull/218\n * */\nexport var OverlayScrollbarsComponent = function OverlayScrollbarsComponent(_ref) {\n  var _ref$options = _ref.options,\n      options = _ref$options === void 0 ? {} : _ref$options,\n      extensions = _ref.extensions,\n      className = _ref.className,\n      children = _ref.children,\n      rest = _objectWithoutProperties(_ref, [\"options\", \"extensions\", \"className\", \"children\"]);\n\n  var osTargetRef = React.useRef();\n  var osInstance = React.useRef();\n  React.useEffect(function () {\n    osInstance.current = OverlayScrollbars(osTargetRef.current, options, extensions);\n    mergeHostClassNames(osInstance.current, className);\n    return function () {\n      if (OverlayScrollbars.valid(osInstance.current)) {\n        osInstance.current.destroy();\n        osInstance.current = null;\n      }\n    };\n  }, []);\n  React.useEffect(function () {\n    if (OverlayScrollbars.valid(osInstance.current)) {\n      osInstance.current.options(options);\n    }\n  }, [options]);\n  React.useEffect(function () {\n    if (OverlayScrollbars.valid(osInstance.current)) {\n      mergeHostClassNames(osInstance.current, className);\n    }\n  }, [className]);\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: \"os-host\"\n  }, rest, {\n    ref: osTargetRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-resize-observer-host\"\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-padding\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-viewport\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-content\"\n  }, children))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar os-scrollbar-horizontal \"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar-track\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar-handle\"\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar os-scrollbar-vertical\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar-track\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar-handle\"\n  }))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"os-scrollbar-corner\"\n  }));\n};\nOverlayScrollbarsComponent.displayName = \"OverlayScrollbarsComponent\";\n\nfunction mergeHostClassNames(osInstance, className) {\n  if (OverlayScrollbars.valid(osInstance)) {\n    var _osInstance$getElemen = osInstance.getElements(),\n        host = _osInstance$getElemen.host;\n\n    var regex = new RegExp(\"(^os-host([-_].+|)$)|\".concat(osInstance.options().className.replace(/\\s/g, '$|'), \"$\"), 'g');\n    var osClassNames = host.className.split(' ').filter(function (name) {\n      return name.match(regex);\n    }).join(' ');\n    host.className = \"\".concat(osClassNames, \" \").concat(className || '');\n  }\n}\n\nexport default OverlayScrollbarsComponent;"],"names":["window2","document","undefined","_targets","_instancePropertyString","_easingsMath","PLUGINNAME","TYPES","LEXICON","VENDORS","COMPATIBILITY","MATH","JQUERY","EASING","FRAMEWORK","INSTANCES","PLUGIN","global","window","this","o","f","a","s","b","n","u","z","c","i","l","p","ti","oH","cH","sH","oW","cW","sW","hOP","bCR","jsCache","cssCache","cssPrefixes","jsPrefixes","str","charAt","toUpperCase","slice","_cssPrefixes","_jsPrefixes","_cssProperty","name","result","resultPossibilities","v","currVendorWithoutDashes","uppercasedName","firstLetterToUpper","elmStyle","createElement","length","replace","_cssPropertyValue","property","values","suffix","prop","dummyStyle","possbleValues","split","preparedSuffix","cssText","_jsAPI","isInterface","fallback","toLowerCase","x","innerWidth","documentElement","body","innerHeight","func","thisObj","proto","aArgs","Array","call","arguments","fNOP","fBound","apply","concat","wW","bind","windowSize","wH","mO","rO","rAF","setTimeout","cAF","id","clearTimeout","now","Date","getTime","stpP","event","stopPropagation","cancelBubble","prvD","preventDefault","cancelable","returnValue","page","strPage","strClient","strX","strY","eventDoc","originalEvent","target","srcElement","ownerDocument","doc","touches","touch","y","scrollLeft","clientLeft","scrollTop","clientTop","mBtn","button","which","inA","item","arr","e","isA","def","isArray","type","obj","Object","toString","Math","jQuery","PI","cos","sin","w","pow","t","sqrt","asin","abs","swing","d","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","_rnothtmlwhite","_strSpace","_strEmpty","_strScrollLeft","_strScrollTop","_animations","_type","_cssNumber","animationIterationCount","columnCount","fillOpacity","flexGrow","flexShrink","fontWeight","lineHeight","opacity","order","orphans","widows","zIndex","zoom","src","copyIsArray","copy","options","clone","length2","deep","FakejQuery","isPlainObject","extend","fromIndex","key","hasOwnProperty","hasOwnConstructor","hasIsPrototypeOf","constructor","callback","isArrayLike","isFunction","value","match","join","elem","selector","nodeList","parentNode","querySelectorAll","el","strategy","child","insertAdjacentHTML","insertAdjacentElement","nodeType","val","parseCSSVal","animObj","removeFromQ","index","nextAnim","q","splice","props","duration","easing","complete","inArray","guaranteedNext","progress","step","specialEasing","hasOptions","from","to","push","css","isEmptyObject","timeNow","end","percent","fromVal","toVal","easedVal","timeStart","frame","elapsed","qPos","qObj","stop","max","parseFloat","start","pos","speacialEasing","startTime","clearQ","jumpToEnd","getClientRects","elms","base","elements","innerHTML","children","self","on","eventName","handler","eventNameLength","each","addEventListener","detachEvent","attachEvent","off","removeEventListener","one","oneEventName","oneHandler","trigger","createEvent","initEvent","dispatchEvent","fireEvent","append","prepend","before","after","remove","removeChild","unwrap","parent","parents","firstChild","insertBefore","wrapAll","wrapperHTML","nodes","wrapper","deepest","previousSibling","childNodes","appendChild","nextSibling","wrapInner","contents","wrap","styles","cptStyle","getCptStyle","getComputedStyle","currentStyle","getPropertyValue","hasClass","className","classList","classNamePrepared","contains","stripAndCollapse","indexOf","addClass","classes","cur","curValue","clazz","finalValue","supportClassList","elmClassList","add","removeClass","hide","display","show","attr","attrName","getAttribute","setAttribute","removeAttr","removeAttribute","offset","rect","pageXOffset","pageYOffset","top","left","position","offsetTop","offsetLeft","first","eq","last","find","ch","matches","is","elementIsVisible","childs","animate","jump","instance","argLen","_plugin","_pluginsGlobals","_pluginsAutoUpdateLoop","possibleTemplateTypes","restrictedStringsSplit","restrictedStringsPossibilitiesSplit","classNameAllowedValues","numberAllowedValues","booleanNullAllowedValues","booleanTrueTemplate","booleanFalseTemplate","callbackTemplate","overflowBehaviorAllowedValues","optionsDefaultsAndTemplate","convert","_pluginsExtensions","_pluginsOptions","resize","sizeAutoCapable","clipAlways","normalizeRTL","paddingAbsolute","autoUpdate","autoUpdateInterval","updateOnLoad","nativeScrollbarsOverlaid","showNativeScrollbars","initialize","overflowBehavior","scrollbars","visibility","autoHide","autoHideDelay","dragScrolling","clickScrolling","touchSupport","snapHandle","textarea","dynWidth","dynHeight","inheritedAttrs","callbacks","onInitialized","onInitializationWithdrawn","onDestroyed","onScrollStart","onScroll","onScrollStop","onOverflowChanged","onOverflowAmountChanged","onDirectionChanged","onContentSizeChanged","onHostSizeChanged","onUpdated","_defaults","template","recursive","valType","_template","_validate","writeErrors","diffObj","validatedOptions","validatedOptionsPrepared","objectCopy","isEmptyObj","checkObjectProps","data","template2","diffData","validatedOptions2","validatedOptionsPrepared2","prevPropName","restrictedStringValuesSplit","restrictedStringValuesPossibilitiesSplit","isRestrictedValue","mainPossibility","currType","j","isValid","isDiff","templateValue","templateValueType","templateIsComplex","templateTypes","dataDiffValue","dataValue","dataValueType","propPrefix","error","errorPossibleTypes","errorRestrictedStrings","warn","JSON","stringify","_default","_prepared","OverlayScrollbarsGlobals","OverlayScrollbarsAutoUpdateLoop","defaultOptions","_base","strOverflow","strHidden","strScroll","bodyElement","scrollbarDummyElement","scrollbarDummyElement0","dummyContainerChild","ua","strIndexOf","strSubString","msie2","trident","edge","rv","parseIntFunc","nativeScrollbarSize","calcNativeScrollbarSize","nativeScrollbarIsOverlaid","msie","navigator","userAgent","parseInt","measureElement","autoUpdateLoop","autoUpdateRecommended","nativeScrollbarStyling","ex","overlayScrollbarDummySize","cssCalc","restrictedMeasuring","scrollSize","h","scrollSize2","rtlScrollBehavior","overflow-y","overflow-x","direction","dummyContainerOffset","dummyContainerChildOffset","dummyContainerChildOffsetAfterScroll","supportTransform","supportTransition","supportPassiveEvents","supportsPassive","defineProperty","get","supportResizeObserver","supportMutationObserver","windowWidth","windowHeight","windowDpr","getWindowDPR","onResize","newW","newH","deltaW","deltaH","newScrollbarSize","deltaWRatio","round","deltaHRatio","absDeltaW","absDeltaH","absDeltaWRatio","absDeltaHRatio","newDPR","deltaIsBigger","difference","differenceIsBiggerThanOne","isZoom","oldScrollbarSize","update","valOne","valTwo","absValOne","absValTwo","dDPI","screen","deviceXDPI","sDPI","logicalXDPI","devicePixelRatio","globals","_loopID","_inArray","_getNow","_strAutoUpdate","_strAutoUpdateInterval","_strLength","_loopingInstances","_loopingInstancesIntervalCache","_loopIsActive","_loopIntervalDefault","_loopInterval","_loopTimeOld","loop","lowestInterval","instanceOptions","instanceAutoUpdateAllowed","instanceAutoUpdateInterval","timeNew","timeDelta","min","pluginTargetElement","extensions","_frameworkProto","isHTMLElement","inst","_nativeScrollbarIsOverlaid","_overlayScrollbarDummySize","_rtlScrollBehavior","_autoUpdateRecommended","_msieVersion","_nativeScrollbarStyling","_cssCalc","_nativeScrollbarSize","_supportTransition","_supportTransform","_supportPassiveEvents","_supportResizeObserver","_supportMutationObserver","_initialized","_destroyed","_isTextarea","_isBody","_documentMixed","_domExists","_isBorderBox","_sizeAutoObserverAdded","_paddingX","_paddingY","_borderX","_borderY","_marginX","_marginY","_isRTL","_sleeping","_defaultOptions","_currentOptions","_currentPreparedOptions","_lastUpdateTime","_swallowedUpdateTimeout","_windowElement","_documentElement","_htmlElement","_bodyElement","_targetElement","_hostElement","_sizeAutoObserverElement","_sizeObserverElement","_paddingElement","_viewportElement","_contentElement","_contentArrangeElement","_contentGlueElement","_textareaCoverElement","_scrollbarCornerElement","_scrollbarHorizontalElement","_scrollbarHorizontalTrackElement","_scrollbarHorizontalHandleElement","_scrollbarVerticalElement","_scrollbarVerticalTrackElement","_scrollbarVerticalHandleElement","_windowElementNative","_documentElementNative","_targetElementNative","_hostElementNative","_sizeAutoObserverElementNative","_sizeObserverElementNative","_paddingElementNative","_viewportElementNative","_contentElementNative","_hostSizeCache","_contentScrollSizeCache","_arrangeContentSizeCache","_hasOverflowCache","_hideOverflowCache","_widthAutoCache","_heightAutoCache","_cssBoxSizingCache","_cssPaddingCache","_cssBorderCache","_cssMarginCache","_cssDirectionCache","_cssDirectionDetectedCache","_paddingAbsoluteCache","_clipAlwaysCache","_contentGlueSizeCache","_overflowBehaviorCache","_overflowAmountCache","_ignoreOverlayScrollbarHidingCache","_autoUpdateCache","_sizeAutoCapableCache","_contentElementScrollSizeChangeDetectedCache","_hostElementSizeChangeDetectedCache","_scrollbarsVisibilityCache","_scrollbarsAutoHideCache","_scrollbarsClickScrollingCache","_scrollbarsDragScrollingCache","_resizeCache","_normalizeRTLCache","_classNameCache","_oldClassName","_textareaAutoWrappingCache","_textareaInfoCache","_textareaSizeCache","_textareaDynHeightCache","_textareaDynWidthCache","_bodyMinSizeCache","_mutationObserverHost","_mutationObserverContent","_mutationObserverHostCallback","_mutationObserverContentCallback","_mutationObserversConnected","_textareaHasFocus","_scrollbarsAutoHideTimeoutId","_scrollbarsAutoHideMoveTimeoutId","_scrollbarsAutoHideDelay","_scrollbarsAutoHideNever","_scrollbarsAutoHideScroll","_scrollbarsAutoHideMove","_scrollbarsAutoHideLeave","_scrollbarsHandleHovered","_scrollbarsHandlesDefineScrollPos","_resizeNone","_resizeBoth","_resizeHorizontal","_resizeVertical","_contentBorderSize","_scrollHorizontalInfo","_scrollVerticalInfo","_viewportSize","_nativeScrollbarMinSize","_strMinusHidden","_strMarginMinus","_strPaddingMinus","_strBorderMinus","_strTop","_strRight","_strBottom","_strLeft","_strMinMinus","_strMaxMinus","_strWidth","_strHeight","_strFloat","_strAuto","_strSync","_strScroll","_strHundredPercent","_strX","_strY","_strDot","_strScrollbar","_strMinusHorizontal","_strMinusVertical","_strMouseTouchDownEvent","_strMouseTouchUpEvent","_strMouseTouchMoveEvent","_strMouseEnter","_strMouseLeave","_strKeyDownEvent","_strKeyUpEvent","_strSelectStartEvent","_strTransitionEndEvent","_strResizeObserverProperty","_cassNamesPrefix","_classNameHTMLElement","_classNameHostElement","_classNameHostElementForeign","_classNameHostTextareaElement","_classNameHostScrollbarHorizontalHidden","_classNameHostScrollbarVerticalHidden","_classNameHostTransition","_classNameHostRTL","_classNameHostResizeDisabled","_classNameHostScrolling","_classNameHostOverflow","_classNameHostOverflowX","_classNameHostOverflowY","_classNameTextareaElement","_classNameTextareaCoverElement","_classNamePaddingElement","_classNameViewportElement","_classNameViewportNativeScrollbarsInvisible","_classNameViewportNativeScrollbarsOverlaid","_classNameContentElement","_classNameContentArrangeElement","_classNameContentGlueElement","_classNameSizeAutoObserverElement","_classNameResizeObserverElement","_classNameResizeObserverItemElement","_classNameResizeObserverItemFinalElement","_classNameTextInherit","_classNameScrollbar","_classNameScrollbarTrack","_classNameScrollbarTrackOff","_classNameScrollbarHandle","_classNameScrollbarHandleOff","_classNameScrollbarUnusable","_classNameScrollbarAutoHidden","_classNameScrollbarCorner","_classNameScrollbarCornerResize","_classNameScrollbarCornerResizeB","_classNameScrollbarCornerResizeH","_classNameScrollbarCornerResizeV","_classNameScrollbarHorizontal","_classNameScrollbarVertical","_classNameDragging","_classNameThemeNone","_classNamesDynamicDestroy","_callbacksInitQeueue","_viewportAttrsFromTarget","_extensions","_extensionsPrivateMethods","_swallowedUpdateHints","_swallowUpdateLag","_updateOnLoadEventName","_updateOnLoadElms","_updateAutoCache","_mutationObserverAttrsTextarea","_mutationObserverAttrsHost","_destroyEvents","sleep","force","attrsChanged","contentSizeC","doUpdateAuto","mutHost","mutContent","meaningfulAttrsChanged","updateAutoContentSizeChanged","_contentSizeChanged","_changedOptions","takeRecords","_hostSizeChanged","_force","newOptions","changedOps","option","getObjectPropVal","setOptions","destroy","extName","removeExt","pop","updateOnLoadCallback","scroll","coordinates","infoX","infoY","normalizeInvert","normalizeNegate","scrollX","_currentScroll","scrollXRatio","_currentScrollRatio","maxScrollX","_maxScroll","ratio","handleOffset","_handleOffset","handleLength","_handleLength","handleLengthRatio","_handleLengthRatio","trackLength","_trackLength","snappedHandleOffset","_snappedHandleOffset","isRTL","isRTLNormalized","doScrollLeft","doScrollTop","animationOptions","settingsAxis","settingsScroll","settingsBlock","settingsMargin","finalElement","coordinatesXAxisProps","coordinatesYAxisProps","coordinatesOperators","durationIsObject","completeCallback","finalScroll","strEnd","strBegin","strCenter","strNearest","strAlways","strNever","strIfNeeded","strLength","elementObjSettingsAxisValues","elementObjSettingsBlockValues","elementObjSettingsScrollValues","coordinatesIsElementObj","possibleElement","possibleElementIsJQuery","possibleElementIsHTMLElement","updateScrollbarInfos","proxyCompleteCallback","currValue","allowedValues","isX","coordinates2","coordinateProps","rawScroll","operator","amount","possibleOperator","isString","scrollInfo","currScroll","maxScroll","mult","isRTLisX","normalizeShortcuts","strReplace","evalFunc","eval","substr","parseToZeroOrNumber","isNaN","toFixed","normalizeIsRTLisX","operatorCurrScroll","invert","negate","valueInternalType","defaultValue","valueArrLength","valueArrItem","resultDefault","valueType","checkSettingsStringValue","marginTopRightBottomLeftArray","currValueType","valueDirections","marginLength","margin","axis","block","marginDefault","marginType","generateMargin","getPerAxisValue","viewportScroll","viewportOffset","elementOffset","doNotScroll","elementScrollCoordinates","measuringElm","rawElementSize","width","height","elementSize","finalizeBlock","vars","getScrollbarVars","wh","_w_h","lt","_left_top","xy","_x_y","blockIsEnd","blockIsCenter","blockIsNearest","scrollNever","scrollIfNeeded","vpSize","vpOffset","elSize","elOffset","divide","elementCenterOffset","viewportCenterOffset","isInView","getFinalScroll","getRawScroll","scrollStop","param1","param2","param3","getElements","elementName","host","padding","viewport","content","scrollbarHorizontal","scrollbar","track","handle","scrollbarVertical","scrollbarCorner","getState","stateProperty","obj2","extended","extendDeep","changePropertyName","destroyed","prepare","sleeping","widthAuto","heightAuto","overflowAmount","hideOverflow","hasOverflow","contentScrollSize","viewportSize","hostSize","documentMixed","ext","privateMethods","addExt","extensionOptions","instanceAdded","instanceContract","contractResult","registeredExtensionObj","extension","contractFulfilled","extensionFactory","contract","added","instanceRemoved","removed","valid","construct","element","eventNames","listener","remove2","passiveOrOptions","collected","method","onOff","events","passiveOrOptionsIsObj","passive","_passive","capture","_capture","nativeParam","setupResponsiveEventListener","targetElement","onElementResizedCallback","resizeObserver","strAnimationStartEvent","strChildNodes","constScroll","generateDiv","observe","dir","style","isDirty","rAFId","currWidth","currHeight","observerElement","shrinkElement","expandElement","expandElementChild","widthCache","heightCache","factor","reset","onResized","expandChildCSS","observerElementCSS","isIE","onload","wnd","contentDocument","defaultView","directionChanged","scrollLeftValue","resizeObserverObj","disconnect","mutationTarget","mutationAttrName","mutationIsClass","oldMutationVal","newClassVal","hostClassNameRegex","contentTimeout","sizeAuto","action","mutationObserverContentLag","mutationObserver","contentLastUpdate","mutations","doUpdate","isUnknownMutation","mutation","doUpdateForce","mutatedAttrs","attributeName","oldValue","createHostClassNameRegExp","filter","hostClassNamesChanged","attributes","attributeOldValue","attributeFilter","subtree","childList","characterData","changed","checkCache","elm","updateOnLoadSelector","hostOnMouseMove","hostOnMouseEnter","hostOnMouseLeave","bodyMinSize","oldClassNames","newClassNames","regex","currClasses","diff","getArrayDifferences","idx","mutationType","strClosest","float","bodyMinSizeC","contentElementScrollSize","contentMeasureElement","getContentMeasureElement","textareaValueLength","setCSS","bodyMinSizeChanged","curr","cache","changedAttrs","checks","_elem","_attrs","check","index2","propertyName","flexBasis","affectingPropsX","affectingPropsXContentBox","affectingPropsY","affectingPropsYContentBox","_strS","_strVS","checkX","sizeIsAffected","checkPropertyName","attrs","targetAttr","origWidth","origHeight","wrapAttrOff","minWidth","minHeight","doMeasure","_originalWidth","_originalHeight","_dynamicWidth","_dynamicHeight","updateHints","displayIsHidden","hostSizeChanged","contentSizeChanged","changedOptions","swallow","checkCacheAutoForce","currentPreparedOptionsScrollbars","currentPreparedOptionsTextarea","scrollbarsVisibility","scrollbarsVisibilityChanged","scrollbarsAutoHide","scrollbarsAutoHideChanged","scrollbarsClickScrolling","scrollbarsClickScrollingChanged","scrollbarsDragScrolling","scrollbarsDragScrollingChanged","classNameChanged","resizeChanged","paddingAbsoluteChanged","clipAlwaysChanged","sizeAutoCapableChanged","ignoreOverlayScrollbarHiding","ignoreOverlayScrollbarHidingChanged","autoUpdateChanged","overflowBehaviorChanged","textareaDynWidth","textareaDynWidthChanged","textareaDynHeight","textareaDynHeightChanged","oldSize","newSize","sizeAutoObserverElementBCRect","textareaAutoWrapping","textareaAutoWrappingChanged","cssDirection","cssDirectionChanged","boxSizing","boxSizingChanged","getTopRightBottomLeftHost","isRTLLeft","isRTLRight","widthAutoResizeDetection","widthAutoObserverDetection","right","tmpCurrHostWidth","tmpCurrContentGlueWidth","tmpNewHostWidth","widthAutoChanged","wasWidthAuto","bottom","heightAutoChanged","wasHeightAuto","border","contentElementCSS","contentGlueElementCSS","getHostSize","getViewportSize","paddingAbsoluteX","r","paddingAbsoluteY","paddingElementCSS","textareaCSS","paddingValues","textareaSize","textareaUpdate","textareaSizeChanged","textareaDynOrigSize","strOverflowX","strOverflowY","strVisible","viewportElementResetCSS","resetXTmp","ys","resetBottomTmp","xs","contentSize","hostAbsoluteRectSize","contentGlueSize","textareaCoverCSS","setContentGlueElementCSSfunction","horizontal","scrollbarVars","strWH","_width_height","autoSize","borderSize","paddingSize","marginSize","hideOverflowForceTextarea","previousOverflowAmount","overflowBehaviorIsVS","overflowBehaviorIsVH","overflowBehaviorIsS","canScroll","viewportRect","setOverflowVariables","xyI","widthHeight","scrollMax","_Left_Top","fractionalOverflowAmount","checkFractionalOverflowAmount","setContentElementCSS","borderDesign","contentArrangeElementCSS","arrangeContent","arrangeChanged","scrollbarVarsInverted","strDirection","invertedAutoSize","setViewportCSS","viewportElementCSS","XY","_X_Y","elementStyle","webkitTransform","floatTmp","posLeftWithoutFloat","textareaInfo","getTextareaInfo","textareaRowsChanged","_rows","cursorRow","_cursorRow","cursorCol","_cursorColumn","widestRow","_widestRow","lastRow","lastCol","_columns","cursorIsLastPosition","_cursorPosition","_cursorMax","textareaScrollAmount","scrollbarsVisibilityVisible","scrollbarsVisibilityHidden","scrollbarsVisibilityAuto","refreshScrollbarsVisibility","showX","showY","xScrollable","yScrollable","clipped","forced","i2","validatedOpts","strParent","classNameResizeObserverHost","classNameTextareaElementFull","textareaClass","adoptAttrs","adoptAttrsMap","applyAdoptedAttrs","applyAdoptedAttrsElm","hostElementClassNames","hostElementCSS","selectOrGenerateDivByClass","findFirst","textareaUpdateIntervalID","scrollStopTimeoutId","textareaKeyDownRestrictedKeyCodes","textareaKeyDownKeyCodesList","scrollStopDelay","strFocus","doClearInterval","keyCode","setInterval","updateTextarea","isSizeAffectingCSSProperty","nativeOverlayScrollbarsAreActive","textareaOnKeyDown","textareaOnKeyUp","textareaOnScroll","textareaOnDrop","textareaOnFocus","textareaOnFocusout","contentOnTransitionEnd","viewportOnScroll","horizontalElements","verticalElements","selectOrGenerateScrollbarDOM","isHorizontal","_scrollbar","_track","_handle","trackTimeout","mouseDownScroll","mouseDownOffset","mouseDownInvertedScale","scrollbarVarsInfo","_info","insideIFrame","strActive","strSnapHandle","strClickEvent","scrollDurationFactor","increaseDecreaseScrollAmountKeyCodes","isTouchEvent","getPreparedScrollbarsOption","onMouseTouchDownContinue","scrollDelta","isFinite","documentDragMove","documentMouseTouchUp","documentKeyDown","documentKeyUp","documentOnSelectStart","stopClickEventPropagation","clientX","clientY","getHostElementInvertedScale","getPointerPosition","decreaseScroll","handleToViewportRatio","scrollDistance","scrollBaseDuration","scrollFirstIterationDelay","trackOffset","ctrlKey","instantScroll","shiftKey","instantScrollTransition","isFirstIteration","scrollActionFinsished","transition","scrollActionInstantFinished","scrollAction","mouseOffset","scrollRange","scrollDuration","timeoutDelay","instantScrollPosition","rtlIsNormal","decreaseScrollCondition","scrollObj","animationObj","onHandleMouseTouchDown","onTrackMouseTouchDown","onTrackMouseTouchEnter","onTrackMouseTouchLeave","onScrollbarMouseTouchDown","shallBeVisible","scrollbarElement","delayfree","anyActive","handleCSS","digit","handleRatio","floor","_Width_Height","scrollOrTransition","transformOffset","translateValue","transitionDuration","isRTLisHorizontal","strTranslateBrace","strTransform","strTransition","nativeScroll","currentScroll","handleTrackDiff","getScrollRatio","getHandleOffset","scrollRatio2","scrollRatio","getCSSTransitionString","isTrack","element2","_l_t","reconnectMutationObserver","mouseDownPosition","mouseDownSize","pageOffset","getCoordinates","eventIsTrusted","releaseCapture","screenX","screenY","setCapture","args","dependent","extensionOnName","targetCSSObject","prefix","zeroX","zeroY","transitionStr","assembledValue","strResult","valueArray","regExpString","regExpMain","RegExp","regExpValidate","properties","splitCssStyleByComma","$1","withCurrClassNameOption","withOldClassNameOption","appendix","appendClasses","condition","strOwnerDocument","strHTMLElement","parentWindow","nodeName","a1","a2","k","toFloat","num","textareaCursorPosition","selectionStart","rowCols","textareaValue","textareaLength","textareaRowSplit","textareaLastRow","textareaCurrentCursorRowSplit","textareaLastCol","classesOrAttrs","selectParentOrOnlyChildren","onlyChildren","selectParent","path","splits","splitsLength","extendObj","extendObjRoot","current","doAdd","options2","extensions2","initBodyScroll","bodyMouseTouchDownListener","hostOnResized","activeElement","focus","pluginTargetElements","optsIsPlainObj","OverlayScrollbarsInstance","newDefaultOptions","currDefaultOptions","osInstance","extensionName","extNameTypeString","fn","overlayScrollbars","_elements","assign","source","prototype","excluded","sourceKeys","keys","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","OverlayScrollbarsComponent","_ref","_ref$options","rest","_objectWithoutProperties","osTargetRef","React","useRef","useEffect","OverlayScrollbars","_extends","ref","osClassNames","displayName"],"mappings":"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"}